{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"container\"\n};\n\nvar _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"allSampleContent\",\n  \"class\": \"p-4 w-full\"\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"sample\"\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"width\": \"100%\",\n    \"margin-bottom\": \"10px\",\n    \"display\": \"flex\",\n    \"justify-content\": \"space-between\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"myPaletteDiv\",\n  style: {\n    \"width\": \"150px\",\n    \"margin-right\": \"10px\",\n    \"background-color\": \"whitesmoke\",\n    \"border\": \"solid 4px #82929b\"\n  }\n}), /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"myDiagramDiv\",\n  style: {\n    \"flex-grow\": \"3\",\n    \"margin-right\": \"10px\",\n    \"height\": \"600px\",\n    \"background-color\": \"whitesmoke\",\n    \"border\": \"solid 4px #82929b\"\n  }\n}), /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"myDiagramDiv\",\n  style: {\n    \"flex-grow\": \"2\",\n    \"height\": \"600px\",\n    \"background-color\": \"whitesmoke\",\n    \"border\": \"solid 4px #82929b\"\n  }\n})]), /*#__PURE__*/_createElementVNode(\"button\", {\n  id: \"SaveButton\",\n  onclick: \"save()\"\n}, \"Save\"), /*#__PURE__*/_createElementVNode(\"button\", {\n  onclick: \"load()\"\n}, \"Load\"), /*#__PURE__*/_createElementVNode(\"button\", {\n  onclick: \"layout()\"\n}, \"Layout\"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createElementVNode(\"textarea\", {\n  id: \"mySavedModel\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"300px\"\n  }\n}, \"\\r\\n{ \\\"class\\\": \\\"GraphLinksModel\\\", \\r\\n\\\"nodeDataArray\\\": [ {\\\"category\\\":\\\"Data\\\", \\\"key\\\":-1, \\\"loc\\\":\\\"-70.5 -90.19999980926514\\\"} ], \\r\\n\\\"linkDataArray\\\": []}\\r\\n  \")])], -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" <iframe\\r\\n      name=\\\"canvasPage\\\"\\r\\n      id=\\\"canvas\\\"\\r\\n      v-bind=\\\"getCanvasUrl\\\"\\r\\n      width=\\\"100%\\\"\\r\\n      height=\\\"100%\\\"\\r\\n      frameborder=\\\"0\\\"\\r\\n      ref=\\\"iframeDom\\\"\\r\\n    ></iframe> \"), _hoisted_2]);\n}","map":{"version":3,"mappings":";;AACO,WAAM;;;8BAYTA,oBAwsBM,KAxsBN,EAwsBM;AAxsBDC,IAAE,EAAC,kBAwsBF;AAxsBqB,WAAM;AAwsB3B,CAxsBN,gBAspBED,oBAiDM,KAjDN,EAiDM;AAjDDC,IAAE,EAAC;AAiDF,CAjDN,EAAgB,cACdD,oBAoCM,KApCN,EAoCM;AAnCJE,OAKC,EALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCI,CApCN,EAMG,cAEDF,oBAQO,KARP,EAQO;AAPLC,IAAE,EAAC,cAOE;AANLC,OAKC,EALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAMK,CARP,CAFC,eAWDF,oBASO,KATP,EASO;AARLC,IAAE,EAAC,cAQE;AAPLC,OAMC,EAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOK,CATP,CAXC,eAqBDF,oBAQO,KARP,EAQO;AAPLC,IAAE,EAAC,cAOE;AANLC,OAKC,EALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAMK,CARP,CArBC,CANH,CADc,eAuCdF,oBAAsD,QAAtD,EAAsD;AAA9CC,IAAE,EAAC,YAA2C;AAA9BE,SAAO,EAAC;AAAsB,CAAtD,EAAyC,MAAzC,CAvCc,eAwCdH,oBAAsC,QAAtC,EAAsC;AAA9BG,SAAO,EAAC;AAAsB,CAAtC,EAAyB,MAAzB,CAxCc,eAyCdH,oBAA0C,QAA1C,EAA0C;AAAlCG,SAAO,EAAC;AAA0B,CAA1C,EAA2B,QAA3B,CAzCc,eA0CdH,oBAAM,IAAN,CA1Cc,eA2CdA,oBAKC,UALD,EAKC;AALSC,IAAE,EAAC,cAKZ;AAL2BC,OAAkC,EAAlC;AAAA;AAAA;AAAA;AAK3B,CALD,EAA+D,8KAA/D,CA3Cc,CAAhB,EAtpBF;;AAAA;;;uBAZFE,oBAqtBM,KArtBN,cAqtBM,CAptBJC,8OAotBI,EAzsBJC,UAysBI,CArtBN","names":["_createElementVNode","id","style","onclick","_createElementBlock","_createCommentVNode","_hoisted_2"],"sourceRoot":"","sources":["C:\\qp_box\\_CodeField\\Neural-Lego\\frontend\\src\\views\\CanvasView.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- <iframe\r\n      name=\"canvasPage\"\r\n      id=\"canvas\"\r\n      v-bind=\"getCanvasUrl\"\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n      frameborder=\"0\"\r\n      ref=\"iframeDom\"\r\n    ></iframe> -->\r\n\r\n    <script src=\"go.js\"></script>\r\n    <div id=\"allSampleContent\" class=\"p-4 w-full\">\r\n      <script id=\"code\">\r\n        function init() {\r\n          const $ = go.GraphObject.make; // for conciseness in defining templates\r\n\r\n          var yellowgrad = $(go.Brush, \"Linear\", {\r\n            0: \"#bde0fe\",\r\n            1: \"#bde0fe\",\r\n          });\r\n          var greengrad = $(go.Brush, \"Linear\", {\r\n            0: \"#fdffb6\",\r\n            1: \"#fdffb6\",\r\n          });\r\n          var bluegrad = $(go.Brush, \"Linear\", {\r\n            0: \"#caffbf\",\r\n            1: \"#caffbf\",\r\n          });\r\n          var redgrad = $(go.Brush, \"Linear\", {\r\n            0: \"#ffadad\",\r\n            1: \"#ffadad\",\r\n          });\r\n          var whitegrad = $(go.Brush, \"Linear\", {\r\n            0: \"#E7C5FC\",\r\n            1: \"#E7C5FC\",\r\n          });\r\n\r\n          var bigfont = \"bold 15pt Helvetica, Arial, sans-serif\";\r\n          var smallfont = \"bold 13pt Helvetica, Arial, sans-serif\";\r\n\r\n          // Common text styling\r\n          function textStyle() {\r\n            return {\r\n              margin: 6,\r\n              wrap: go.TextBlock.WrapFit,\r\n              textAlign: \"center\",\r\n              editable: true,\r\n              font: bigfont,\r\n            };\r\n          }\r\n\r\n          myDiagram = $(go.Diagram, \"myDiagramDiv\", {\r\n            // // have mouse wheel events zoom in and out instead of scroll up and down\r\n            //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\r\n            initialAutoScale: go.Diagram.Uniform,\r\n            \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\r\n            layout: $(go.LayeredDigraphLayout, {\r\n              isInitial: false,\r\n              isOngoing: false,\r\n              layerSpacing: 50,\r\n            }),\r\n            \"undoManager.isEnabled\": true,\r\n          });\r\n\r\n          var nodeSelectionAdornmentTemplate = $(\r\n            go.Adornment,\r\n            \"Auto\",\r\n            $(go.Shape, {\r\n              fill: null,\r\n              stroke: \"#979dac\",\r\n              strokeWidth: 2,\r\n              strokeDashArray: [4, 2],\r\n            }),\r\n            $(go.Placeholder)\r\n          );\r\n\r\n          // define the Node template\r\n          myDiagram.nodeTemplate = $(\r\n            go.Node,\r\n            \"Auto\",\r\n            {\r\n              locationSpot: go.Spot.Center,\r\n            },\r\n            new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n              go.Point.stringify\r\n            ),\r\n            {\r\n              selectable: true,\r\n              selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n            },\r\n            // define the node's outer shape, which will surround the TextBlock\r\n            $(go.Shape, \"Rectangle\", {\r\n              fill: yellowgrad,\r\n              stroke: null,\r\n              portId: \"\",\r\n              fromLinkable: true,\r\n              toLinkable: true,\r\n              cursor: \"pointer\",\r\n              toEndSegmentLength: 50,\r\n              fromEndSegmentLength: 50,\r\n            }),\r\n            $(\r\n              go.TextBlock,\r\n              \"ReLU\",\r\n              {\r\n                margin: 6,\r\n                font: bigfont,\r\n                editable: true,\r\n                minSize: new go.Size(40, NaN),\r\n              },\r\n              new go.Binding(\"text\", \"text\").makeTwoWay()\r\n            )\r\n          );\r\n\r\n          // Data\r\n          myDiagram.nodeTemplateMap.add(\r\n            \"Data\",\r\n            $(\r\n              go.Node,\r\n              \"Auto\",\r\n              {\r\n                locationSpot: go.Spot.Center,\r\n                margin: new go.Margin(0, 0, 0, 0),\r\n              },\r\n              new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n                go.Point.stringify\r\n              ),\r\n              {\r\n                selectable: true,\r\n                selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n              },\r\n              $(go.Shape, \"Circle\", {\r\n                fill: bluegrad,\r\n                portId: \"\",\r\n                fromLinkable: true,\r\n                cursor: \"pointer\",\r\n                //fromEndSegmentLength: 40,\r\n                stroke: \"#74c69d\",\r\n\r\n                strokeWidth: 4,\r\n              }),\r\n              $(\r\n                go.TextBlock,\r\n                \"Data\",\r\n                textStyle(),\r\n                {\r\n                  stroke: \"#2d6a4f\",\r\n                  minSize: new go.Size(40, NaN),\r\n                },\r\n                new go.Binding(\"text\", \"text\").makeTwoWay()\r\n              )\r\n            )\r\n          );\r\n\r\n          myDiagram.nodeTemplateMap.add(\r\n            \"End\",\r\n            $(\r\n              go.Node,\r\n              \"Auto\",\r\n              {\r\n                locationSpot: go.Spot.Center,\r\n              },\r\n              new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n                go.Point.stringify\r\n              ),\r\n              {\r\n                selectable: true,\r\n                selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n              },\r\n              $(go.Shape, \"Circle\", {\r\n                fill: redgrad,\r\n                portId: \"\",\r\n                toLinkable: true,\r\n                cursor: \"pointer\",\r\n                fromEndSegmentLength: 40,\r\n                stroke: \"#df7373\",\r\n                strokeWidth: 4,\r\n              }),\r\n              $(\r\n                go.TextBlock,\r\n                \"End\",\r\n                textStyle(),\r\n                {\r\n                  stroke: \"#ad2e24\",\r\n                  minSize: new go.Size(40, NaN),\r\n                },\r\n                new go.Binding(\"text\", \"text\").makeTwoWay()\r\n              )\r\n            )\r\n          );\r\n\r\n          myDiagram.nodeTemplateMap.add(\r\n            \"ReLU\",\r\n            $(\r\n              go.Node,\r\n              \"Auto\",\r\n              {\r\n                locationSpot: go.Spot.Center,\r\n              },\r\n              new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n                go.Point.stringify\r\n              ),\r\n              {\r\n                selectable: true,\r\n                selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n              },\r\n              $(go.Shape, \"Ellipse\", {\r\n                fill: greengrad,\r\n                portId: \"\",\r\n                fromLinkable: true,\r\n                toLinkable: true,\r\n                cursor: \"pointer\",\r\n                fromEndSegmentLength: 40,\r\n                stroke: \"#ffd100\",\r\n                strokeWidth: 4,\r\n              }),\r\n              $(\r\n                go.TextBlock,\r\n                \"ReLU\",\r\n                textStyle(),\r\n                {\r\n                  stroke: \"#e2711d\",\r\n                  // locationSpot: go.Spot.Center,\r\n                  //margin: new go.Margin(10, 0, 0, 0),\r\n                  minSize: new go.Size(60, NaN),\r\n                },\r\n                new go.Binding(\"text\", \"text\").makeTwoWay()\r\n              )\r\n            )\r\n          );\r\n\r\n          var reasonTemplate = $(\r\n            go.Panel,\r\n            $(\r\n              go.Panel,\r\n              \"Table\",\r\n              {\r\n                maxSize: new go.Size(200, 999),\r\n                margin: new go.Margin(0, 3, 10, 3),\r\n                defaultAlignment: go.Spot.Center,\r\n              },\r\n              $(go.RowColumnDefinition, {\r\n                column: 2,\r\n                width: 2,\r\n              }),\r\n              $(\r\n                go.TextBlock,\r\n                \"input = \",\r\n                {\r\n                  margin: new go.Margin(4, 0, 0, 0),\r\n                  maxSize: new go.Size(200, NaN),\r\n                  wrap: go.TextBlock.WrapFit,\r\n                  //stroke: \"whitesmoke\",\r\n                  editable: true,\r\n                  font: smallfont,\r\n                  row: 2,\r\n                  column: 0,\r\n                  stroke: \"#3e5c76\",\r\n                },\r\n                new go.Binding(\"text\", \"text0\").makeTwoWay()\r\n              ),\r\n\r\n              $(\r\n                go.TextBlock,\r\n                \"value\",\r\n                {\r\n                  margin: new go.Margin(4, 0, 0, 0),\r\n                  maxSize: new go.Size(200, NaN),\r\n                  wrap: go.TextBlock.WrapFit,\r\n                  //stroke: \"whitesmoke\",\r\n                  editable: true,\r\n                  stroke: \"#3e5c76\",\r\n                  font: smallfont,\r\n                  row: 2,\r\n                  column: 1,\r\n                },\r\n                new go.Binding(\"text\", \"text1\").makeTwoWay()\r\n              ),\r\n\r\n              $(\r\n                go.TextBlock,\r\n                \"output = \",\r\n                {\r\n                  margin: new go.Margin(4, 0, 0, 0),\r\n                  maxSize: new go.Size(200, NaN),\r\n                  wrap: go.TextBlock.WrapFit,\r\n                  //stroke: \"whitesmoke\",\r\n                  editable: true,\r\n                  font: smallfont,\r\n                  stroke: \"#3e5c76\",\r\n                  row: 3,\r\n                  column: 0,\r\n                },\r\n                new go.Binding(\"text\", \"text2\").makeTwoWay()\r\n              ),\r\n\r\n              $(\r\n                go.TextBlock,\r\n                \"value\",\r\n                {\r\n                  margin: new go.Margin(4, 0, 0, 9),\r\n                  maxSize: new go.Size(200, NaN),\r\n                  wrap: go.TextBlock.WrapFit,\r\n                  //stroke: \"whitesmoke\",\r\n                  editable: true,\r\n                  font: smallfont,\r\n                  stroke: \"#3e5c76\",\r\n                  row: 3,\r\n                  column: 1,\r\n                },\r\n                new go.Binding(\"text\", \"text3\").makeTwoWay()\r\n              )\r\n            ) // end Table Panel\r\n          );\r\n\r\n          myDiagram.nodeTemplateMap.add(\r\n            \"FC\",\r\n            $(\r\n              go.Node,\r\n              \"Auto\",\r\n              {\r\n                locationSpot: go.Spot.Center,\r\n              },\r\n              new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n                go.Point.stringify\r\n              ),\r\n              {\r\n                selectable: true,\r\n                selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n              },\r\n              $(go.Shape, \"RoundedRectangle\", {\r\n                fill: yellowgrad,\r\n                stroke: \"#4ea8de\",\r\n                strokeWidth: 4,\r\n                portId: \"\",\r\n                fromLinkable: true,\r\n                toLinkable: true,\r\n                cursor: \"pointer\",\r\n                toEndSegmentLength: 50,\r\n                fromEndSegmentLength: 40,\r\n              }),\r\n              $(\r\n                go.Panel,\r\n                \"Vertical\",\r\n                {\r\n                  defaultAlignment: go.Spot.Center,\r\n                },\r\n\r\n                $(\r\n                  go.TextBlock,\r\n                  \"FC\",\r\n                  textStyle(),\r\n                  {\r\n                    stroke: \"#3e5c76\",\r\n                    margin: new go.Margin(8, 0, 0, 0),\r\n                    minSize: new go.Size(100, NaN),\r\n                    //maxSize: new go.Size(200, NaN)\r\n                  },\r\n                  new go.Binding(\"text\", \"text\").makeTwoWay()\r\n                ),\r\n\r\n                $(\r\n                  go.Panel,\r\n                  \"Vertical\",\r\n                  {\r\n                    defaultAlignment: go.Spot.TopLeft,\r\n                    itemTemplate: reasonTemplate,\r\n                  },\r\n                  new go.Binding(\"itemArray\", \"reasonsList\").makeTwoWay()\r\n                )\r\n              )\r\n            )\r\n          );\r\n\r\n          var linkSelectionAdornmentTemplate = $(\r\n            go.Adornment,\r\n            \"Link\",\r\n            $(\r\n              go.Shape,\r\n              // isPanelMain declares that this Shape shares the Link.geometry\r\n              {\r\n                isPanelMain: true,\r\n                fill: null,\r\n                stroke: \"deepskyblue\",\r\n                strokeWidth: 2.5,\r\n              }\r\n            ) // use selection object's strokeWidth\r\n          );\r\n          // replace the default Link template in the linkTemplateMap\r\n          myDiagram.linkTemplate = $(\r\n            go.Link, // the whole link panel\r\n            {\r\n              selectable: true,\r\n              selectionAdornmentTemplate: linkSelectionAdornmentTemplate,\r\n            },\r\n            new go.Binding(\"points\").makeTwoWay(),\r\n            {\r\n              //curve: go.Link.Bezier,\r\n              toShortLength: 15,\r\n            },\r\n            //new go.Binding(\"curviness\", \"curviness\"),\r\n            $(\r\n              go.Shape, // the link shape\r\n              {\r\n                stroke: \"#979dac\",\r\n                strokeWidth: 2.5,\r\n              }\r\n            ),\r\n            $(\r\n              go.Shape, // the arrowhead\r\n              {\r\n                toArrow: \"kite\",\r\n                fill: \"#979dac\",\r\n                stroke: null,\r\n                scale: 2,\r\n              }\r\n            )\r\n          );\r\n\r\n          myDiagram.nodeTemplateMap.add(\r\n            \"RNN\",\r\n            $(\r\n              go.Node,\r\n              \"Auto\",\r\n              {\r\n                locationSpot: go.Spot.Center,\r\n              },\r\n              new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n                go.Point.stringify\r\n              ),\r\n              {\r\n                selectable: true,\r\n                selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n              },\r\n              $(go.Shape, \"RoundedRectangle\", {\r\n                fill: whitegrad,\r\n                stroke: \"#CF8BF9\",\r\n                strokeWidth: 4,\r\n              }),\r\n              $(\r\n                go.TextBlock,\r\n                \"RNN\\n(unavailable)\",\r\n                textStyle(),\r\n                {\r\n                  margin: 9,\r\n                  maxSize: new go.Size(200, NaN),\r\n                  wrap: go.TextBlock.WrapFit,\r\n                  editable: true,\r\n                  stroke: \"#560788\",\r\n                  font: smallfont,\r\n                },\r\n                new go.Binding(\"text\", \"text\").makeTwoWay()\r\n              )\r\n              // no ports, because no links are allowed to connect with a comment\r\n            )\r\n          );\r\n\r\n          myDiagram.nodeTemplateMap.add(\r\n            \"CNN\",\r\n            $(\r\n              go.Node,\r\n              \"Auto\",\r\n              {\r\n                locationSpot: go.Spot.Center,\r\n              },\r\n              new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n                go.Point.stringify\r\n              ),\r\n              {\r\n                selectable: true,\r\n                selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n              },\r\n              $(go.Shape, \"RoundedRectangle\", {\r\n                fill: whitegrad,\r\n                stroke: \"#CF8BF9\",\r\n                strokeWidth: 4,\r\n              }),\r\n              $(\r\n                go.TextBlock,\r\n                \"CNN\\n(unavailable)\",\r\n                textStyle(),\r\n                {\r\n                  margin: 9,\r\n                  maxSize: new go.Size(200, NaN),\r\n                  wrap: go.TextBlock.WrapFit,\r\n                  editable: true,\r\n                  stroke: \"#560788\",\r\n                  font: smallfont,\r\n                },\r\n                new go.Binding(\"text\", \"text\").makeTwoWay()\r\n              )\r\n              // no ports, because no links are allowed to connect with a comment\r\n            )\r\n          );\r\n\r\n          myDiagram.nodeTemplateMap.add(\r\n            \"LSTM\",\r\n            $(\r\n              go.Node,\r\n              \"Auto\",\r\n              {\r\n                locationSpot: go.Spot.Center,\r\n              },\r\n              new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n                go.Point.stringify\r\n              ),\r\n              {\r\n                selectable: true,\r\n                selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n              },\r\n              $(go.Shape, \"RoundedRectangle\", {\r\n                fill: whitegrad,\r\n                stroke: \"#CF8BF9\",\r\n                strokeWidth: 4,\r\n              }),\r\n              $(\r\n                go.TextBlock,\r\n                \"LSTM\\n(unavailable)\",\r\n                textStyle(),\r\n                {\r\n                  margin: 9,\r\n                  maxSize: new go.Size(200, NaN),\r\n                  wrap: go.TextBlock.WrapFit,\r\n                  editable: true,\r\n                  stroke: \"#560788\",\r\n                  font: smallfont,\r\n                },\r\n                new go.Binding(\"text\", \"text\").makeTwoWay()\r\n              )\r\n              // no ports, because no links are allowed to connect with a comment\r\n            )\r\n          );\r\n\r\n          myDiagram.nodeTemplateMap.add(\r\n            \"Softmax\",\r\n            $(\r\n              go.Node,\r\n              \"Auto\",\r\n              {\r\n                locationSpot: go.Spot.Center,\r\n              },\r\n              new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n                go.Point.stringify\r\n              ),\r\n              {\r\n                selectable: true,\r\n                selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n              },\r\n              $(go.Shape, \"RoundedRectangle\", {\r\n                fill: whitegrad,\r\n                stroke: \"#CF8BF9\",\r\n                strokeWidth: 4,\r\n              }),\r\n              $(\r\n                go.TextBlock,\r\n                \"Softmax\\n(unavailable)\",\r\n                textStyle(),\r\n                {\r\n                  margin: 9,\r\n                  maxSize: new go.Size(200, NaN),\r\n                  wrap: go.TextBlock.WrapFit,\r\n                  editable: true,\r\n                  stroke: \"#560788\",\r\n                  font: smallfont,\r\n                },\r\n                new go.Binding(\"text\", \"text\").makeTwoWay()\r\n              )\r\n              // no ports, because no links are allowed to connect with a comment\r\n            )\r\n          );\r\n\r\n          myDiagram.nodeTemplateMap.add(\r\n            \"Maximum Polling\",\r\n            $(\r\n              go.Node,\r\n              \"Auto\",\r\n              {\r\n                locationSpot: go.Spot.Center,\r\n              },\r\n              new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n                go.Point.stringify\r\n              ),\r\n              {\r\n                selectable: true,\r\n                selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n              },\r\n              $(go.Shape, \"RoundedRectangle\", {\r\n                fill: whitegrad,\r\n                stroke: \"#CF8BF9\",\r\n                strokeWidth: 4,\r\n              }),\r\n              $(\r\n                go.TextBlock,\r\n                \"Maximum\\nPolling\\n(unavailable)\",\r\n                textStyle(),\r\n                {\r\n                  margin: 9,\r\n                  maxSize: new go.Size(200, NaN),\r\n                  wrap: go.TextBlock.WrapFit,\r\n                  editable: true,\r\n                  stroke: \"#560788\",\r\n                  font: smallfont,\r\n                },\r\n                new go.Binding(\"text\", \"text\").makeTwoWay()\r\n              )\r\n              // no ports, because no links are allowed to connect with a comment\r\n            )\r\n          );\r\n\r\n          var palette = $(\r\n            go.Palette,\r\n            \"myPaletteDiv\", // create a new Palette in the HTML DIV element\r\n            {\r\n              // share the template map with the Palette\r\n              nodeTemplateMap: myDiagram.nodeTemplateMap,\r\n              autoScale: go.Diagram.Uniform, // everything always fits in viewport\r\n            }\r\n          );\r\n\r\n          palette.model.nodeDataArray = [\r\n            {\r\n              category: \"Data\",\r\n            },\r\n            {\r\n              category: \"ReLU\",\r\n            },\r\n            {\r\n              category: \"FC\",\r\n              reasonsList: [{}],\r\n            },\r\n            {\r\n              category: \"End\",\r\n            },\r\n            {\r\n              category: \"CNN\",\r\n            },\r\n            {\r\n              category: \"RNN\",\r\n            },\r\n            {\r\n              category: \"LSTM\",\r\n            },\r\n            {\r\n              category: \"Softmax\",\r\n            },\r\n            {\r\n              category: \"Maximum Polling\",\r\n            },\r\n          ];\r\n\r\n          // read in the JSON-format data from the \"mySavedModel\" element\r\n          load();\r\n          layout();\r\n        }\r\n\r\n        function layout() {\r\n          myDiagram.layoutDiagram(true);\r\n        }\r\n        // Show the diagram's model in JSON format\r\n        function save() {\r\n          document.getElementById(\"mySavedModel\").value =\r\n            myDiagram.model.toJson();\r\n          myDiagram.isModified = false;\r\n        }\r\n\r\n        function load() {\r\n          myDiagram.model = go.Model.fromJson(\r\n            document.getElementById(\"mySavedModel\").value\r\n          );\r\n        }\r\n        window.addEventListener(\"DOMContentLoaded\", init);\r\n      </script>\r\n\r\n      <div id=\"sample\">\r\n        <div\r\n          style=\"\r\n            width: 100%;\r\n            margin-bottom: 10px;\r\n            display: flex;\r\n            justify-content: space-between;\r\n          \"\r\n        >\r\n          <div\r\n            id=\"myPaletteDiv\"\r\n            style=\"\r\n              width: 150px;\r\n              margin-right: 10px;\r\n              background-color: whitesmoke;\r\n              border: solid 4px #82929b;\r\n            \"\r\n          ></div>\r\n          <div\r\n            id=\"myDiagramDiv\"\r\n            style=\"\r\n              flex-grow: 3;\r\n              margin-right: 10px;\r\n              height: 600px;\r\n              background-color: whitesmoke;\r\n              border: solid 4px #82929b;\r\n            \"\r\n          ></div>\r\n          <div\r\n            id=\"myDiagramDiv\"\r\n            style=\"\r\n              flex-grow: 2;\r\n              height: 600px;\r\n              background-color: whitesmoke;\r\n              border: solid 4px #82929b;\r\n            \"\r\n          ></div>\r\n        </div>\r\n\r\n        <button id=\"SaveButton\" onclick=\"save()\">Save</button>\r\n        <button onclick=\"load()\">Load</button>\r\n        <button onclick=\"layout()\">Layout</button>\r\n        <br />\r\n        <textarea id=\"mySavedModel\" style=\"width: 100%; height: 300px\">\r\n{ \"class\": \"GraphLinksModel\", \r\n\"nodeDataArray\": [ {\"category\":\"Data\", \"key\":-1, \"loc\":\"-70.5 -90.19999980926514\"} ], \r\n\"linkDataArray\": []}\r\n  </textarea\r\n        >\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"canvasView\",\r\n  data() {\r\n    return {};\r\n  },\r\n\r\n  methods: {},\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n</style>"]},"metadata":{},"sourceType":"module"}