{"ast":null,"code":"import * as go from \"/public/go.js\"; // import go from \"gojs\";\n\nexport default {\n  name: \"CanvasView\",\n  mounted: function mounted() {\n    function init() {\n      var $ = go.GraphObject.make; // for conciseness in defining templates\n\n      var yellowgrad = $(go.Brush, \"Linear\", {\n        0: \"#bde0fe\",\n        1: \"#bde0fe\"\n      });\n      var greengrad = $(go.Brush, \"Linear\", {\n        0: \"#fdffb6\",\n        1: \"#fdffb6\"\n      });\n      var bluegrad = $(go.Brush, \"Linear\", {\n        0: \"#caffbf\",\n        1: \"#caffbf\"\n      });\n      var redgrad = $(go.Brush, \"Linear\", {\n        0: \"#ffadad\",\n        1: \"#ffadad\"\n      });\n      var whitegrad = $(go.Brush, \"Linear\", {\n        0: \"#E7C5FC\",\n        1: \"#E7C5FC\"\n      });\n      var bigfont = \"bold 15pt Helvetica, Arial, sans-serif\";\n      var smallfont = \"bold 13pt Helvetica, Arial, sans-serif\"; // Common text styling\n\n      function textStyle() {\n        return {\n          margin: 6,\n          wrap: go.TextBlock.WrapFit,\n          textAlign: \"center\",\n          editable: true,\n          font: bigfont\n        };\n      }\n\n      myDiagram = $(go.Diagram, \"myDiagramDiv\", {\n        // // have mouse wheel events zoom in and out instead of scroll up and down\n        //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\n        initialAutoScale: go.Diagram.Uniform,\n        \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\n        layout: $(go.LayeredDigraphLayout, {\n          isInitial: false,\n          isOngoing: false,\n          layerSpacing: 50\n        }),\n        \"undoManager.isEnabled\": true\n      });\n      var nodeSelectionAdornmentTemplate = $(go.Adornment, \"Auto\", $(go.Shape, {\n        fill: null,\n        stroke: \"#979dac\",\n        strokeWidth: 2,\n        strokeDashArray: [4, 2]\n      }), $(go.Placeholder)); // define the Node template\n\n      myDiagram.nodeTemplate = $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, // define the node's outer shape, which will surround the TextBlock\n      $(go.Shape, \"Rectangle\", {\n        fill: yellowgrad,\n        stroke: null,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true,\n        cursor: \"pointer\",\n        toEndSegmentLength: 50,\n        fromEndSegmentLength: 50\n      }), $(go.TextBlock, \"ReLU\", {\n        margin: 6,\n        font: bigfont,\n        editable: true,\n        minSize: new go.Size(40, NaN)\n      }, new go.Binding(\"text\", \"text\").makeTwoWay())); // Data\n\n      myDiagram.nodeTemplateMap.add(\"Data\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center,\n        margin: new go.Margin(0, 0, 0, 0)\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"Circle\", {\n        fill: bluegrad,\n        portId: \"\",\n        fromLinkable: true,\n        cursor: \"pointer\",\n        //fromEndSegmentLength: 40,\n        stroke: \"#74c69d\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"Data\", textStyle(), {\n        stroke: \"#2d6a4f\",\n        minSize: new go.Size(40, NaN)\n      }, new go.Binding(\"text\", \"text\").makeTwoWay())));\n      myDiagram.nodeTemplateMap.add(\"End\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"Circle\", {\n        fill: redgrad,\n        portId: \"\",\n        toLinkable: true,\n        cursor: \"pointer\",\n        fromEndSegmentLength: 40,\n        stroke: \"#df7373\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"End\", textStyle(), {\n        stroke: \"#ad2e24\",\n        minSize: new go.Size(40, NaN)\n      }, new go.Binding(\"text\", \"text\").makeTwoWay())));\n      myDiagram.nodeTemplateMap.add(\"ReLU\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"Ellipse\", {\n        fill: greengrad,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true,\n        cursor: \"pointer\",\n        fromEndSegmentLength: 40,\n        stroke: \"#ffd100\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"ReLU\", textStyle(), {\n        stroke: \"#e2711d\",\n        // locationSpot: go.Spot.Center,\n        //margin: new go.Margin(10, 0, 0, 0),\n        minSize: new go.Size(60, NaN)\n      }, new go.Binding(\"text\", \"text\").makeTwoWay())));\n      var reasonTemplate = $(go.Panel, $(go.Panel, \"Table\", {\n        maxSize: new go.Size(200, 999),\n        margin: new go.Margin(0, 3, 10, 3),\n        defaultAlignment: go.Spot.Center\n      }, $(go.RowColumnDefinition, {\n        column: 2,\n        width: 2\n      }), $(go.TextBlock, \"input = \", {\n        margin: new go.Margin(4, 0, 0, 0),\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        //stroke: \"whitesmoke\",\n        editable: true,\n        font: smallfont,\n        row: 2,\n        column: 0,\n        stroke: \"#3e5c76\"\n      }, new go.Binding(\"text\", \"text0\").makeTwoWay()), $(go.TextBlock, \"value\", {\n        margin: new go.Margin(4, 0, 0, 0),\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        //stroke: \"whitesmoke\",\n        editable: true,\n        stroke: \"#3e5c76\",\n        font: smallfont,\n        row: 2,\n        column: 1\n      }, new go.Binding(\"text\", \"text1\").makeTwoWay()), $(go.TextBlock, \"output = \", {\n        margin: new go.Margin(4, 0, 0, 0),\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        //stroke: \"whitesmoke\",\n        editable: true,\n        font: smallfont,\n        stroke: \"#3e5c76\",\n        row: 3,\n        column: 0\n      }, new go.Binding(\"text\", \"text2\").makeTwoWay()), $(go.TextBlock, \"value\", {\n        margin: new go.Margin(4, 0, 0, 9),\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        //stroke: \"whitesmoke\",\n        editable: true,\n        font: smallfont,\n        stroke: \"#3e5c76\",\n        row: 3,\n        column: 1\n      }, new go.Binding(\"text\", \"text3\").makeTwoWay())) // end Table Panel\n      );\n      myDiagram.nodeTemplateMap.add(\"FC\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"RoundedRectangle\", {\n        fill: yellowgrad,\n        stroke: \"#4ea8de\",\n        strokeWidth: 4,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true,\n        cursor: \"pointer\",\n        toEndSegmentLength: 50,\n        fromEndSegmentLength: 40\n      }), $(go.Panel, \"Vertical\", {\n        defaultAlignment: go.Spot.Center\n      }, $(go.TextBlock, \"FC\", textStyle(), {\n        stroke: \"#3e5c76\",\n        margin: new go.Margin(8, 0, 0, 0),\n        minSize: new go.Size(100, NaN) //maxSize: new go.Size(200, NaN)\n\n      }, new go.Binding(\"text\", \"text\").makeTwoWay()), $(go.Panel, \"Vertical\", {\n        defaultAlignment: go.Spot.TopLeft,\n        itemTemplate: reasonTemplate\n      }, new go.Binding(\"itemArray\", \"reasonsList\").makeTwoWay()))));\n      var linkSelectionAdornmentTemplate = $(go.Adornment, \"Link\", $(go.Shape, // isPanelMain declares that this Shape shares the Link.geometry\n      {\n        isPanelMain: true,\n        fill: null,\n        stroke: \"deepskyblue\",\n        strokeWidth: 2.5\n      }) // use selection object's strokeWidth\n      ); // replace the default Link template in the linkTemplateMap\n\n      myDiagram.linkTemplate = $(go.Link, // the whole link panel\n      {\n        selectable: true,\n        selectionAdornmentTemplate: linkSelectionAdornmentTemplate\n      }, new go.Binding(\"points\").makeTwoWay(), {\n        //curve: go.Link.Bezier,\n        toShortLength: 15\n      }, //new go.Binding(\"curviness\", \"curviness\"),\n      $(go.Shape, // the link shape\n      {\n        stroke: \"#979dac\",\n        strokeWidth: 2.5\n      }), $(go.Shape, // the arrowhead\n      {\n        toArrow: \"kite\",\n        fill: \"#979dac\",\n        stroke: null,\n        scale: 2\n      }));\n      myDiagram.nodeTemplateMap.add(\"RNN\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"RoundedRectangle\", {\n        fill: whitegrad,\n        stroke: \"#CF8BF9\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"RNN\\n(unavailable)\", textStyle(), {\n        margin: 9,\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        editable: true,\n        stroke: \"#560788\",\n        font: smallfont\n      }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n      ));\n      myDiagram.nodeTemplateMap.add(\"CNN\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"RoundedRectangle\", {\n        fill: whitegrad,\n        stroke: \"#CF8BF9\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"CNN\\n(unavailable)\", textStyle(), {\n        margin: 9,\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        editable: true,\n        stroke: \"#560788\",\n        font: smallfont\n      }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n      ));\n      myDiagram.nodeTemplateMap.add(\"LSTM\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"RoundedRectangle\", {\n        fill: whitegrad,\n        stroke: \"#CF8BF9\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"LSTM\\n(unavailable)\", textStyle(), {\n        margin: 9,\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        editable: true,\n        stroke: \"#560788\",\n        font: smallfont\n      }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n      ));\n      myDiagram.nodeTemplateMap.add(\"Softmax\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"RoundedRectangle\", {\n        fill: whitegrad,\n        stroke: \"#CF8BF9\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"Softmax\\n(unavailable)\", textStyle(), {\n        margin: 9,\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        editable: true,\n        stroke: \"#560788\",\n        font: smallfont\n      }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n      ));\n      myDiagram.nodeTemplateMap.add(\"Maximum Polling\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"RoundedRectangle\", {\n        fill: whitegrad,\n        stroke: \"#CF8BF9\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"Maximum\\nPolling\\n(unavailable)\", textStyle(), {\n        margin: 9,\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        editable: true,\n        stroke: \"#560788\",\n        font: smallfont\n      }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n      ));\n      var palette = $(go.Palette, \"myPaletteDiv\", // create a new Palette in the HTML DIV element\n      {\n        // share the template map with the Palette\n        nodeTemplateMap: myDiagram.nodeTemplateMap,\n        autoScale: go.Diagram.Uniform // everything always fits in viewport\n\n      });\n      palette.model.nodeDataArray = [{\n        category: \"Data\"\n      }, {\n        category: \"ReLU\"\n      }, {\n        category: \"FC\",\n        reasonsList: [{}]\n      }, {\n        category: \"End\"\n      }, {\n        category: \"CNN\"\n      }, {\n        category: \"RNN\"\n      }, {\n        category: \"LSTM\"\n      }, {\n        category: \"Softmax\"\n      }, {\n        category: \"Maximum Polling\"\n      }]; // read in the JSON-format data from the \"mySavedModel\" element\n\n      load();\n      layout();\n    }\n\n    function layout() {\n      myDiagram.layoutDiagram(true);\n    } // Show the diagram's model in JSON format\n\n\n    function save() {\n      document.getElementById(\"mySavedModel\").value = myDiagram.model.toJson();\n      myDiagram.isModified = false;\n    }\n\n    function load() {\n      myDiagram.model = go.Model.fromJson(document.getElementById(\"mySavedModel\").value);\n    }\n\n    window.addEventListener('DOMContentLoaded', init);\n  } // methods:{\n  //       save() {\n  //     console.log(\"save\");\n  //     // myDiagram.layoutDiagram(true);\n  //   },\n  //       load() {\n  //     console.log(\"load\");\n  //     // myDiagram.layoutDiagram(true);\n  //   },\n  //   layout() {\n  //     // console.log(\"layout\");\n  //     // myDiagram.layoutDiagram(true);\n  //   },\n  // }\n\n};","map":{"version":3,"mappings":"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","names":["go","name","mounted","init","$","GraphObject","make","yellowgrad","Brush","greengrad","bluegrad","redgrad","whitegrad","bigfont","smallfont","textStyle","margin","wrap","TextBlock","WrapFit","textAlign","editable","font","myDiagram","Diagram","initialAutoScale","Uniform","LinkingTool","ForwardsOnly","layout","LayeredDigraphLayout","isInitial","isOngoing","layerSpacing","nodeSelectionAdornmentTemplate","Adornment","Shape","fill","stroke","strokeWidth","strokeDashArray","Placeholder","nodeTemplate","Node","locationSpot","Spot","Center","Binding","Point","parse","makeTwoWay","stringify","selectable","selectionAdornmentTemplate","portId","fromLinkable","toLinkable","cursor","toEndSegmentLength","fromEndSegmentLength","minSize","Size","NaN","nodeTemplateMap","add","Margin","reasonTemplate","Panel","maxSize","defaultAlignment","RowColumnDefinition","column","width","row","TopLeft","itemTemplate","linkSelectionAdornmentTemplate","isPanelMain","linkTemplate","Link","toShortLength","toArrow","scale","palette","Palette","autoScale","model","nodeDataArray","category","reasonsList","load","layoutDiagram","save","document","getElementById","value","toJson","isModified","Model","fromJson","window","addEventListener"],"sourceRoot":"","sources":["C:\\qp_box\\_CodeField\\Neural-Lego\\frontend\\src\\views\\CanvasView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div id=\"allSampleContent\" class=\"p-4 w-full\">\r\n        <div id=\"sample\">\r\n          <div\r\n            style=\"\r\n              width: 100%;\r\n              margin-bottom: 10px;\r\n              display: flex;\r\n              justify-content: space-between;\r\n            \"\r\n          >\r\n            <div\r\n              id=\"myPaletteDiv\"\r\n              style=\"\r\n                width: 150px;\r\n                margin-right: 10px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n            <div\r\n              id=\"myDiagramDiv\"\r\n              style=\"\r\n                flex-grow: 3;\r\n                margin-right: 10px;\r\n                height: 600px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n            <div\r\n              id=\"myDiagramDiv\"\r\n              style=\"\r\n                flex-grow: 2;\r\n                height: 600px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n          </div>\r\n\r\n          <button type=\"submit\" @click=\"save()\">Save</button>\r\n          <button type=\"submit\" @click=\"load()\">Load</button>\r\n          <button type=\"submit\" @click=\"layout()\">Layout</button>\r\n          <br>\r\n          <textarea id=\"mySavedModel\" style=\"width: 100%; height: 300px\">\r\n{ \"class\": \"GraphLinksModel\", \r\n\"nodeDataArray\": [ {\"category\":\"Data\", \"key\":-1, \"loc\":\"-70.5 -90.19999980926514\"} ], \r\n\"linkDataArray\": []}\r\n  </textarea>\r\n        </div>\r\n      </div>\r\n    </div>\r\n</template>\r\n\r\n\r\n\r\n<script id='code'>\r\nimport * as go from \"/public/go.js\";\r\n// import go from \"gojs\";\r\n\r\nexport default {\r\n  name: \"CanvasView\",\r\n  mounted() {\r\n                function init() {\r\n                const $ = go.GraphObject.make; // for conciseness in defining templates\r\n\r\n                var yellowgrad = $(go.Brush, \"Linear\", {\r\n                    0: \"#bde0fe\",\r\n                    1: \"#bde0fe\"\r\n                });\r\n                var greengrad = $(go.Brush, \"Linear\", {\r\n                    0: \"#fdffb6\",\r\n                    1: \"#fdffb6\"\r\n                });\r\n                var bluegrad = $(go.Brush, \"Linear\", {\r\n                    0: \"#caffbf\",\r\n                    1: \"#caffbf\",\r\n                });\r\n                var redgrad = $(go.Brush, \"Linear\", {\r\n                    0: \"#ffadad\",\r\n                    1: \"#ffadad\"\r\n                });\r\n                var whitegrad = $(go.Brush, \"Linear\", {\r\n                    0: \"#E7C5FC\",\r\n                    1: \"#E7C5FC\"\r\n                });\r\n\r\n                var bigfont = \"bold 15pt Helvetica, Arial, sans-serif\";\r\n                var smallfont = \"bold 13pt Helvetica, Arial, sans-serif\";\r\n\r\n                // Common text styling\r\n                function textStyle() {\r\n                    return {\r\n                        margin: 6,\r\n                        wrap: go.TextBlock.WrapFit,\r\n                        textAlign: \"center\",\r\n                        editable: true,\r\n                        font: bigfont\r\n                    }\r\n                }\r\n\r\n                myDiagram = $(go.Diagram, \"myDiagramDiv\", {\r\n                    // // have mouse wheel events zoom in and out instead of scroll up and down\r\n                    //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\r\n                    initialAutoScale: go.Diagram.Uniform,\r\n                    \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\r\n                    layout: $(go.LayeredDigraphLayout, {\r\n                        isInitial: false,\r\n                        isOngoing: false,\r\n                        layerSpacing: 50\r\n                    }),\r\n                    \"undoManager.isEnabled\": true\r\n                });\r\n\r\n                var nodeSelectionAdornmentTemplate =\r\n                    $(go.Adornment, \"Auto\",\r\n                        $(go.Shape, {\r\n                            fill: null,\r\n                            stroke: \"#979dac\",\r\n                            strokeWidth: 2,\r\n                            strokeDashArray: [4, 2]\r\n                        }),\r\n                        $(go.Placeholder)\r\n                    );\r\n\r\n                // define the Node template\r\n                myDiagram.nodeTemplate = $(go.Node, \"Auto\", {\r\n                        locationSpot: go.Spot.Center\r\n                    },\r\n                    new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                        selectable: true,\r\n                        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                    },\r\n                    // define the node's outer shape, which will surround the TextBlock\r\n                    $(go.Shape, \"Rectangle\", {\r\n                        fill: yellowgrad,\r\n                        stroke: null,\r\n                        portId: \"\",\r\n                        fromLinkable: true,\r\n                        toLinkable: true,\r\n                        cursor: \"pointer\",\r\n                        toEndSegmentLength: 50,\r\n                        fromEndSegmentLength: 50\r\n                    }),\r\n                    $(go.TextBlock, \"ReLU\", {\r\n                            margin: 6,\r\n                            font: bigfont,\r\n                            editable: true,\r\n                            minSize: new go.Size(40, NaN)\r\n                        },\r\n                        new go.Binding(\"text\", \"text\").makeTwoWay()));\r\n\r\n                // Data\r\n                myDiagram.nodeTemplateMap.add(\"Data\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center,\r\n                            margin: new go.Margin(0, 0, 0, 0),\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"Circle\", {\r\n                            fill: bluegrad,\r\n                            portId: \"\",\r\n                            fromLinkable: true,\r\n                            cursor: \"pointer\",\r\n                            //fromEndSegmentLength: 40,\r\n                            stroke: \"#74c69d\",\r\n\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"Data\", textStyle(), {\r\n                                stroke: \"#2d6a4f\",\r\n                                minSize: new go.Size(40, NaN)\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay(),\r\n                        )\r\n                    ));\r\n\r\n                myDiagram.nodeTemplateMap.add(\"End\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"Circle\", {\r\n                            fill: redgrad,\r\n                            portId: \"\",\r\n                            toLinkable: true,\r\n                            cursor: \"pointer\",\r\n                            fromEndSegmentLength: 40,\r\n                            stroke: \"#df7373\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"End\", textStyle(), {\r\n                                stroke: \"#ad2e24\",\r\n                                minSize: new go.Size(40, NaN)\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay(),\r\n                        )\r\n                    ));\r\n\r\n                myDiagram.nodeTemplateMap.add(\"ReLU\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"Ellipse\", {\r\n                            fill: greengrad,\r\n                            portId: \"\",\r\n                            fromLinkable: true,\r\n                            toLinkable: true,\r\n                            cursor: \"pointer\",\r\n                            fromEndSegmentLength: 40,\r\n                            stroke: \"#ffd100\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"ReLU\", textStyle(), {\r\n                                stroke: \"#e2711d\",\r\n                                // locationSpot: go.Spot.Center,\r\n                                //margin: new go.Margin(10, 0, 0, 0),\r\n                                minSize: new go.Size(60, NaN)\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay(),\r\n                        )\r\n                    ));\r\n\r\n                var reasonTemplate = $(go.Panel,\r\n                    $(go.Panel, \"Table\", {\r\n                            maxSize: new go.Size(200, 999),\r\n                            margin: new go.Margin(0, 3, 10, 3),\r\n                            defaultAlignment: go.Spot.Center\r\n                        },\r\n                        $(go.RowColumnDefinition, {\r\n                            column: 2,\r\n                            width: 2\r\n                        }),\r\n                        $(go.TextBlock, \"input = \", {\r\n                                margin: new go.Margin(4, 0, 0, 0),\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                //stroke: \"whitesmoke\",\r\n                                editable: true,\r\n                                font: smallfont,\r\n                                row: 2,\r\n                                column: 0,\r\n                                stroke: \"#3e5c76\"\r\n                            },\r\n                            new go.Binding(\"text\", \"text0\").makeTwoWay()),\r\n\r\n                        $(go.TextBlock, \"value\", {\r\n                                margin: new go.Margin(4, 0, 0, 0),\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                //stroke: \"whitesmoke\",\r\n                                editable: true,\r\n                                stroke: \"#3e5c76\",\r\n                                font: smallfont,\r\n                                row: 2,\r\n                                column: 1\r\n                            },\r\n                            new go.Binding(\"text\", \"text1\").makeTwoWay()),\r\n\r\n                        $(go.TextBlock, \"output = \", {\r\n                                margin: new go.Margin(4, 0, 0, 0),\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                //stroke: \"whitesmoke\",\r\n                                editable: true,\r\n                                font: smallfont,\r\n                                stroke: \"#3e5c76\",\r\n                                row: 3,\r\n                                column: 0\r\n                            },\r\n                            new go.Binding(\"text\", \"text2\").makeTwoWay()),\r\n\r\n                        $(go.TextBlock, \"value\", {\r\n                                margin: new go.Margin(4, 0, 0, 9),\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                //stroke: \"whitesmoke\",\r\n                                editable: true,\r\n                                font: smallfont,\r\n                                stroke: \"#3e5c76\",\r\n                                row: 3,\r\n                                column: 1\r\n                            },\r\n                            new go.Binding(\"text\", \"text3\").makeTwoWay()),\r\n\r\n\r\n                    ) // end Table Panel\r\n                );\r\n\r\n\r\n                myDiagram.nodeTemplateMap.add(\"FC\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"RoundedRectangle\", {\r\n                            fill: yellowgrad,\r\n                            stroke: \"#4ea8de\",\r\n                            strokeWidth: 4,\r\n                            portId: \"\",\r\n                            fromLinkable: true,\r\n                            toLinkable: true,\r\n                            cursor: \"pointer\",\r\n                            toEndSegmentLength: 50,\r\n                            fromEndSegmentLength: 40\r\n                        }),\r\n                        $(go.Panel, \"Vertical\", {\r\n                                defaultAlignment: go.Spot.Center\r\n                            },\r\n\r\n                            $(go.TextBlock, \"FC\", textStyle(), {\r\n                                    stroke: \"#3e5c76\",\r\n                                    margin: new go.Margin(8, 0, 0, 0),\r\n                                    minSize: new go.Size(100, NaN)\r\n                                        //maxSize: new go.Size(200, NaN)\r\n                                },\r\n                                new go.Binding(\"text\", \"text\").makeTwoWay()),\r\n\r\n                            $(go.Panel, \"Vertical\", {\r\n                                    defaultAlignment: go.Spot.TopLeft,\r\n                                    itemTemplate: reasonTemplate\r\n                                },\r\n                                new go.Binding(\"itemArray\", \"reasonsList\").makeTwoWay()\r\n                            )\r\n                        )\r\n                    ));\r\n\r\n                var linkSelectionAdornmentTemplate =\r\n                    $(go.Adornment, \"Link\",\r\n                        $(go.Shape,\r\n                            // isPanelMain declares that this Shape shares the Link.geometry\r\n                            {\r\n                                isPanelMain: true,\r\n                                fill: null,\r\n                                stroke: \"deepskyblue\",\r\n                                strokeWidth: 2.5\r\n                            }) // use selection object's strokeWidth\r\n                    );\r\n                // replace the default Link template in the linkTemplateMap\r\n                myDiagram.linkTemplate =\r\n                    $(go.Link, // the whole link panel\r\n                        {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: linkSelectionAdornmentTemplate\r\n                        },\r\n                        new go.Binding(\"points\").makeTwoWay(), {\r\n                            //curve: go.Link.Bezier,\r\n                            toShortLength: 15\r\n                        },\r\n                        //new go.Binding(\"curviness\", \"curviness\"),\r\n                        $(go.Shape, // the link shape\r\n                            {\r\n                                stroke: \"#979dac\",\r\n                                strokeWidth: 2.5\r\n                            }),\r\n                        $(go.Shape, // the arrowhead\r\n                            {\r\n                                toArrow: \"kite\",\r\n                                fill: \"#979dac\",\r\n                                stroke: null,\r\n                                scale: 2\r\n                            })\r\n                    );\r\n\r\n                myDiagram.nodeTemplateMap.add(\"RNN\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"RoundedRectangle\", {\r\n                            fill: whitegrad,\r\n                            stroke: \"#CF8BF9\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"RNN\\n(unavailable)\", textStyle(), {\r\n                                margin: 9,\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                editable: true,\r\n                                stroke: \"#560788\",\r\n                                font: smallfont\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay())\r\n                        // no ports, because no links are allowed to connect with a comment\r\n                    ));\r\n\r\n                myDiagram.nodeTemplateMap.add(\"CNN\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"RoundedRectangle\", {\r\n                            fill: whitegrad,\r\n                            stroke: \"#CF8BF9\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"CNN\\n(unavailable)\", textStyle(), {\r\n                                margin: 9,\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                editable: true,\r\n                                stroke: \"#560788\",\r\n                                font: smallfont\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay())\r\n                        // no ports, because no links are allowed to connect with a comment\r\n                    ));\r\n\r\n                myDiagram.nodeTemplateMap.add(\"LSTM\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"RoundedRectangle\", {\r\n                            fill: whitegrad,\r\n                            stroke: \"#CF8BF9\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"LSTM\\n(unavailable)\", textStyle(), {\r\n                                margin: 9,\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                editable: true,\r\n                                stroke: \"#560788\",\r\n                                font: smallfont\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay())\r\n                        // no ports, because no links are allowed to connect with a comment\r\n                    ));\r\n\r\n                myDiagram.nodeTemplateMap.add(\"Softmax\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"RoundedRectangle\", {\r\n                            fill: whitegrad,\r\n                            stroke: \"#CF8BF9\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"Softmax\\n(unavailable)\", textStyle(), {\r\n                                margin: 9,\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                editable: true,\r\n                                stroke: \"#560788\",\r\n                                font: smallfont\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay())\r\n                        // no ports, because no links are allowed to connect with a comment\r\n                    ));\r\n\r\n                myDiagram.nodeTemplateMap.add(\"Maximum Polling\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"RoundedRectangle\", {\r\n                            fill: whitegrad,\r\n                            stroke: \"#CF8BF9\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"Maximum\\nPolling\\n(unavailable)\", textStyle(), {\r\n                                margin: 9,\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                editable: true,\r\n                                stroke: \"#560788\",\r\n                                font: smallfont\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay())\r\n                        // no ports, because no links are allowed to connect with a comment\r\n                    ));\r\n\r\n                var palette = $(go.Palette, \"myPaletteDiv\", // create a new Palette in the HTML DIV element\r\n                    {\r\n                        // share the template map with the Palette\r\n                        nodeTemplateMap: myDiagram.nodeTemplateMap,\r\n                        autoScale: go.Diagram.Uniform // everything always fits in viewport\r\n                    });\r\n\r\n                palette.model.nodeDataArray = [{\r\n                    category: \"Data\",\r\n                }, {\r\n                    category: \"ReLU\"\r\n                }, {\r\n                    category: \"FC\",\r\n                    reasonsList: [{}]\r\n                }, {\r\n                    category: \"End\"\r\n                }, {\r\n                    category: \"CNN\"\r\n                }, {\r\n                    category: \"RNN\"\r\n                }, {\r\n                    category: \"LSTM\"\r\n                }, {\r\n                    category: \"Softmax\"\r\n                }, {\r\n                    category: \"Maximum Polling\"\r\n                }];\r\n\r\n                // read in the JSON-format data from the \"mySavedModel\" element\r\n                load();\r\n                layout();\r\n            }\r\n\r\n            function layout() {\r\n                myDiagram.layoutDiagram(true);\r\n            }\r\n            // Show the diagram's model in JSON format\r\n            function save() {\r\n                document.getElementById(\"mySavedModel\").value = myDiagram.model.toJson();\r\n                myDiagram.isModified = false;\r\n            }\r\n\r\n            function load() {\r\n                myDiagram.model = go.Model.fromJson(document.getElementById(\"mySavedModel\").value);\r\n            }\r\n            \r\n            window.addEventListener('DOMContentLoaded', init);\r\n  },\r\n\r\n  // methods:{\r\n  //       save() {\r\n  //     console.log(\"save\");\r\n  //     // myDiagram.layoutDiagram(true);\r\n  //   },\r\n  //       load() {\r\n  //     console.log(\"load\");\r\n  //     // myDiagram.layoutDiagram(true);\r\n  //   },\r\n  //   layout() {\r\n  //     // console.log(\"layout\");\r\n  //     // myDiagram.layoutDiagram(true);\r\n  //   },\r\n  // }\r\n};\r\n</script>\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n#myPaletteDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.015);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myDiagramDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.01);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myPaletteDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n#myDiagramDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n.button,\r\nbutton {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(31, 73, 99, var(--tw-bg-opacity));\r\n  border-radius: 0.25rem;\r\n  display: inline-block;\r\n  margin: 0.25rem;\r\n  font-size: 12pt;\r\n  font-family: Helvetica, Arial;\r\n  padding-top: 0.25rem;\r\n  padding-bottom: 0.25rem;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n}\r\n\r\n.button:hover,\r\nbutton:hover {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(98, 127, 145, var(--tw-bg-opacity));\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n  transition-property: background-color, border-color, color, fill, stroke;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n  transition-duration: 150ms;\r\n  transition-duration: 0.2s;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}