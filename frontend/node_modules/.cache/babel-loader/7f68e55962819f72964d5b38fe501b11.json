{"ast":null,"code":"// import go from \"/public/go.js\";\nimport go from \"gojs\";\nexport default {\n  name: \"CanvasView\",\n  mounted: function mounted() {\n    // let script = document.createElement(\"script\");\n    // script.type = \"text/javascript\";\n    // script.src = \"/go.js\";\n    // document.body.appendChild(script);\n    // var bigfont = \"bold 15pt Helvetica, Arial, sans-serif\";\n    // var smallfont = \"bold 13pt Helvetica, Arial, sans-serif\";\n    // myDiagram = $(go.Diagram, \"myDiagramDiv\", {\n    //   // // have mouse wheel events zoom in and out instead of scroll up and down\n    //   //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\n    //   initialAutoScale: go.Diagram.Uniform,\n    //   \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\n    //   layout: $(go.LayeredDigraphLayout, {\n    //     isInitial: false,\n    //     isOngoing: false,\n    //     layerSpacing: 50,\n    //   }),\n    //   \"undoManager.isEnabled\": true,\n    // });\n    // var nodeSelectionAdornmentTemplate = $(\n    //   go.Adornment,\n    //   \"Auto\",\n    //   $(go.Shape, {\n    //     fill: null,\n    //     stroke: \"#979dac\",\n    //     strokeWidth: 2,\n    //     strokeDashArray: [4, 2],\n    //   }),\n    //   $(go.Placeholder)\n    // );\n    //     // define the Node template\n    //     myDiagram.nodeTemplate = $(\n    //       go.Node,\n    //       \"Auto\",\n    //       {\n    //         locationSpot: go.Spot.Center,\n    //       },\n    //       new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n    //         go.Point.stringify\n    //       ),\n    //       {\n    //         selectable: true,\n    //         selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n    //       },\n    //       // define the node's outer shape, which will surround the TextBlock\n    //       $(go.Shape, \"Rectangle\", {\n    //         fill: yellowgrad,\n    //         stroke: null,\n    //         portId: \"\",\n    //         fromLinkable: true,\n    //         toLinkable: true,\n    //         cursor: \"pointer\",\n    //         toEndSegmentLength: 50,\n    //         fromEndSegmentLength: 50,\n    //       }),\n    //       $(\n    //         go.TextBlock,\n    //         \"ReLU\",\n    //         {\n    //           margin: 6,\n    //           font: bigfont,\n    //           editable: true,\n    //           minSize: new go.Size(40, NaN),\n    //         },\n    //         new go.Binding(\"text\", \"text\").makeTwoWay()\n    //       )\n    //     );\n    //     // Data\n    //     myDiagram.nodeTemplateMap.add(\n    //       \"Data\",\n    //       $(\n    //         go.Node,\n    //         \"Auto\",\n    //         {\n    //           locationSpot: go.Spot.Center,\n    //           margin: new go.Margin(0, 0, 0, 0),\n    //         },\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n    //           go.Point.stringify\n    //         ),\n    //         {\n    //           selectable: true,\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n    //         },\n    //         $(go.Shape, \"Circle\", {\n    //           fill: bluegrad,\n    //           portId: \"\",\n    //           fromLinkable: true,\n    //           cursor: \"pointer\",\n    //           //fromEndSegmentLength: 40,\n    //           stroke: \"#74c69d\",\n    //           strokeWidth: 4,\n    //         }),\n    //         $(\n    //           go.TextBlock,\n    //           \"Data\",\n    //           textStyle(),\n    //           {\n    //             stroke: \"#2d6a4f\",\n    //             minSize: new go.Size(40, NaN),\n    //           },\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\n    //         )\n    //       )\n    //     );\n    //     myDiagram.nodeTemplateMap.add(\n    //       \"End\",\n    //       $(\n    //         go.Node,\n    //         \"Auto\",\n    //         {\n    //           locationSpot: go.Spot.Center,\n    //         },\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n    //           go.Point.stringify\n    //         ),\n    //         {\n    //           selectable: true,\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n    //         },\n    //         $(go.Shape, \"Circle\", {\n    //           fill: redgrad,\n    //           portId: \"\",\n    //           toLinkable: true,\n    //           cursor: \"pointer\",\n    //           fromEndSegmentLength: 40,\n    //           stroke: \"#df7373\",\n    //           strokeWidth: 4,\n    //         }),\n    //         $(\n    //           go.TextBlock,\n    //           \"End\",\n    //           textStyle(),\n    //           {\n    //             stroke: \"#ad2e24\",\n    //             minSize: new go.Size(40, NaN),\n    //           },\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\n    //         )\n    //       )\n    //     );\n    //     myDiagram.nodeTemplateMap.add(\n    //       \"ReLU\",\n    //       $(\n    //         go.Node,\n    //         \"Auto\",\n    //         {\n    //           locationSpot: go.Spot.Center,\n    //         },\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n    //           go.Point.stringify\n    //         ),\n    //         {\n    //           selectable: true,\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n    //         },\n    //         $(go.Shape, \"Ellipse\", {\n    //           fill: greengrad,\n    //           portId: \"\",\n    //           fromLinkable: true,\n    //           toLinkable: true,\n    //           cursor: \"pointer\",\n    //           fromEndSegmentLength: 40,\n    //           stroke: \"#ffd100\",\n    //           strokeWidth: 4,\n    //         }),\n    //         $(\n    //           go.TextBlock,\n    //           \"ReLU\",\n    //           textStyle(),\n    //           {\n    //             stroke: \"#e2711d\",\n    //             // locationSpot: go.Spot.Center,\n    //             //margin: new go.Margin(10, 0, 0, 0),\n    //             minSize: new go.Size(60, NaN),\n    //           },\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\n    //         )\n    //       )\n    //     );\n    //     var reasonTemplate = $(\n    //       go.Panel,\n    //       $(\n    //         go.Panel,\n    //         \"Table\",\n    //         {\n    //           maxSize: new go.Size(200, 999),\n    //           margin: new go.Margin(0, 3, 10, 3),\n    //           defaultAlignment: go.Spot.Center,\n    //         },\n    //         $(go.RowColumnDefinition, {\n    //           column: 2,\n    //           width: 2,\n    //         }),\n    //         $(\n    //           go.TextBlock,\n    //           \"input = \",\n    //           {\n    //             margin: new go.Margin(4, 0, 0, 0),\n    //             maxSize: new go.Size(200, NaN),\n    //             wrap: go.TextBlock.WrapFit,\n    //             //stroke: \"whitesmoke\",\n    //             editable: true,\n    //             font: smallfont,\n    //             row: 2,\n    //             column: 0,\n    //             stroke: \"#3e5c76\",\n    //           },\n    //           new go.Binding(\"text\", \"text0\").makeTwoWay()\n    //         ),\n    //         $(\n    //           go.TextBlock,\n    //           \"value\",\n    //           {\n    //             margin: new go.Margin(4, 0, 0, 0),\n    //             maxSize: new go.Size(200, NaN),\n    //             wrap: go.TextBlock.WrapFit,\n    //             //stroke: \"whitesmoke\",\n    //             editable: true,\n    //             stroke: \"#3e5c76\",\n    //             font: smallfont,\n    //             row: 2,\n    //             column: 1,\n    //           },\n    //           new go.Binding(\"text\", \"text1\").makeTwoWay()\n    //         ),\n    //         $(\n    //           go.TextBlock,\n    //           \"output = \",\n    //           {\n    //             margin: new go.Margin(4, 0, 0, 0),\n    //             maxSize: new go.Size(200, NaN),\n    //             wrap: go.TextBlock.WrapFit,\n    //             //stroke: \"whitesmoke\",\n    //             editable: true,\n    //             font: smallfont,\n    //             stroke: \"#3e5c76\",\n    //             row: 3,\n    //             column: 0,\n    //           },\n    //           new go.Binding(\"text\", \"text2\").makeTwoWay()\n    //         ),\n    //         $(\n    //           go.TextBlock,\n    //           \"value\",\n    //           {\n    //             margin: new go.Margin(4, 0, 0, 9),\n    //             maxSize: new go.Size(200, NaN),\n    //             wrap: go.TextBlock.WrapFit,\n    //             //stroke: \"whitesmoke\",\n    //             editable: true,\n    //             font: smallfont,\n    //             stroke: \"#3e5c76\",\n    //             row: 3,\n    //             column: 1,\n    //           },\n    //           new go.Binding(\"text\", \"text3\").makeTwoWay()\n    //         )\n    //       ) // end Table Panel\n    //     );\n    //     myDiagram.nodeTemplateMap.add(\n    //       \"FC\",\n    //       $(\n    //         go.Node,\n    //         \"Auto\",\n    //         {\n    //           locationSpot: go.Spot.Center,\n    //         },\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n    //           go.Point.stringify\n    //         ),\n    //         {\n    //           selectable: true,\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n    //         },\n    //         $(go.Shape, \"RoundedRectangle\", {\n    //           fill: yellowgrad,\n    //           stroke: \"#4ea8de\",\n    //           strokeWidth: 4,\n    //           portId: \"\",\n    //           fromLinkable: true,\n    //           toLinkable: true,\n    //           cursor: \"pointer\",\n    //           toEndSegmentLength: 50,\n    //           fromEndSegmentLength: 40,\n    //         }),\n    //         $(\n    //           go.Panel,\n    //           \"Vertical\",\n    //           {\n    //             defaultAlignment: go.Spot.Center,\n    //           },\n    //           $(\n    //             go.TextBlock,\n    //             \"FC\",\n    //             textStyle(),\n    //             {\n    //               stroke: \"#3e5c76\",\n    //               margin: new go.Margin(8, 0, 0, 0),\n    //               minSize: new go.Size(100, NaN),\n    //               //maxSize: new go.Size(200, NaN)\n    //             },\n    //             new go.Binding(\"text\", \"text\").makeTwoWay()\n    //           ),\n    //           $(\n    //             go.Panel,\n    //             \"Vertical\",\n    //             {\n    //               defaultAlignment: go.Spot.TopLeft,\n    //               itemTemplate: reasonTemplate,\n    //             },\n    //             new go.Binding(\"itemArray\", \"reasonsList\").makeTwoWay()\n    //           )\n    //         )\n    //       )\n    //     );\n    //     var linkSelectionAdornmentTemplate = $(\n    //       go.Adornment,\n    //       \"Link\",\n    //       $(\n    //         go.Shape,\n    //         // isPanelMain declares that this Shape shares the Link.geometry\n    //         {\n    //           isPanelMain: true,\n    //           fill: null,\n    //           stroke: \"deepskyblue\",\n    //           strokeWidth: 2.5,\n    //         }\n    //       ) // use selection object's strokeWidth\n    //     );\n    //     // replace the default Link template in the linkTemplateMap\n    //     myDiagram.linkTemplate = $(\n    //       go.Link, // the whole link panel\n    //       {\n    //         selectable: true,\n    //         selectionAdornmentTemplate: linkSelectionAdornmentTemplate,\n    //       },\n    //       new go.Binding(\"points\").makeTwoWay(),\n    //       {\n    //         //curve: go.Link.Bezier,\n    //         toShortLength: 15,\n    //       },\n    //       //new go.Binding(\"curviness\", \"curviness\"),\n    //       $(\n    //         go.Shape, // the link shape\n    //         {\n    //           stroke: \"#979dac\",\n    //           strokeWidth: 2.5,\n    //         }\n    //       ),\n    //       $(\n    //         go.Shape, // the arrowhead\n    //         {\n    //           toArrow: \"kite\",\n    //           fill: \"#979dac\",\n    //           stroke: null,\n    //           scale: 2,\n    //         }\n    //       )\n    //     );\n    //     myDiagram.nodeTemplateMap.add(\n    //       \"RNN\",\n    //       $(\n    //         go.Node,\n    //         \"Auto\",\n    //         {\n    //           locationSpot: go.Spot.Center,\n    //         },\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n    //           go.Point.stringify\n    //         ),\n    //         {\n    //           selectable: true,\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n    //         },\n    //         $(go.Shape, \"RoundedRectangle\", {\n    //           fill: whitegrad,\n    //           stroke: \"#CF8BF9\",\n    //           strokeWidth: 4,\n    //         }),\n    //         $(\n    //           go.TextBlock,\n    //           \"RNN\\n(unavailable)\",\n    //           textStyle(),\n    //           {\n    //             margin: 9,\n    //             maxSize: new go.Size(200, NaN),\n    //             wrap: go.TextBlock.WrapFit,\n    //             editable: true,\n    //             stroke: \"#560788\",\n    //             font: smallfont,\n    //           },\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\n    //         )\n    //         // no ports, because no links are allowed to connect with a comment\n    //       )\n    //     );\n    //     myDiagram.nodeTemplateMap.add(\n    //       \"CNN\",\n    //       $(\n    //         go.Node,\n    //         \"Auto\",\n    //         {\n    //           locationSpot: go.Spot.Center,\n    //         },\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n    //           go.Point.stringify\n    //         ),\n    //         {\n    //           selectable: true,\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n    //         },\n    //         $(go.Shape, \"RoundedRectangle\", {\n    //           fill: whitegrad,\n    //           stroke: \"#CF8BF9\",\n    //           strokeWidth: 4,\n    //         }),\n    //         $(\n    //           go.TextBlock,\n    //           \"CNN\\n(unavailable)\",\n    //           textStyle(),\n    //           {\n    //             margin: 9,\n    //             maxSize: new go.Size(200, NaN),\n    //             wrap: go.TextBlock.WrapFit,\n    //             editable: true,\n    //             stroke: \"#560788\",\n    //             font: smallfont,\n    //           },\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\n    //         )\n    //         // no ports, because no links are allowed to connect with a comment\n    //       )\n    //     );\n    //     myDiagram.nodeTemplateMap.add(\n    //       \"LSTM\",\n    //       $(\n    //         go.Node,\n    //         \"Auto\",\n    //         {\n    //           locationSpot: go.Spot.Center,\n    //         },\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n    //           go.Point.stringify\n    //         ),\n    //         {\n    //           selectable: true,\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n    //         },\n    //         $(go.Shape, \"RoundedRectangle\", {\n    //           fill: whitegrad,\n    //           stroke: \"#CF8BF9\",\n    //           strokeWidth: 4,\n    //         }),\n    //         $(\n    //           go.TextBlock,\n    //           \"LSTM\\n(unavailable)\",\n    //           textStyle(),\n    //           {\n    //             margin: 9,\n    //             maxSize: new go.Size(200, NaN),\n    //             wrap: go.TextBlock.WrapFit,\n    //             editable: true,\n    //             stroke: \"#560788\",\n    //             font: smallfont,\n    //           },\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\n    //         )\n    //         // no ports, because no links are allowed to connect with a comment\n    //       )\n    //     );\n    //     myDiagram.nodeTemplateMap.add(\n    //       \"Softmax\",\n    //       $(\n    //         go.Node,\n    //         \"Auto\",\n    //         {\n    //           locationSpot: go.Spot.Center,\n    //         },\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n    //           go.Point.stringify\n    //         ),\n    //         {\n    //           selectable: true,\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n    //         },\n    //         $(go.Shape, \"RoundedRectangle\", {\n    //           fill: whitegrad,\n    //           stroke: \"#CF8BF9\",\n    //           strokeWidth: 4,\n    //         }),\n    //         $(\n    //           go.TextBlock,\n    //           \"Softmax\\n(unavailable)\",\n    //           textStyle(),\n    //           {\n    //             margin: 9,\n    //             maxSize: new go.Size(200, NaN),\n    //             wrap: go.TextBlock.WrapFit,\n    //             editable: true,\n    //             stroke: \"#560788\",\n    //             font: smallfont,\n    //           },\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\n    //         )\n    //         // no ports, because no links are allowed to connect with a comment\n    //       )\n    //     );\n    //     myDiagram.nodeTemplateMap.add(\n    //       \"Maximum Polling\",\n    //       $(\n    //         go.Node,\n    //         \"Auto\",\n    //         {\n    //           locationSpot: go.Spot.Center,\n    //         },\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n    //           go.Point.stringify\n    //         ),\n    //         {\n    //           selectable: true,\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n    //         },\n    //         $(go.Shape, \"RoundedRectangle\", {\n    //           fill: whitegrad,\n    //           stroke: \"#CF8BF9\",\n    //           strokeWidth: 4,\n    //         }),\n    //         $(\n    //           go.TextBlock,\n    //           \"Maximum\\nPolling\\n(unavailable)\",\n    //           textStyle(),\n    //           {\n    //             margin: 9,\n    //             maxSize: new go.Size(200, NaN),\n    //             wrap: go.TextBlock.WrapFit,\n    //             editable: true,\n    //             stroke: \"#560788\",\n    //             font: smallfont,\n    //           },\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\n    //         )\n    //         // no ports, because no links are allowed to connect with a comment\n    //       )\n    //     );\n    //     var palette = $(\n    //       go.Palette,\n    //       \"myPaletteDiv\", // create a new Palette in the HTML DIV element\n    //       {\n    //         // share the template map with the Palette\n    //         nodeTemplateMap: myDiagram.nodeTemplateMap,\n    //         autoScale: go.Diagram.Uniform, // everything always fits in viewport\n    //       }\n    //     );\n    //     palette.model.nodeDataArray = [\n    //       {\n    //         category: \"Data\",\n    //       },\n    //       {\n    //         category: \"ReLU\",\n    //       },\n    //       {\n    //         category: \"FC\",\n    //         reasonsList: [{}],\n    //       },\n    //       {\n    //         category: \"End\",\n    //       },\n    //       {\n    //         category: \"CNN\",\n    //       },\n    //       {\n    //         category: \"RNN\",\n    //       },\n    //       {\n    //         category: \"LSTM\",\n    //       },\n    //       {\n    //         category: \"Softmax\",\n    //       },\n    //       {\n    //         category: \"Maximum Polling\",\n    //       },\n    //     ];\n    //     // read in the JSON-format data from the \"mySavedModel\" element\n    //     load();\n    //     layout();\n    //   }\n    //     // Common text styling\n    //     function textStyle() {\n    //       return {\n    //         margin: 6,\n    //         wrap: go.TextBlock.WrapFit,\n    //         textAlign: \"center\",\n    //         editable: true,\n    //         font: bigfont,\n    //       };\n    //     }\n    //   function init() {\n    //     const $ = go.GraphObject.make; // for conciseness in defining templates\n    //     var yellowgrad = $(go.Brush, \"Linear\", {\n    //       0: \"#bde0fe\",\n    //       1: \"#bde0fe\",\n    //     });\n    //     var greengrad = $(go.Brush, \"Linear\", {\n    //       0: \"#fdffb6\",\n    //       1: \"#fdffb6\",\n    //     });\n    //     var bluegrad = $(go.Brush, \"Linear\", {\n    //       0: \"#caffbf\",\n    //       1: \"#caffbf\",\n    //     });\n    //     var redgrad = $(go.Brush, \"Linear\", {\n    //       0: \"#ffadad\",\n    //       1: \"#ffadad\",\n    //     });\n    //     var whitegrad = $(go.Brush, \"Linear\", {\n    //       0: \"#E7C5FC\",\n    //       1: \"#E7C5FC\",\n    //     });\n    //   function layout() {\n    //     myDiagram.layoutDiagram(true);\n    //   }\n    //   // Show the diagram's model in JSON format\n    //   function save() {\n    //     document.getElementById(\"mySavedModel\").value = myDiagram.model.toJson();\n    //     myDiagram.isModified = false;\n    //   }\n    //   function load() {\n    //     myDiagram.model = go.Model.fromJson(\n    //       document.getElementById(\"mySavedModel\").value\n    //     );\n    //   }\n    //   window.addEventListener(\"DOMContentLoaded\", init);\n    var $ = go.GraphObject.make; // for conciseness in defining templates\n\n    var myDiagram = $(go.Diagram, \"myDiagramDiv\", // create a Diagram for the DIV HTML element\n    {\n      // enable undo & redo\n      \"undoManager.isEnabled\": true\n    }); // define a simple Node template\n\n    myDiagram.nodeTemplate = $(go.Node, \"Auto\", // the Shape will go around the TextBlock\n    $(go.Shape, \"RoundedRectangle\", {\n      strokeWidth: 0,\n      fill: \"white\"\n    }, // default fill is white\n    // Shape.fill is bound to Node.data.color\n    new go.Binding(\"fill\", \"color\")), $(go.TextBlock, {\n      margin: 8\n    }, // some room around the text\n    // TextBlock.text is bound to Node.data.key\n    new go.Binding(\"text\", \"key\"))); // but use the default Link template, by not setting Diagram.linkTemplate\n    // create the model data that will be represented by Nodes and Links\n\n    myDiagram.model = new go.GraphLinksModel([{\n      key: \"Alpha\",\n      color: \"lightblue\"\n    }, {\n      key: \"Beta\",\n      color: \"orange\"\n    }, {\n      key: \"Gamma\",\n      color: \"lightgreen\"\n    }, {\n      key: \"Delta\",\n      color: \"pink\"\n    }], [{\n      from: \"Alpha\",\n      to: \"Beta\"\n    }, {\n      from: \"Alpha\",\n      to: \"Gamma\"\n    }, {\n      from: \"Beta\",\n      to: \"Beta\"\n    }, {\n      from: \"Gamma\",\n      to: \"Delta\"\n    }, {\n      from: \"Delta\",\n      to: \"Alpha\"\n    }]);\n  }\n};","map":{"version":3,"mappings":"AA6EA;AACA,OAAOA,EAAP,MAAe,MAAf;AAEA,eAAe;AACbC,MAAI,EAAE,YADO;AAEbC,SAFa,qBAEH;AACR;AACA;AACA;AACA;AAEI;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,IAAIH,EAAE,CAACI,WAAH,CAAeC,IAAzB,CAxpBQ,CAwpBuB;;AAC/B,QAAMC,SAAQ,GAAIH,CAAC,CACjBH,EAAE,CAACO,OADc,EAEjB,cAFiB,EAED;AAChB;AACE;AACA,+BAAyB;AAF3B,KAHiB,CAAnB,CAzpBQ,CAkqBR;;AACAD,aAAS,CAACE,YAAV,GAAyBL,CAAC,CACxBH,EAAE,CAACS,IADqB,EAExB,MAFwB,EAEhB;AACRN,KAAC,CACCH,EAAE,CAACU,KADJ,EAEC,kBAFD,EAGC;AAAEC,iBAAW,EAAE,CAAf;AAAkBC,UAAI,EAAE;AAAxB,KAHD,EAGoC;AACnC;AACA,QAAIZ,EAAE,CAACa,OAAP,CAAe,MAAf,EAAuB,OAAvB,CALD,CAHuB,EAUxBV,CAAC,CACCH,EAAE,CAACc,SADJ,EAEC;AAAEC,YAAM,EAAE;AAAV,KAFD,EAEgB;AACf;AACA,QAAIf,EAAE,CAACa,OAAP,CAAe,MAAf,EAAuB,KAAvB,CAJD,CAVuB,CAA1B,CAnqBQ,CAqrBR;AAEA;;AACAP,aAAS,CAACU,KAAV,GAAkB,IAAIhB,EAAE,CAACiB,eAAP,CAChB,CACE;AAAEC,SAAG,EAAE,OAAP;AAAgBC,WAAK,EAAE;AAAvB,KADF,EAEE;AAAED,SAAG,EAAE,MAAP;AAAeC,WAAK,EAAE;AAAtB,KAFF,EAGE;AAAED,SAAG,EAAE,OAAP;AAAgBC,WAAK,EAAE;AAAvB,KAHF,EAIE;AAAED,SAAG,EAAE,OAAP;AAAgBC,WAAK,EAAE;AAAvB,KAJF,CADgB,EAOhB,CACE;AAAEC,UAAI,EAAE,OAAR;AAAiBC,QAAE,EAAE;AAArB,KADF,EAEE;AAAED,UAAI,EAAE,OAAR;AAAiBC,QAAE,EAAE;AAArB,KAFF,EAGE;AAAED,UAAI,EAAE,MAAR;AAAgBC,QAAE,EAAE;AAApB,KAHF,EAIE;AAAED,UAAI,EAAE,OAAR;AAAiBC,QAAE,EAAE;AAArB,KAJF,EAKE;AAAED,UAAI,EAAE,OAAR;AAAiBC,QAAE,EAAE;AAArB,KALF,CAPgB,CAAlB;AAeD;AAzsBY,CAAf","names":["go","name","mounted","$","GraphObject","make","myDiagram","Diagram","nodeTemplate","Node","Shape","strokeWidth","fill","Binding","TextBlock","margin","model","GraphLinksModel","key","color","from","to"],"sourceRoot":"","sources":["C:\\qp_box\\_CodeField\\Neural-Lego\\frontend\\src\\views\\CanvasView.vue"],"sourcesContent":["<template>\r\n  <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"utf-8\" />\r\n      <meta\r\n        name=\"viewport\"\r\n        content=\"width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover\"\r\n      />\r\n      <meta\r\n        name=\"description\"\r\n        content=\"A workflow diagram showing navigation between web pages, with an editable list of comments and to-dos.\"\r\n      />\r\n      <!-- <link rel=\"stylesheet\" href=\"style.css\" /> -->\r\n      <!-- Copyright 1998-2022 by Northwoods Software Corporation. -->\r\n      <title>Page Flow</title>\r\n    </head>\r\n\r\n    <body>\r\n      <div id=\"allSampleContent\" class=\"p-4 w-full\">\r\n        <div id=\"sample\">\r\n          <div\r\n            style=\"\r\n              width: 100%;\r\n              margin-bottom: 10px;\r\n              display: flex;\r\n              justify-content: space-between;\r\n            \"\r\n          >\r\n            <div\r\n              id=\"myPaletteDiv\"\r\n              style=\"\r\n                width: 150px;\r\n                margin-right: 10px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n            <div\r\n              id=\"myDiagramDiv\"\r\n              style=\"\r\n                flex-grow: 3;\r\n                margin-right: 10px;\r\n                height: 600px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n            <div\r\n              id=\"myDiagramDiv\"\r\n              style=\"\r\n                flex-grow: 2;\r\n                height: 600px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n          </div>\r\n\r\n          <button id=\"SaveButton\" onclick=\"save()\">Save</button>\r\n          <button onclick=\"load()\">Load</button>\r\n          <button onclick=\"layout()\">Layout</button>\r\n          <br />\r\n          <textarea id=\"mySavedModel\" style=\"width: 100%; height: 300px\">\r\n{ \"class\": \"GraphLinksModel\", \r\n\"nodeDataArray\": [ {\"category\":\"Data\", \"key\":-1, \"loc\":\"-70.5 -90.19999980926514\"} ], \r\n\"linkDataArray\": []}\r\n  </textarea\r\n          >\r\n        </div>\r\n      </div>\r\n    </body>\r\n  </html>\r\n</template>\r\n\r\n\r\n\r\n<script id='code'>\r\n// import go from \"/public/go.js\";\r\nimport go from \"gojs\";\r\n\r\nexport default {\r\n  name: \"CanvasView\",\r\n  mounted() {\r\n    // let script = document.createElement(\"script\");\r\n    // script.type = \"text/javascript\";\r\n    // script.src = \"/go.js\";\r\n    // document.body.appendChild(script);\r\n\r\n        // var bigfont = \"bold 15pt Helvetica, Arial, sans-serif\";\r\n        // var smallfont = \"bold 13pt Helvetica, Arial, sans-serif\";\r\n\r\n        // myDiagram = $(go.Diagram, \"myDiagramDiv\", {\r\n        //   // // have mouse wheel events zoom in and out instead of scroll up and down\r\n        //   //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\r\n        //   initialAutoScale: go.Diagram.Uniform,\r\n        //   \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\r\n        //   layout: $(go.LayeredDigraphLayout, {\r\n        //     isInitial: false,\r\n        //     isOngoing: false,\r\n        //     layerSpacing: 50,\r\n        //   }),\r\n        //   \"undoManager.isEnabled\": true,\r\n        // });\r\n\r\n        // var nodeSelectionAdornmentTemplate = $(\r\n        //   go.Adornment,\r\n        //   \"Auto\",\r\n        //   $(go.Shape, {\r\n        //     fill: null,\r\n        //     stroke: \"#979dac\",\r\n        //     strokeWidth: 2,\r\n        //     strokeDashArray: [4, 2],\r\n        //   }),\r\n        //   $(go.Placeholder)\r\n        // );\r\n\r\n    //     // define the Node template\r\n    //     myDiagram.nodeTemplate = $(\r\n    //       go.Node,\r\n    //       \"Auto\",\r\n    //       {\r\n    //         locationSpot: go.Spot.Center,\r\n    //       },\r\n    //       new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n    //         go.Point.stringify\r\n    //       ),\r\n    //       {\r\n    //         selectable: true,\r\n    //         selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n    //       },\r\n    //       // define the node's outer shape, which will surround the TextBlock\r\n    //       $(go.Shape, \"Rectangle\", {\r\n    //         fill: yellowgrad,\r\n    //         stroke: null,\r\n    //         portId: \"\",\r\n    //         fromLinkable: true,\r\n    //         toLinkable: true,\r\n    //         cursor: \"pointer\",\r\n    //         toEndSegmentLength: 50,\r\n    //         fromEndSegmentLength: 50,\r\n    //       }),\r\n    //       $(\r\n    //         go.TextBlock,\r\n    //         \"ReLU\",\r\n    //         {\r\n    //           margin: 6,\r\n    //           font: bigfont,\r\n    //           editable: true,\r\n    //           minSize: new go.Size(40, NaN),\r\n    //         },\r\n    //         new go.Binding(\"text\", \"text\").makeTwoWay()\r\n    //       )\r\n    //     );\r\n\r\n    //     // Data\r\n    //     myDiagram.nodeTemplateMap.add(\r\n    //       \"Data\",\r\n    //       $(\r\n    //         go.Node,\r\n    //         \"Auto\",\r\n    //         {\r\n    //           locationSpot: go.Spot.Center,\r\n    //           margin: new go.Margin(0, 0, 0, 0),\r\n    //         },\r\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n    //           go.Point.stringify\r\n    //         ),\r\n    //         {\r\n    //           selectable: true,\r\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n    //         },\r\n    //         $(go.Shape, \"Circle\", {\r\n    //           fill: bluegrad,\r\n    //           portId: \"\",\r\n    //           fromLinkable: true,\r\n    //           cursor: \"pointer\",\r\n    //           //fromEndSegmentLength: 40,\r\n    //           stroke: \"#74c69d\",\r\n\r\n    //           strokeWidth: 4,\r\n    //         }),\r\n    //         $(\r\n    //           go.TextBlock,\r\n    //           \"Data\",\r\n    //           textStyle(),\r\n    //           {\r\n    //             stroke: \"#2d6a4f\",\r\n    //             minSize: new go.Size(40, NaN),\r\n    //           },\r\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\r\n    //         )\r\n    //       )\r\n    //     );\r\n\r\n    //     myDiagram.nodeTemplateMap.add(\r\n    //       \"End\",\r\n    //       $(\r\n    //         go.Node,\r\n    //         \"Auto\",\r\n    //         {\r\n    //           locationSpot: go.Spot.Center,\r\n    //         },\r\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n    //           go.Point.stringify\r\n    //         ),\r\n    //         {\r\n    //           selectable: true,\r\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n    //         },\r\n    //         $(go.Shape, \"Circle\", {\r\n    //           fill: redgrad,\r\n    //           portId: \"\",\r\n    //           toLinkable: true,\r\n    //           cursor: \"pointer\",\r\n    //           fromEndSegmentLength: 40,\r\n    //           stroke: \"#df7373\",\r\n    //           strokeWidth: 4,\r\n    //         }),\r\n    //         $(\r\n    //           go.TextBlock,\r\n    //           \"End\",\r\n    //           textStyle(),\r\n    //           {\r\n    //             stroke: \"#ad2e24\",\r\n    //             minSize: new go.Size(40, NaN),\r\n    //           },\r\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\r\n    //         )\r\n    //       )\r\n    //     );\r\n\r\n    //     myDiagram.nodeTemplateMap.add(\r\n    //       \"ReLU\",\r\n    //       $(\r\n    //         go.Node,\r\n    //         \"Auto\",\r\n    //         {\r\n    //           locationSpot: go.Spot.Center,\r\n    //         },\r\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n    //           go.Point.stringify\r\n    //         ),\r\n    //         {\r\n    //           selectable: true,\r\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n    //         },\r\n    //         $(go.Shape, \"Ellipse\", {\r\n    //           fill: greengrad,\r\n    //           portId: \"\",\r\n    //           fromLinkable: true,\r\n    //           toLinkable: true,\r\n    //           cursor: \"pointer\",\r\n    //           fromEndSegmentLength: 40,\r\n    //           stroke: \"#ffd100\",\r\n    //           strokeWidth: 4,\r\n    //         }),\r\n    //         $(\r\n    //           go.TextBlock,\r\n    //           \"ReLU\",\r\n    //           textStyle(),\r\n    //           {\r\n    //             stroke: \"#e2711d\",\r\n    //             // locationSpot: go.Spot.Center,\r\n    //             //margin: new go.Margin(10, 0, 0, 0),\r\n    //             minSize: new go.Size(60, NaN),\r\n    //           },\r\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\r\n    //         )\r\n    //       )\r\n    //     );\r\n\r\n    //     var reasonTemplate = $(\r\n    //       go.Panel,\r\n    //       $(\r\n    //         go.Panel,\r\n    //         \"Table\",\r\n    //         {\r\n    //           maxSize: new go.Size(200, 999),\r\n    //           margin: new go.Margin(0, 3, 10, 3),\r\n    //           defaultAlignment: go.Spot.Center,\r\n    //         },\r\n    //         $(go.RowColumnDefinition, {\r\n    //           column: 2,\r\n    //           width: 2,\r\n    //         }),\r\n    //         $(\r\n    //           go.TextBlock,\r\n    //           \"input = \",\r\n    //           {\r\n    //             margin: new go.Margin(4, 0, 0, 0),\r\n    //             maxSize: new go.Size(200, NaN),\r\n    //             wrap: go.TextBlock.WrapFit,\r\n    //             //stroke: \"whitesmoke\",\r\n    //             editable: true,\r\n    //             font: smallfont,\r\n    //             row: 2,\r\n    //             column: 0,\r\n    //             stroke: \"#3e5c76\",\r\n    //           },\r\n    //           new go.Binding(\"text\", \"text0\").makeTwoWay()\r\n    //         ),\r\n\r\n    //         $(\r\n    //           go.TextBlock,\r\n    //           \"value\",\r\n    //           {\r\n    //             margin: new go.Margin(4, 0, 0, 0),\r\n    //             maxSize: new go.Size(200, NaN),\r\n    //             wrap: go.TextBlock.WrapFit,\r\n    //             //stroke: \"whitesmoke\",\r\n    //             editable: true,\r\n    //             stroke: \"#3e5c76\",\r\n    //             font: smallfont,\r\n    //             row: 2,\r\n    //             column: 1,\r\n    //           },\r\n    //           new go.Binding(\"text\", \"text1\").makeTwoWay()\r\n    //         ),\r\n\r\n    //         $(\r\n    //           go.TextBlock,\r\n    //           \"output = \",\r\n    //           {\r\n    //             margin: new go.Margin(4, 0, 0, 0),\r\n    //             maxSize: new go.Size(200, NaN),\r\n    //             wrap: go.TextBlock.WrapFit,\r\n    //             //stroke: \"whitesmoke\",\r\n    //             editable: true,\r\n    //             font: smallfont,\r\n    //             stroke: \"#3e5c76\",\r\n    //             row: 3,\r\n    //             column: 0,\r\n    //           },\r\n    //           new go.Binding(\"text\", \"text2\").makeTwoWay()\r\n    //         ),\r\n\r\n    //         $(\r\n    //           go.TextBlock,\r\n    //           \"value\",\r\n    //           {\r\n    //             margin: new go.Margin(4, 0, 0, 9),\r\n    //             maxSize: new go.Size(200, NaN),\r\n    //             wrap: go.TextBlock.WrapFit,\r\n    //             //stroke: \"whitesmoke\",\r\n    //             editable: true,\r\n    //             font: smallfont,\r\n    //             stroke: \"#3e5c76\",\r\n    //             row: 3,\r\n    //             column: 1,\r\n    //           },\r\n    //           new go.Binding(\"text\", \"text3\").makeTwoWay()\r\n    //         )\r\n    //       ) // end Table Panel\r\n    //     );\r\n\r\n    //     myDiagram.nodeTemplateMap.add(\r\n    //       \"FC\",\r\n    //       $(\r\n    //         go.Node,\r\n    //         \"Auto\",\r\n    //         {\r\n    //           locationSpot: go.Spot.Center,\r\n    //         },\r\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n    //           go.Point.stringify\r\n    //         ),\r\n    //         {\r\n    //           selectable: true,\r\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n    //         },\r\n    //         $(go.Shape, \"RoundedRectangle\", {\r\n    //           fill: yellowgrad,\r\n    //           stroke: \"#4ea8de\",\r\n    //           strokeWidth: 4,\r\n    //           portId: \"\",\r\n    //           fromLinkable: true,\r\n    //           toLinkable: true,\r\n    //           cursor: \"pointer\",\r\n    //           toEndSegmentLength: 50,\r\n    //           fromEndSegmentLength: 40,\r\n    //         }),\r\n    //         $(\r\n    //           go.Panel,\r\n    //           \"Vertical\",\r\n    //           {\r\n    //             defaultAlignment: go.Spot.Center,\r\n    //           },\r\n\r\n    //           $(\r\n    //             go.TextBlock,\r\n    //             \"FC\",\r\n    //             textStyle(),\r\n    //             {\r\n    //               stroke: \"#3e5c76\",\r\n    //               margin: new go.Margin(8, 0, 0, 0),\r\n    //               minSize: new go.Size(100, NaN),\r\n    //               //maxSize: new go.Size(200, NaN)\r\n    //             },\r\n    //             new go.Binding(\"text\", \"text\").makeTwoWay()\r\n    //           ),\r\n\r\n    //           $(\r\n    //             go.Panel,\r\n    //             \"Vertical\",\r\n    //             {\r\n    //               defaultAlignment: go.Spot.TopLeft,\r\n    //               itemTemplate: reasonTemplate,\r\n    //             },\r\n    //             new go.Binding(\"itemArray\", \"reasonsList\").makeTwoWay()\r\n    //           )\r\n    //         )\r\n    //       )\r\n    //     );\r\n\r\n    //     var linkSelectionAdornmentTemplate = $(\r\n    //       go.Adornment,\r\n    //       \"Link\",\r\n    //       $(\r\n    //         go.Shape,\r\n    //         // isPanelMain declares that this Shape shares the Link.geometry\r\n    //         {\r\n    //           isPanelMain: true,\r\n    //           fill: null,\r\n    //           stroke: \"deepskyblue\",\r\n    //           strokeWidth: 2.5,\r\n    //         }\r\n    //       ) // use selection object's strokeWidth\r\n    //     );\r\n    //     // replace the default Link template in the linkTemplateMap\r\n    //     myDiagram.linkTemplate = $(\r\n    //       go.Link, // the whole link panel\r\n    //       {\r\n    //         selectable: true,\r\n    //         selectionAdornmentTemplate: linkSelectionAdornmentTemplate,\r\n    //       },\r\n    //       new go.Binding(\"points\").makeTwoWay(),\r\n    //       {\r\n    //         //curve: go.Link.Bezier,\r\n    //         toShortLength: 15,\r\n    //       },\r\n    //       //new go.Binding(\"curviness\", \"curviness\"),\r\n    //       $(\r\n    //         go.Shape, // the link shape\r\n    //         {\r\n    //           stroke: \"#979dac\",\r\n    //           strokeWidth: 2.5,\r\n    //         }\r\n    //       ),\r\n    //       $(\r\n    //         go.Shape, // the arrowhead\r\n    //         {\r\n    //           toArrow: \"kite\",\r\n    //           fill: \"#979dac\",\r\n    //           stroke: null,\r\n    //           scale: 2,\r\n    //         }\r\n    //       )\r\n    //     );\r\n\r\n    //     myDiagram.nodeTemplateMap.add(\r\n    //       \"RNN\",\r\n    //       $(\r\n    //         go.Node,\r\n    //         \"Auto\",\r\n    //         {\r\n    //           locationSpot: go.Spot.Center,\r\n    //         },\r\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n    //           go.Point.stringify\r\n    //         ),\r\n    //         {\r\n    //           selectable: true,\r\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n    //         },\r\n    //         $(go.Shape, \"RoundedRectangle\", {\r\n    //           fill: whitegrad,\r\n    //           stroke: \"#CF8BF9\",\r\n    //           strokeWidth: 4,\r\n    //         }),\r\n    //         $(\r\n    //           go.TextBlock,\r\n    //           \"RNN\\n(unavailable)\",\r\n    //           textStyle(),\r\n    //           {\r\n    //             margin: 9,\r\n    //             maxSize: new go.Size(200, NaN),\r\n    //             wrap: go.TextBlock.WrapFit,\r\n    //             editable: true,\r\n    //             stroke: \"#560788\",\r\n    //             font: smallfont,\r\n    //           },\r\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\r\n    //         )\r\n    //         // no ports, because no links are allowed to connect with a comment\r\n    //       )\r\n    //     );\r\n\r\n    //     myDiagram.nodeTemplateMap.add(\r\n    //       \"CNN\",\r\n    //       $(\r\n    //         go.Node,\r\n    //         \"Auto\",\r\n    //         {\r\n    //           locationSpot: go.Spot.Center,\r\n    //         },\r\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n    //           go.Point.stringify\r\n    //         ),\r\n    //         {\r\n    //           selectable: true,\r\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n    //         },\r\n    //         $(go.Shape, \"RoundedRectangle\", {\r\n    //           fill: whitegrad,\r\n    //           stroke: \"#CF8BF9\",\r\n    //           strokeWidth: 4,\r\n    //         }),\r\n    //         $(\r\n    //           go.TextBlock,\r\n    //           \"CNN\\n(unavailable)\",\r\n    //           textStyle(),\r\n    //           {\r\n    //             margin: 9,\r\n    //             maxSize: new go.Size(200, NaN),\r\n    //             wrap: go.TextBlock.WrapFit,\r\n    //             editable: true,\r\n    //             stroke: \"#560788\",\r\n    //             font: smallfont,\r\n    //           },\r\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\r\n    //         )\r\n    //         // no ports, because no links are allowed to connect with a comment\r\n    //       )\r\n    //     );\r\n\r\n    //     myDiagram.nodeTemplateMap.add(\r\n    //       \"LSTM\",\r\n    //       $(\r\n    //         go.Node,\r\n    //         \"Auto\",\r\n    //         {\r\n    //           locationSpot: go.Spot.Center,\r\n    //         },\r\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n    //           go.Point.stringify\r\n    //         ),\r\n    //         {\r\n    //           selectable: true,\r\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n    //         },\r\n    //         $(go.Shape, \"RoundedRectangle\", {\r\n    //           fill: whitegrad,\r\n    //           stroke: \"#CF8BF9\",\r\n    //           strokeWidth: 4,\r\n    //         }),\r\n    //         $(\r\n    //           go.TextBlock,\r\n    //           \"LSTM\\n(unavailable)\",\r\n    //           textStyle(),\r\n    //           {\r\n    //             margin: 9,\r\n    //             maxSize: new go.Size(200, NaN),\r\n    //             wrap: go.TextBlock.WrapFit,\r\n    //             editable: true,\r\n    //             stroke: \"#560788\",\r\n    //             font: smallfont,\r\n    //           },\r\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\r\n    //         )\r\n    //         // no ports, because no links are allowed to connect with a comment\r\n    //       )\r\n    //     );\r\n\r\n    //     myDiagram.nodeTemplateMap.add(\r\n    //       \"Softmax\",\r\n    //       $(\r\n    //         go.Node,\r\n    //         \"Auto\",\r\n    //         {\r\n    //           locationSpot: go.Spot.Center,\r\n    //         },\r\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n    //           go.Point.stringify\r\n    //         ),\r\n    //         {\r\n    //           selectable: true,\r\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n    //         },\r\n    //         $(go.Shape, \"RoundedRectangle\", {\r\n    //           fill: whitegrad,\r\n    //           stroke: \"#CF8BF9\",\r\n    //           strokeWidth: 4,\r\n    //         }),\r\n    //         $(\r\n    //           go.TextBlock,\r\n    //           \"Softmax\\n(unavailable)\",\r\n    //           textStyle(),\r\n    //           {\r\n    //             margin: 9,\r\n    //             maxSize: new go.Size(200, NaN),\r\n    //             wrap: go.TextBlock.WrapFit,\r\n    //             editable: true,\r\n    //             stroke: \"#560788\",\r\n    //             font: smallfont,\r\n    //           },\r\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\r\n    //         )\r\n    //         // no ports, because no links are allowed to connect with a comment\r\n    //       )\r\n    //     );\r\n\r\n    //     myDiagram.nodeTemplateMap.add(\r\n    //       \"Maximum Polling\",\r\n    //       $(\r\n    //         go.Node,\r\n    //         \"Auto\",\r\n    //         {\r\n    //           locationSpot: go.Spot.Center,\r\n    //         },\r\n    //         new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n    //           go.Point.stringify\r\n    //         ),\r\n    //         {\r\n    //           selectable: true,\r\n    //           selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n    //         },\r\n    //         $(go.Shape, \"RoundedRectangle\", {\r\n    //           fill: whitegrad,\r\n    //           stroke: \"#CF8BF9\",\r\n    //           strokeWidth: 4,\r\n    //         }),\r\n    //         $(\r\n    //           go.TextBlock,\r\n    //           \"Maximum\\nPolling\\n(unavailable)\",\r\n    //           textStyle(),\r\n    //           {\r\n    //             margin: 9,\r\n    //             maxSize: new go.Size(200, NaN),\r\n    //             wrap: go.TextBlock.WrapFit,\r\n    //             editable: true,\r\n    //             stroke: \"#560788\",\r\n    //             font: smallfont,\r\n    //           },\r\n    //           new go.Binding(\"text\", \"text\").makeTwoWay()\r\n    //         )\r\n    //         // no ports, because no links are allowed to connect with a comment\r\n    //       )\r\n    //     );\r\n\r\n    //     var palette = $(\r\n    //       go.Palette,\r\n    //       \"myPaletteDiv\", // create a new Palette in the HTML DIV element\r\n    //       {\r\n    //         // share the template map with the Palette\r\n    //         nodeTemplateMap: myDiagram.nodeTemplateMap,\r\n    //         autoScale: go.Diagram.Uniform, // everything always fits in viewport\r\n    //       }\r\n    //     );\r\n\r\n    //     palette.model.nodeDataArray = [\r\n    //       {\r\n    //         category: \"Data\",\r\n    //       },\r\n    //       {\r\n    //         category: \"ReLU\",\r\n    //       },\r\n    //       {\r\n    //         category: \"FC\",\r\n    //         reasonsList: [{}],\r\n    //       },\r\n    //       {\r\n    //         category: \"End\",\r\n    //       },\r\n    //       {\r\n    //         category: \"CNN\",\r\n    //       },\r\n    //       {\r\n    //         category: \"RNN\",\r\n    //       },\r\n    //       {\r\n    //         category: \"LSTM\",\r\n    //       },\r\n    //       {\r\n    //         category: \"Softmax\",\r\n    //       },\r\n    //       {\r\n    //         category: \"Maximum Polling\",\r\n    //       },\r\n    //     ];\r\n\r\n    //     // read in the JSON-format data from the \"mySavedModel\" element\r\n    //     load();\r\n    //     layout();\r\n    //   }\r\n\r\n      //     // Common text styling\r\n    //     function textStyle() {\r\n    //       return {\r\n    //         margin: 6,\r\n    //         wrap: go.TextBlock.WrapFit,\r\n    //         textAlign: \"center\",\r\n    //         editable: true,\r\n    //         font: bigfont,\r\n    //       };\r\n    //     }\r\n\r\n    //   function init() {\r\n    //     const $ = go.GraphObject.make; // for conciseness in defining templates\r\n\r\n    //     var yellowgrad = $(go.Brush, \"Linear\", {\r\n    //       0: \"#bde0fe\",\r\n    //       1: \"#bde0fe\",\r\n    //     });\r\n    //     var greengrad = $(go.Brush, \"Linear\", {\r\n    //       0: \"#fdffb6\",\r\n    //       1: \"#fdffb6\",\r\n    //     });\r\n    //     var bluegrad = $(go.Brush, \"Linear\", {\r\n    //       0: \"#caffbf\",\r\n    //       1: \"#caffbf\",\r\n    //     });\r\n    //     var redgrad = $(go.Brush, \"Linear\", {\r\n    //       0: \"#ffadad\",\r\n    //       1: \"#ffadad\",\r\n    //     });\r\n    //     var whitegrad = $(go.Brush, \"Linear\", {\r\n    //       0: \"#E7C5FC\",\r\n    //       1: \"#E7C5FC\",\r\n    //     });\r\n\r\n    //   function layout() {\r\n    //     myDiagram.layoutDiagram(true);\r\n    //   }\r\n    //   // Show the diagram's model in JSON format\r\n    //   function save() {\r\n    //     document.getElementById(\"mySavedModel\").value = myDiagram.model.toJson();\r\n    //     myDiagram.isModified = false;\r\n    //   }\r\n\r\n    //   function load() {\r\n    //     myDiagram.model = go.Model.fromJson(\r\n    //       document.getElementById(\"mySavedModel\").value\r\n    //     );\r\n    //   }\r\n    //   window.addEventListener(\"DOMContentLoaded\", init);\r\n\r\n    const $ = go.GraphObject.make; // for conciseness in defining templates\r\n    const myDiagram = $(\r\n      go.Diagram,\r\n      \"myDiagramDiv\", // create a Diagram for the DIV HTML element\r\n      {\r\n        // enable undo & redo\r\n        \"undoManager.isEnabled\": true,\r\n      }\r\n    );\r\n\r\n    // define a simple Node template\r\n    myDiagram.nodeTemplate = $(\r\n      go.Node,\r\n      \"Auto\", // the Shape will go around the TextBlock\r\n      $(\r\n        go.Shape,\r\n        \"RoundedRectangle\",\r\n        { strokeWidth: 0, fill: \"white\" }, // default fill is white\r\n        // Shape.fill is bound to Node.data.color\r\n        new go.Binding(\"fill\", \"color\")\r\n      ),\r\n      $(\r\n        go.TextBlock,\r\n        { margin: 8 }, // some room around the text\r\n        // TextBlock.text is bound to Node.data.key\r\n        new go.Binding(\"text\", \"key\")\r\n      )\r\n    );\r\n\r\n    // but use the default Link template, by not setting Diagram.linkTemplate\r\n\r\n    // create the model data that will be represented by Nodes and Links\r\n    myDiagram.model = new go.GraphLinksModel(\r\n      [\r\n        { key: \"Alpha\", color: \"lightblue\" },\r\n        { key: \"Beta\", color: \"orange\" },\r\n        { key: \"Gamma\", color: \"lightgreen\" },\r\n        { key: \"Delta\", color: \"pink\" },\r\n      ],\r\n      [\r\n        { from: \"Alpha\", to: \"Beta\" },\r\n        { from: \"Alpha\", to: \"Gamma\" },\r\n        { from: \"Beta\", to: \"Beta\" },\r\n        { from: \"Gamma\", to: \"Delta\" },\r\n        { from: \"Delta\", to: \"Alpha\" },\r\n      ]\r\n    );\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n#myPaletteDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.015);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myDiagramDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.01);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myPaletteDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n#myDiagramDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n.button,\r\nbutton {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(31, 73, 99, var(--tw-bg-opacity));\r\n  border-radius: 0.25rem;\r\n  display: inline-block;\r\n  margin: 0.25rem;\r\n  font-size: 12pt;\r\n  font-family: Helvetica, Arial;\r\n  padding-top: 0.25rem;\r\n  padding-bottom: 0.25rem;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n}\r\n\r\n.button:hover,\r\nbutton:hover {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(98, 127, 145, var(--tw-bg-opacity));\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n  transition-property: background-color, border-color, color, fill, stroke;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n  transition-duration: 150ms;\r\n  transition-duration: 0.2s;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}