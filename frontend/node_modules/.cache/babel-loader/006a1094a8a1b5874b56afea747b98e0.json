{"ast":null,"code":"import * as go from \"/public/go.js\";\nexport default {\n  name: \"CanvasView\",\n  mounted: function mounted() {\n    var $ = go.GraphObject.make; // for conciseness in defining templates\n\n    myDiagram = $(go.Diagram, \"myDiagramDiv\", {\n      // // have mouse wheel events zoom in and out instead of scroll up and down\n      //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\n      initialAutoScale: go.Diagram.Uniform,\n      \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\n      layout: $(go.LayeredDigraphLayout, {\n        isInitial: false,\n        isOngoing: false,\n        layerSpacing: 50\n      }),\n      \"undoManager.isEnabled\": true\n    });\n    var nodeSelectionAdornmentTemplate = $(go.Adornment, \"Auto\", $(go.Shape, {\n      fill: null,\n      stroke: \"#979dac\",\n      strokeWidth: 2,\n      strokeDashArray: [4, 2]\n    }), $(go.Placeholder)); // define the Node template\n\n    myDiagram.nodeTemplate = $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, // define the node's outer shape, which will surround the TextBlock\n    $(go.Shape, \"Rectangle\", {\n      fill: yellowgrad,\n      stroke: null,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true,\n      cursor: \"pointer\",\n      toEndSegmentLength: 50,\n      fromEndSegmentLength: 50\n    }), $(go.TextBlock, \"ReLU\", {\n      margin: 6,\n      font: bigfont,\n      editable: true,\n      minSize: new go.Size(40, NaN)\n    }, new go.Binding(\"text\", \"text\").makeTwoWay())); // Data\n\n    myDiagram.nodeTemplateMap.add(\"Data\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center,\n      margin: new go.Margin(0, 0, 0, 0)\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"Circle\", {\n      fill: bluegrad,\n      portId: \"\",\n      fromLinkable: true,\n      cursor: \"pointer\",\n      //fromEndSegmentLength: 40,\n      stroke: \"#74c69d\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"Data\", textStyle(), {\n      stroke: \"#2d6a4f\",\n      minSize: new go.Size(40, NaN)\n    }, new go.Binding(\"text\", \"text\").makeTwoWay())));\n  },\n  methods: {//       save() {\n    //     console.log(\"save\");\n    //     // myDiagram.layoutDiagram(true);\n    //   },\n    //       load() {\n    //     console.log(\"load\");\n    //     // myDiagram.layoutDiagram(true);\n    //   },\n    //   layout() {\n    //     // console.log(\"layout\");\n    //     // myDiagram.layoutDiagram(true);\n    //   },\n  }\n};","map":{"version":3,"mappings":"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","names":["go","name","mounted","$","GraphObject","make","myDiagram","Diagram","initialAutoScale","Uniform","LinkingTool","ForwardsOnly","layout","LayeredDigraphLayout","isInitial","isOngoing","layerSpacing","nodeSelectionAdornmentTemplate","Adornment","Shape","fill","stroke","strokeWidth","strokeDashArray","Placeholder","nodeTemplate","Node","locationSpot","Spot","Center","Binding","Point","parse","makeTwoWay","stringify","selectable","selectionAdornmentTemplate","yellowgrad","portId","fromLinkable","toLinkable","cursor","toEndSegmentLength","fromEndSegmentLength","TextBlock","margin","font","bigfont","editable","minSize","Size","NaN","nodeTemplateMap","add","Margin","bluegrad","textStyle","methods"],"sourceRoot":"","sources":["C:\\qp_box\\_CodeField\\Neural-Lego\\frontend\\src\\views\\CanvasView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div id=\"allSampleContent\" class=\"p-4 w-full\">\r\n      <div id=\"sample\">\r\n        <div\r\n          style=\"\r\n            width: 100%;\r\n            margin-bottom: 10px;\r\n            display: flex;\r\n            justify-content: space-between;\r\n          \"\r\n        >\r\n          <div\r\n            id=\"myPaletteDiv\"\r\n            style=\"\r\n              width: 150px;\r\n              margin-right: 10px;\r\n              background-color: whitesmoke;\r\n              border: solid 4px #82929b;\r\n            \"\r\n          ></div>\r\n          <div\r\n            id=\"myDiagramDiv\"\r\n            style=\"\r\n              flex-grow: 3;\r\n              margin-right: 10px;\r\n              height: 600px;\r\n              background-color: whitesmoke;\r\n              border: solid 4px #82929b;\r\n            \"\r\n          ></div>\r\n          <div\r\n            id=\"myDiagramDiv\"\r\n            style=\"\r\n              flex-grow: 2;\r\n              height: 600px;\r\n              background-color: whitesmoke;\r\n              border: solid 4px #82929b;\r\n            \"\r\n          ></div>\r\n        </div>\r\n\r\n        <button type=\"submit\" @click=\"save()\">Save</button>\r\n        <button type=\"submit\" @click=\"load()\">Load</button>\r\n        <button type=\"submit\" @click=\"layout()\">Layout</button>\r\n        <br />\r\n        <textarea id=\"mySavedModel\" style=\"width: 100%; height: 300px\">\r\n{ \"class\": \"GraphLinksModel\", \r\n\"nodeDataArray\": [ {\"category\":\"Data\", \"key\":-1, \"loc\":\"-70.5 -90.19999980926514\"} ], \r\n\"linkDataArray\": []}\r\n  </textarea\r\n        >\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n\r\n<script id='code'>\r\nimport * as go from \"/public/go.js\";\r\n\r\nexport default {\r\n  name: \"CanvasView\",\r\n  mounted() {\r\n    const $ = go.GraphObject.make; // for conciseness in defining templates\r\n\r\n    myDiagram = $(go.Diagram, \"myDiagramDiv\", {\r\n                    // // have mouse wheel events zoom in and out instead of scroll up and down\r\n                    //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\r\n                    initialAutoScale: go.Diagram.Uniform,\r\n                    \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\r\n                    layout: $(go.LayeredDigraphLayout, {\r\n                        isInitial: false,\r\n                        isOngoing: false,\r\n                        layerSpacing: 50\r\n                    }),\r\n                    \"undoManager.isEnabled\": true\r\n                });\r\n\r\n                var nodeSelectionAdornmentTemplate =\r\n                    $(go.Adornment, \"Auto\",\r\n                        $(go.Shape, {\r\n                            fill: null,\r\n                            stroke: \"#979dac\",\r\n                            strokeWidth: 2,\r\n                            strokeDashArray: [4, 2]\r\n                        }),\r\n                        $(go.Placeholder)\r\n                    );\r\n\r\n                // define the Node template\r\n                myDiagram.nodeTemplate = $(go.Node, \"Auto\", {\r\n                        locationSpot: go.Spot.Center\r\n                    },\r\n                    new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                        selectable: true,\r\n                        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                    },\r\n                    // define the node's outer shape, which will surround the TextBlock\r\n                    $(go.Shape, \"Rectangle\", {\r\n                        fill: yellowgrad,\r\n                        stroke: null,\r\n                        portId: \"\",\r\n                        fromLinkable: true,\r\n                        toLinkable: true,\r\n                        cursor: \"pointer\",\r\n                        toEndSegmentLength: 50,\r\n                        fromEndSegmentLength: 50\r\n                    }),\r\n                    $(go.TextBlock, \"ReLU\", {\r\n                            margin: 6,\r\n                            font: bigfont,\r\n                            editable: true,\r\n                            minSize: new go.Size(40, NaN)\r\n                        },\r\n                        new go.Binding(\"text\", \"text\").makeTwoWay()));\r\n\r\n                // Data\r\n                myDiagram.nodeTemplateMap.add(\"Data\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center,\r\n                            margin: new go.Margin(0, 0, 0, 0),\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"Circle\", {\r\n                            fill: bluegrad,\r\n                            portId: \"\",\r\n                            fromLinkable: true,\r\n                            cursor: \"pointer\",\r\n                            //fromEndSegmentLength: 40,\r\n                            stroke: \"#74c69d\",\r\n\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"Data\", textStyle(), {\r\n                                stroke: \"#2d6a4f\",\r\n                                minSize: new go.Size(40, NaN)\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay(),\r\n                        )\r\n                    ));\r\n  },\r\n\r\n  methods: {\r\n    //       save() {\r\n    //     console.log(\"save\");\r\n    //     // myDiagram.layoutDiagram(true);\r\n    //   },\r\n    //       load() {\r\n    //     console.log(\"load\");\r\n    //     // myDiagram.layoutDiagram(true);\r\n    //   },\r\n    //   layout() {\r\n    //     // console.log(\"layout\");\r\n    //     // myDiagram.layoutDiagram(true);\r\n    //   },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n#myPaletteDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.015);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myDiagramDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.01);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myPaletteDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n#myDiagramDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n.button,\r\nbutton {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(31, 73, 99, var(--tw-bg-opacity));\r\n  border-radius: 0.25rem;\r\n  display: inline-block;\r\n  margin: 0.25rem;\r\n  font-size: 12pt;\r\n  font-family: Helvetica, Arial;\r\n  padding-top: 0.25rem;\r\n  padding-bottom: 0.25rem;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n}\r\n\r\n.button:hover,\r\nbutton:hover {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(98, 127, 145, var(--tw-bg-opacity));\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n  transition-property: background-color, border-color, color, fill, stroke;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n  transition-duration: 150ms;\r\n  transition-duration: 0.2s;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}