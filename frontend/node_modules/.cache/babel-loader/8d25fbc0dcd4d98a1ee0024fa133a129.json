{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport axios from \"axios\";\nimport * as go from \"../../public/go.js\"; //import Prism Editor\n\nimport { PrismEditor } from \"vue-prism-editor\";\nimport \"vue-prism-editor/dist/prismeditor.min.css\"; // import the styles somewhere\n// import highlighting library (you can use any library you want just return html string)\n\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-javascript\";\nimport \"prismjs/themes/prism-twilight.css\"; // import syntax highlighting styles\n\nexport default {\n  name: \"CanvasView\",\n  components: {\n    PrismEditor: PrismEditor\n  },\n  data: function data() {\n    return {\n      canvasData: {\n        file: {\n          \"class\": \"GraphLinksModel\",\n          nodeDataArray: [{\n            category: \"Data\",\n            key: -1,\n            loc: \"42.22500681322674 47.35735117835321\"\n          }, {\n            category: \"End\",\n            key: -4,\n            loc: \"567.1497069414404 47.35735117835318\"\n          }, {\n            category: \"ReLU\",\n            key: -2,\n            loc: \"403.0334278716728 47.357351178353184\"\n          }, {\n            category: \"FC\",\n            reasonsList: [{\n              text1: \"512\",\n              text3: \"128\"\n            }],\n            key: -3,\n            loc: \"216.57893005138874 47.357351178353184\"\n          }],\n          linkDataArray: [{\n            from: -3,\n            to: -2,\n            points: [278.70784647632394, 47.35735117835319, 318.70784647632394, 47.35735117835319, 338.707846476324, 47.3573511783532, 348.707846476324, 47.3573511783532]\n          }, {\n            from: -2,\n            to: -4,\n            points: [457.3590092670217, 47.3573511783532, 497.3590092670217, 47.3573511783532, 517.3590092670217, 47.35735117835319, 527.3590092670217, 47.35735117835319]\n          }, {\n            from: -1,\n            to: -3,\n            points: [84.4500136264535, 47.3573511783532, 94.4500136264535, 47.3573511783532, 104.45001362645351, 47.35735117835319, 154.4500136264535, 47.35735117835319]\n          }]\n        },\n        code: \"import torch import torch.nn as nn\\nimport torch.nn.functional as F\\nimport torch.optim as optim\\nfrom torchvision import datasets, transforms\\nimport argparse\\nimport time\\nimport os\\n\\n#setup training parameters\\nparser = argparse.ArgumentParser(description='PyTorch MNIST Training')\\nparser.add_argument('--batch-size', type=int, default=128, metavar='N',\\n                    help='input batch size for training (default: 128)')\\nparser.add_argument('--test-batch-size', type=int, default=128, metavar='N',\\n                    help='input batch size for testing (default: 128)')\\nparser.add_argument('--epochs', type=int, default=5, metavar='N',\\n                    help='number of epochs to train')\\nparser.add_argument('--lr', type=float, default=0.01, metavar='LR',\\n                    help='learning rate')\\nparser.add_argument('--no-cuda', action='store_true', default=False,\\n                    help='disables CUDA training')\\nparser.add_argument('--seed', type=int, default=1, metavar='S',\\n                    help='random seed (default: 1)')\\nparser.add_argument('--model-dir', default='./model-mnist-cnn',\\n                    help='directory of model for saving checkpoint')\\nparser.add_argument('--load-model', action='store_true', default=False,\\n                    help='load model or not')\\n    \\nargs = parser.parse_args(args=[]) \\n    \\nif not os.path.exists(args.model_dir):\\n    os.makedirs(args.model_dir)\\n            \\n# Judge cuda is available or not\\nuse_cuda = not args.no_cuda and torch.cuda.is_available()\\n#device = torch.device(\\\"cuda\\\" if use_cuda else \\\"cpu\\\")\\ndevice = torch.device(\\\"cpu\\\")\\n    \\ntorch.manual_seed(args.seed)\\nkwargs = {'num_workers': 1, 'pin_memory': True} if use_cuda else {}\\n    \\n# Setup data loader\\ntransform=transforms.Compose([\\n        transforms.ToTensor(),\\n        transforms.Normalize((0.1307,), (0.3081,))\\n        ])\\ntrainset = datasets.MNIST('data', train=True, download=True,\\n                    transform=transform)\\ntestset = datasets.MNIST('data', train=False,\\n                    transform=transform)\\ntrain_loader = torch.utils.data.DataLoader(trainset,batch_size=args.batch_size, shuffle=True,**kwargs)\\ntest_loader = torch.utils.data.DataLoader(testset,batch_size=args.test_batch_size, shuffle=False, **kwargs)\\n    \\n    \\n# Define CNN\\nclass Net(nn.Module):\\n    def __init__(self):\\n        super(Net, self).__init__()\\n        # in_channels:1  out_channels:32  kernel_size:3  stride:1\\n        self.conv1 = nn.Conv2d(1, 32, 3, 1)\\n        # in_channels:32  out_channels:64  kernel_size:3  stride:1\\n        self.conv2 = nn.Conv2d(32, 64, 3, 1)\\n        self.fc1 = nn.Linear(9216, 128)\\n        self.fc2 = nn.Linear(128, 10)\\n    \\n    def forward(self, x):\\n        x = self.conv1(x)\\n        x = F.relu(x)\\n        x = self.conv2(x)\\n        x = F.relu(x)\\n        x = F.max_pool2d(x, 2)\\n        x = torch.flatten(x, 1)\\n        x = self.fc1(x)\\n        x = F.relu(x)\\n        x = self.fc2(x)\\n        output = F.log_softmax(x, dim=1)\\n        return output\\n    \\n    \\n    \\n# Train function\\ndef train(args, model, device, train_loader, optimizer, epoch):\\n    model.train()\\n    for batch_idx, (data, target) in enumerate(train_loader):\\n        data, target = data.to(device), target.to(device)\\n            \\n        #clear gradients\\n        optimizer.zero_grad()\\n            \\n        #compute loss\\n        loss = F.cross_entropy(model(data), target)\\n            \\n        #get gradients and update\\n        loss.backward()\\n        optimizer.step()\\n    \\n# Predict function\\ndef eval_test(model, device, test_loader):\\n    model.eval()\\n    test_loss = 0\\n    correct = 0\\n    with torch.no_grad():\\n        for data, target in test_loader:\\n            data, target = data.to(device), target.to(device)\\n            output = model(data)\\n            test_loss += F.cross_entropy(output, target, size_average=False).item()\\n            pred = output.max(1, keepdim=True)[1]\\n            correct += pred.eq(target.view_as(pred)).sum().item()\\n    test_loss /= len(test_loader.dataset)\\n    test_accuracy = correct / len(test_loader.dataset)\\n    return test_loss, test_accuracy\\n    \\n# Main function, train the initial model or load the model\\ndef main():\\n    model = Net().to(device)\\n    optimizer = optim.SGD(model.parameters(), lr=args.lr)\\n        \\n    if args.load_model:\\n        # Load model\\n        model.load_state_dict(torch.load(os.path.join(args.model_dir, 'final_model.pt')))\\n        trnloss, trnacc = eval_test(model, device, train_loader)\\n        tstloss, tstacc = eval_test(model, device, test_loader)\\n        print('trn_loss: {:.4f}, trn_acc: {:.2f}%'.format(trnloss, 100. * trnacc), end=', ')\\n        print('test_loss: {:.4f}, test_acc: {:.2f}%'.format(tstloss, 100. * tstacc))\\n            \\n    else:\\n        # Train initial model\\n        for epoch in range(1, args.epochs + 1):\\n            start_time = time.time()\\n    \\n            #training\\n            train(args, model, device, train_loader, optimizer, epoch)\\n    \\n            #get trnloss and testloss\\n            trnloss, trnacc = eval_test(model, device, train_loader)\\n            tstloss, tstacc = eval_test(model, device, test_loader)\\n    \\n            #print trnloss and testloss\\n            print('Epoch '+str(epoch)+': '+str(int(time.time()-start_time))+'s', end=', ')\\n            print('trn_loss: {:.4f}, trn_acc: {:.2f}%'.format(trnloss, 100. * trnacc), end=', ')\\n            print('test_loss: {:.4f}, test_acc: {:.2f}%'.format(tstloss, 100. * tstacc))\\n            \\n        #save model\\n        torch.save(model.state_dict(), os.path.join(args.model_dir, 'final_model.pt'))\\n    \\nif __name__ == '__main__':\\n    main()\\n   \\t\\t \"\n      }\n    };\n  },\n  methods: {\n    highlighter: function highlighter(code) {\n      return highlight(code, languages.js); // languages.<insert language> to return html with markup\n    },\n    getJson: function getJson() {\n      var _this = this;\n\n      axios({\n        method: \"get\",\n        url: \"/canvas/getJson/\" + localStorage.uid + \"/\" + localStorage.pid + \"/\",\n        responseType: \"stream\"\n      }).then(function (res) {\n        console.log(res.data); // not first time\n\n        if (res.data.status == 200) {\n          _this.canvas_data.file = res.data;\n\n          _this.renderJson();\n        } // first time\n        else if (res.data.status == 204) {} else {\n          alert(\"can not get user's json!\");\n        }\n      });\n    },\n    getPython: function getPython() {\n      var _this2 = this;\n\n      axios({\n        method: \"get\",\n        url: \"/canvas/getPython/\" + localStorage.uid + \"/\" + localStorage.pid + \"/\",\n        responseType: \"stream\"\n      }).then(function (res) {\n        console.log(res.data);\n\n        if (res.data.status == 200) {\n          _this2.canvas_data.code = res.code;\n        } else {\n          alert(\"can not get user's python!\");\n        }\n      });\n    },\n    download: function download() {\n      axios({\n        method: \"get\",\n        url: \"/canvas/download/\" + localStorage.uid + \"/\" + localStorage.pid + \"/\",\n        responseType: \"blob\"\n      }).then(function (res) {\n        console.log(res.data);\n\n        if (res.data.status == 200) {\n          var blob = new Blob([res], {\n            type: \"application/zip;charset-UTF-8\"\n          });\n          var url = URL.createObjectURL(blob);\n          var a = document.createElement(\"a\");\n          a.style.display = \"none\";\n          a.href = url;\n          a.download = \"projectttt.zip\";\n          a.click();\n          URL.revokeObjectURL(url);\n        } else {\n          alert(\"can not get user's json!\");\n        }\n      });\n    },\n    // Update json first, then send to backend and get python code\n    compile: function compile() {\n      var _this3 = this;\n\n      // Update json\n      this.getJson(); // console.log(this.canvasData.file);\n      // this.renderJson();\n      // console.log(this.canvasData.file);\n      // this.updateJson();\n      // console.log(this.canvasData.file);\n      // send json to backend\n      // this.canvasData.file = myDiagram.model.toJson();\n\n      var formData = new FormData();\n      formData.append(\"file\", this.canvasData.file);\n      axios({\n        method: \"post\",\n        url: \"/canvas/compile/\" + localStorage.uid + \"/\" + localStorage.pid + \"/\",\n        data: formData\n      }).then(function (res) {\n        console.log(res.data); // If compile successful 200, backend update database, frontend get data and reload\n\n        if (res.data.status == \"200\") {\n          _this3.getPython();\n\n          console.log(\"compile ok!\");\n        } // If complie fails 500, frontend alert error\n        else if (res.data.status == \"500\") {\n          alert(\"The network model is not valid!\");\n        }\n\n        location.replace(\"/canvas/\");\n      });\n    },\n    // Update Json accroding to user's operation\n    updateJson: function updateJson() {\n      document.getElementById(\"mySavedModel\").value = myDiagram.model.toJson();\n      myDiagram.isModified = false;\n    },\n    // Render Json on the canvas area\n    renderJson: function renderJson() {\n      myDiagram.model = go.Model.fromJson(document.getElementById(\"mySavedModel\").value);\n    },\n    // Render .py on the code area\n    renderCode: function renderCode() {},\n    // To make canvas tidy 200\n    layout: function layout() {\n      this.updateJson();\n      myDiagram.layoutDiagram(true);\n    },\n    // Go to train page 200\n    enterTrain: function enterTrain() {\n      location.replace(\"/train/\");\n    }\n  },\n  mounted: function mounted() {\n    // this.getJson();\n    // // this.updateJson();\n    // this.canvasData.file = JSON.stringify(this.canvasData.file);\n    // this.renderJson();\n    this.canvasData.file = JSON.stringify(this.canvasData.file);\n    this.compile(); // this.canvasData.file = JSON.stringify(this.canvasData.file);\n\n    var $ = go.GraphObject.make; // for conciseness in defining templates\n\n    var yellowgrad = $(go.Brush, \"Linear\", {\n      0: \"#bde0fe\",\n      1: \"#bde0fe\"\n    });\n    var greengrad = $(go.Brush, \"Linear\", {\n      0: \"#fdffb6\",\n      1: \"#fdffb6\"\n    });\n    var bluegrad = $(go.Brush, \"Linear\", {\n      0: \"#caffbf\",\n      1: \"#caffbf\"\n    });\n    var redgrad = $(go.Brush, \"Linear\", {\n      0: \"#ffadad\",\n      1: \"#ffadad\"\n    });\n    var whitegrad = $(go.Brush, \"Linear\", {\n      0: \"#E7C5FC\",\n      1: \"#E7C5FC\"\n    });\n    var bigfont = \"bold 15pt Helvetica, Arial, sans-serif\";\n    var smallfont = \"bold 13pt Helvetica, Arial, sans-serif\"; // Common text styling\n\n    function textStyle() {\n      return {\n        margin: 6,\n        wrap: go.TextBlock.WrapFit,\n        textAlign: \"center\",\n        editable: true,\n        font: bigfont\n      };\n    }\n\n    var myDiagram = $(go.Diagram, \"myDiagramDiv\", {\n      initialAutoScale: go.Diagram.Uniform,\n      \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\n      layout: $(go.LayeredDigraphLayout, {\n        isInitial: false,\n        isOngoing: false,\n        layerSpacing: 50\n      }),\n      \"undoManager.isEnabled\": true\n    });\n    var nodeSelectionAdornmentTemplate = $(go.Adornment, \"Auto\", $(go.Shape, {\n      fill: null,\n      stroke: \"#979dac\",\n      strokeWidth: 2,\n      strokeDashArray: [4, 2]\n    }), $(go.Placeholder)); // define the Node template\n\n    myDiagram.nodeTemplate = $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, // define the node's outer shape, which will surround the TextBlock\n    $(go.Shape, \"Rectangle\", {\n      fill: yellowgrad,\n      stroke: null,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true,\n      cursor: \"pointer\",\n      toEndSegmentLength: 50,\n      fromEndSegmentLength: 50\n    }), $(go.TextBlock, \"ReLU\", {\n      margin: 6,\n      font: bigfont,\n      editable: true,\n      minSize: new go.Size(40, NaN)\n    }, new go.Binding(\"text\", \"text\").makeTwoWay())); // Data\n\n    myDiagram.nodeTemplateMap.add(\"Data\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center,\n      margin: new go.Margin(0, 0, 0, 0)\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"Circle\", {\n      fill: bluegrad,\n      portId: \"\",\n      fromLinkable: true,\n      cursor: \"pointer\",\n      //fromEndSegmentLength: 40,\n      stroke: \"#74c69d\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"Data\", textStyle(), {\n      stroke: \"#2d6a4f\",\n      minSize: new go.Size(40, NaN)\n    }, new go.Binding(\"text\", \"text\").makeTwoWay())));\n    myDiagram.nodeTemplateMap.add(\"End\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"Circle\", {\n      fill: redgrad,\n      portId: \"\",\n      toLinkable: true,\n      cursor: \"pointer\",\n      fromEndSegmentLength: 40,\n      stroke: \"#df7373\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"End\", textStyle(), {\n      stroke: \"#ad2e24\",\n      minSize: new go.Size(40, NaN)\n    }, new go.Binding(\"text\", \"text\").makeTwoWay())));\n    myDiagram.nodeTemplateMap.add(\"ReLU\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"Ellipse\", {\n      fill: greengrad,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true,\n      cursor: \"pointer\",\n      fromEndSegmentLength: 40,\n      stroke: \"#ffd100\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"ReLU\", textStyle(), {\n      stroke: \"#e2711d\",\n      // locationSpot: go.Spot.Center,\n      //margin: new go.Margin(10, 0, 0, 0),\n      minSize: new go.Size(60, NaN)\n    }, new go.Binding(\"text\", \"text\").makeTwoWay())));\n    var reasonTemplate = $(go.Panel, $(go.Panel, \"Table\", {\n      maxSize: new go.Size(200, 999),\n      margin: new go.Margin(0, 3, 10, 3),\n      defaultAlignment: go.Spot.Center\n    }, $(go.RowColumnDefinition, {\n      column: 2,\n      width: 2\n    }), $(go.TextBlock, \"input = \", {\n      margin: new go.Margin(4, 0, 0, 0),\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      //stroke: \"whitesmoke\",\n      editable: true,\n      font: smallfont,\n      row: 2,\n      column: 0,\n      stroke: \"#3e5c76\"\n    }, new go.Binding(\"text\", \"text0\").makeTwoWay()), $(go.TextBlock, \"value\", {\n      margin: new go.Margin(4, 0, 0, 0),\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      //stroke: \"whitesmoke\",\n      editable: true,\n      stroke: \"#3e5c76\",\n      font: smallfont,\n      row: 2,\n      column: 1\n    }, new go.Binding(\"text\", \"text1\").makeTwoWay()), $(go.TextBlock, \"output = \", {\n      margin: new go.Margin(4, 0, 0, 0),\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      //stroke: \"whitesmoke\",\n      editable: true,\n      font: smallfont,\n      stroke: \"#3e5c76\",\n      row: 3,\n      column: 0\n    }, new go.Binding(\"text\", \"text2\").makeTwoWay()), $(go.TextBlock, \"value\", {\n      margin: new go.Margin(4, 0, 0, 9),\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      //stroke: \"whitesmoke\",\n      editable: true,\n      font: smallfont,\n      stroke: \"#3e5c76\",\n      row: 3,\n      column: 1\n    }, new go.Binding(\"text\", \"text3\").makeTwoWay())) // end Table Panel\n    );\n    myDiagram.nodeTemplateMap.add(\"FC\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"RoundedRectangle\", {\n      fill: yellowgrad,\n      stroke: \"#4ea8de\",\n      strokeWidth: 4,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true,\n      cursor: \"pointer\",\n      toEndSegmentLength: 50,\n      fromEndSegmentLength: 40\n    }), $(go.Panel, \"Vertical\", {\n      defaultAlignment: go.Spot.Center\n    }, $(go.TextBlock, \"FC\", textStyle(), {\n      stroke: \"#3e5c76\",\n      margin: new go.Margin(8, 0, 0, 0),\n      minSize: new go.Size(100, NaN) //maxSize: new go.Size(200, NaN)\n\n    }, new go.Binding(\"text\", \"text\").makeTwoWay()), $(go.Panel, \"Vertical\", {\n      defaultAlignment: go.Spot.TopLeft,\n      itemTemplate: reasonTemplate\n    }, new go.Binding(\"itemArray\", \"reasonsList\").makeTwoWay()))));\n    var linkSelectionAdornmentTemplate = $(go.Adornment, \"Link\", $(go.Shape, // isPanelMain declares that this Shape shares the Link.geometry\n    {\n      isPanelMain: true,\n      fill: null,\n      stroke: \"deepskyblue\",\n      strokeWidth: 2.5\n    }) // use selection object's strokeWidth\n    ); // replace the default Link template in the linkTemplateMap\n\n    myDiagram.linkTemplate = $(go.Link, // the whole link panel\n    {\n      selectable: true,\n      selectionAdornmentTemplate: linkSelectionAdornmentTemplate\n    }, new go.Binding(\"points\").makeTwoWay(), {\n      //curve: go.Link.Bezier,\n      toShortLength: 15\n    }, //new go.Binding(\"curviness\", \"curviness\"),\n    $(go.Shape, // the link shape\n    {\n      stroke: \"#979dac\",\n      strokeWidth: 2.5\n    }), $(go.Shape, // the arrowhead\n    {\n      toArrow: \"kite\",\n      fill: \"#979dac\",\n      stroke: null,\n      scale: 2\n    }));\n    myDiagram.nodeTemplateMap.add(\"RNN\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"RoundedRectangle\", {\n      fill: whitegrad,\n      stroke: \"#CF8BF9\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"RNN\\n(unavailable)\", textStyle(), {\n      margin: 9,\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      editable: true,\n      stroke: \"#560788\",\n      font: smallfont\n    }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n    ));\n    myDiagram.nodeTemplateMap.add(\"CNN\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"RoundedRectangle\", {\n      fill: whitegrad,\n      stroke: \"#CF8BF9\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"CNN\\n(unavailable)\", textStyle(), {\n      margin: 9,\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      editable: true,\n      stroke: \"#560788\",\n      font: smallfont\n    }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n    ));\n    myDiagram.nodeTemplateMap.add(\"LSTM\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"RoundedRectangle\", {\n      fill: whitegrad,\n      stroke: \"#CF8BF9\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"LSTM\\n(unavailable)\", textStyle(), {\n      margin: 9,\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      editable: true,\n      stroke: \"#560788\",\n      font: smallfont\n    }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n    ));\n    myDiagram.nodeTemplateMap.add(\"Softmax\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"RoundedRectangle\", {\n      fill: whitegrad,\n      stroke: \"#CF8BF9\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"Softmax\\n(unavailable)\", textStyle(), {\n      margin: 9,\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      editable: true,\n      stroke: \"#560788\",\n      font: smallfont\n    }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n    ));\n    myDiagram.nodeTemplateMap.add(\"Maximum Polling\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"RoundedRectangle\", {\n      fill: whitegrad,\n      stroke: \"#CF8BF9\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"Maximum\\nPolling\\n(unavailable)\", textStyle(), {\n      margin: 9,\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      editable: true,\n      stroke: \"#560788\",\n      font: smallfont\n    }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n    ));\n    var palette = $(go.Palette, \"myPaletteDiv\", // create a new Palette in the HTML DIV element\n    {\n      // share the template map with the Palette\n      nodeTemplateMap: myDiagram.nodeTemplateMap,\n      autoScale: go.Diagram.Uniform // everything always fits in viewport\n\n    });\n    palette.model.nodeDataArray = [{\n      category: \"Data\"\n    }, {\n      category: \"ReLU\"\n    }, {\n      category: \"FC\",\n      reasonsList: [{}]\n    }, {\n      category: \"End\"\n    }, {\n      category: \"CNN\"\n    }, {\n      category: \"RNN\"\n    }, {\n      category: \"LSTM\"\n    }, {\n      category: \"Softmax\"\n    }, {\n      category: \"Maximum Polling\"\n    }];\n    window.myDiagram = myDiagram;\n  }\n};","map":{"version":3,"mappings":";;;;;;;;AAwLA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,oBAApB,C,CAEA;;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAO,2CAAP,C,CAAoD;AAEpD;;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,+BAArC;AACA,OAAO,gCAAP;AACA,OAAO,qCAAP;AACA,OAAO,mCAAP,C,CAA4C;;AAE5C,eAAe;AACbC,MAAI,EAAE,YADO;AAGbC,YAAU,EAAE;AACVJ,eAAW,EAAXA;AADU,GAHC;AAObK,MAPa,kBAON;AACL,WAAO;AACLC,gBAAU,EAAE;AACVC,YAAI,EAAE;AACJ,mBAAO,iBADH;AAEJC,uBAAa,EAAE,CACb;AACEC,oBAAQ,EAAE,MADZ;AAEEC,eAAG,EAAE,CAAC,CAFR;AAGEC,eAAG,EAAE;AAHP,WADa,EAMb;AACEF,oBAAQ,EAAE,KADZ;AAEEC,eAAG,EAAE,CAAC,CAFR;AAGEC,eAAG,EAAE;AAHP,WANa,EAWb;AACEF,oBAAQ,EAAE,MADZ;AAEEC,eAAG,EAAE,CAAC,CAFR;AAGEC,eAAG,EAAE;AAHP,WAXa,EAgBb;AACEF,oBAAQ,EAAE,IADZ;AAEEG,uBAAW,EAAE,CAAC;AAAEC,mBAAK,EAAE,KAAT;AAAgBC,mBAAK,EAAE;AAAvB,aAAD,CAFf;AAGEJ,eAAG,EAAE,CAAC,CAHR;AAIEC,eAAG,EAAE;AAJP,WAhBa,CAFX;AAyBJI,uBAAa,EAAE,CACb;AACEC,gBAAI,EAAE,CAAC,CADT;AAEEC,cAAE,EAAE,CAAC,CAFP;AAGEC,kBAAM,EAAE,CACN,kBADM,EACc,iBADd,EACiC,kBADjC,EAEN,iBAFM,EAEa,gBAFb,EAE+B,gBAF/B,EAGN,gBAHM,EAGY,gBAHZ;AAHV,WADa,EAUb;AACEF,gBAAI,EAAE,CAAC,CADT;AAEEC,cAAE,EAAE,CAAC,CAFP;AAGEC,kBAAM,EAAE,CACN,iBADM,EACa,gBADb,EAC+B,iBAD/B,EAEN,gBAFM,EAEY,iBAFZ,EAE+B,iBAF/B,EAGN,iBAHM,EAGa,iBAHb;AAHV,WAVa,EAmBb;AACEF,gBAAI,EAAE,CAAC,CADT;AAEEC,cAAE,EAAE,CAAC,CAFP;AAGEC,kBAAM,EAAE,CACN,gBADM,EACY,gBADZ,EAC8B,gBAD9B,EAEN,gBAFM,EAEY,kBAFZ,EAEgC,iBAFhC,EAGN,iBAHM,EAGa,iBAHb;AAHV,WAnBa;AAzBX,SADI;AAwDVC,YAAI;AAxDM;AADP,KAAP;AA8MD,GAtNY;AAwNbC,SAAO,EAAE;AACPC,eADO,uBACKF,IADL,EACW;AAChB,aAAOlB,SAAS,CAACkB,IAAD,EAAOjB,SAAS,CAACoB,EAAjB,CAAhB,CADgB,CACsB;AACvC,KAHM;AAKPC,WALO,qBAKG;AAAA;;AACRzB,WAAK,CAAC;AACJ0B,cAAM,EAAE,KADJ;AAEJC,WAAG,EACD,qBAAqBC,YAAY,CAACC,GAAlC,GAAwC,GAAxC,GAA8CD,YAAY,CAACE,GAA3D,GAAiE,GAH/D;AAIJC,oBAAY,EAAE;AAJV,OAAD,CAAL,CAKGC,IALH,CAKQ,UAACC,GAAD,EAAS;AACfC,eAAO,CAACC,GAAR,CAAYF,GAAG,CAAC1B,IAAhB,EADe,CAEf;;AACA,YAAI0B,GAAG,CAAC1B,IAAJ,CAAS6B,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,eAAI,CAACC,WAAL,CAAiB5B,IAAjB,GAAwBwB,GAAG,CAAC1B,IAA5B;;AACA,eAAI,CAAC+B,UAAL;AACF,SAHA,CAIA;AAJA,aAKK,IAAIL,GAAG,CAAC1B,IAAJ,CAAS6B,MAAT,IAAmB,GAAvB,EAA4B,CACjC,CADK,MACE;AACLG,eAAK,CAAC,0BAAD,CAAL;AACF;AACD,OAjBD;AAkBD,KAxBM;AA0BPC,aA1BO,uBA0BK;AAAA;;AACVxC,WAAK,CAAC;AACJ0B,cAAM,EAAE,KADJ;AAEJC,WAAG,EACD,uBACAC,YAAY,CAACC,GADb,GAEA,GAFA,GAGAD,YAAY,CAACE,GAHb,GAIA,GAPE;AAQJC,oBAAY,EAAE;AARV,OAAD,CAAL,CASGC,IATH,CASQ,UAACC,GAAD,EAAS;AACfC,eAAO,CAACC,GAAR,CAAYF,GAAG,CAAC1B,IAAhB;;AACA,YAAI0B,GAAG,CAAC1B,IAAJ,CAAS6B,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,gBAAI,CAACC,WAAL,CAAiBhB,IAAjB,GAAwBY,GAAG,CAACZ,IAA5B;AACF,SAFA,MAEO;AACLkB,eAAK,CAAC,4BAAD,CAAL;AACF;AACD,OAhBD;AAiBD,KA5CM;AA8CPE,YA9CO,sBA8CI;AACTzC,WAAK,CAAC;AACJ0B,cAAM,EAAE,KADJ;AAEJC,WAAG,EACD,sBAAsBC,YAAY,CAACC,GAAnC,GAAyC,GAAzC,GAA+CD,YAAY,CAACE,GAA5D,GAAkE,GAHhE;AAIJC,oBAAY,EAAE;AAJV,OAAD,CAAL,CAKGC,IALH,CAKQ,UAACC,GAAD,EAAS;AACfC,eAAO,CAACC,GAAR,CAAYF,GAAG,CAAC1B,IAAhB;;AACA,YAAI0B,GAAG,CAAC1B,IAAJ,CAAS6B,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,cAAIM,IAAG,GAAI,IAAIC,IAAJ,CAAS,CAACV,GAAD,CAAT,EAAgB;AACzBW,gBAAI,EAAE;AADmB,WAAhB,CAAX;AAIA,cAAMjB,GAAE,GAAIkB,GAAG,CAACC,eAAJ,CAAoBJ,IAApB,CAAZ;AACA,cAAMK,IAAIC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAV;AACAF,WAAC,CAACG,KAAF,CAAQC,OAAR,GAAkB,MAAlB;AACAJ,WAAC,CAACK,IAAF,GAASzB,GAAT;AACAoB,WAAC,CAACN,QAAF,GAAa,gBAAb;AACAM,WAAC,CAACM,KAAF;AACAR,aAAG,CAACS,eAAJ,CAAoB3B,GAApB;AACF,SAZA,MAYO;AACLY,eAAK,CAAC,0BAAD,CAAL;AACF;AACD,OAtBD;AAuBD,KAtEM;AAwEP;AACAgB,WAzEO,qBAyEG;AAAA;;AACR;AACA,WAAK9B,OAAL,GAFQ,CAGR;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,UAAI+B,QAAO,GAAI,IAAIC,QAAJ,EAAf;AACAD,cAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,KAAKlD,UAAL,CAAgBC,IAAxC;AACAT,WAAK,CAAC;AACJ0B,cAAM,EAAE,MADJ;AAEJC,WAAG,EACD,qBAAqBC,YAAY,CAACC,GAAlC,GAAwC,GAAxC,GAA8CD,YAAY,CAACE,GAA3D,GAAiE,GAH/D;AAIJvB,YAAI,EAAEiD;AAJF,OAAD,CAAL,CAKGxB,IALH,CAKQ,UAACC,GAAD,EAAS;AACfC,eAAO,CAACC,GAAR,CAAYF,GAAG,CAAC1B,IAAhB,EADe,CAEf;;AACA,YAAI0B,GAAG,CAAC1B,IAAJ,CAAS6B,MAAT,IAAmB,KAAvB,EAA8B;AAC5B,gBAAI,CAACI,SAAL;;AACAN,iBAAO,CAACC,GAAR,CAAY,aAAZ;AACF,SAHA,CAIA;AAJA,aAKK,IAAIF,GAAG,CAAC1B,IAAJ,CAAS6B,MAAT,IAAmB,KAAvB,EAA8B;AACjCG,eAAK,CAAC,iCAAD,CAAL;AACF;;AACAoB,gBAAQ,CAACC,OAAT,CAAiB,UAAjB;AACD,OAjBD;AAkBD,KAzGM;AA2GP;AACAC,cA5GO,wBA4GM;AACXb,cAAQ,CAACc,cAAT,CAAwB,cAAxB,EAAwCC,KAAxC,GAAgDC,SAAS,CAACC,KAAV,CAAgBC,MAAhB,EAAhD;AACAF,eAAS,CAACG,UAAV,GAAuB,KAAvB;AACD,KA/GM;AAiHP;AACA7B,cAlHO,wBAkHM;AACX0B,eAAS,CAACC,KAAV,GAAkBhE,EAAE,CAACmE,KAAH,CAASC,QAAT,CAChBrB,QAAQ,CAACc,cAAT,CAAwB,cAAxB,EAAwCC,KADxB,CAAlB;AAGD,KAtHM;AAwHP;AACAO,cAzHO,wBAyHM,CAAE,CAzHR;AA2HP;AACAC,UA5HO,oBA4HE;AACP,WAAKV,UAAL;AACAG,eAAS,CAACQ,aAAV,CAAwB,IAAxB;AACD,KA/HM;AAiIP;AACAC,cAlIO,wBAkIM;AACXd,cAAQ,CAACC,OAAT,CAAiB,SAAjB;AACD;AApIM,GAxNI;AA+Vbc,SA/Va,qBA+VH;AACR;AACA;AACA;AACA;AACA,SAAKlE,UAAL,CAAgBC,IAAhB,GAAuBkE,IAAI,CAACC,SAAL,CAAe,KAAKpE,UAAL,CAAgBC,IAA/B,CAAvB;AACA,SAAK8C,OAAL,GANQ,CAOR;;AAEA,QAAMsB,IAAI5E,EAAE,CAAC6E,WAAH,CAAeC,IAAzB,CATQ,CASuB;;AAC/B,QAAIC,UAAS,GAAIH,CAAC,CAAC5E,EAAE,CAACgF,KAAJ,EAAW,QAAX,EAAqB;AACrC,SAAG,SADkC;AAErC,SAAG;AAFkC,KAArB,CAAlB;AAIA,QAAIC,SAAQ,GAAIL,CAAC,CAAC5E,EAAE,CAACgF,KAAJ,EAAW,QAAX,EAAqB;AACpC,SAAG,SADiC;AAEpC,SAAG;AAFiC,KAArB,CAAjB;AAIA,QAAIE,QAAO,GAAIN,CAAC,CAAC5E,EAAE,CAACgF,KAAJ,EAAW,QAAX,EAAqB;AACnC,SAAG,SADgC;AAEnC,SAAG;AAFgC,KAArB,CAAhB;AAIA,QAAIG,OAAM,GAAIP,CAAC,CAAC5E,EAAE,CAACgF,KAAJ,EAAW,QAAX,EAAqB;AAClC,SAAG,SAD+B;AAElC,SAAG;AAF+B,KAArB,CAAf;AAIA,QAAII,SAAQ,GAAIR,CAAC,CAAC5E,EAAE,CAACgF,KAAJ,EAAW,QAAX,EAAqB;AACpC,SAAG,SADiC;AAEpC,SAAG;AAFiC,KAArB,CAAjB;AAIA,QAAIK,OAAM,GAAI,wCAAd;AACA,QAAIC,SAAQ,GAAI,wCAAhB,CA/BQ,CAiCR;;AACA,aAASC,SAAT,GAAqB;AACnB,aAAO;AACLC,cAAM,EAAE,CADH;AAELC,YAAI,EAAEzF,EAAE,CAAC0F,SAAH,CAAaC,OAFd;AAGLC,iBAAS,EAAE,QAHN;AAILC,gBAAQ,EAAE,IAJL;AAKLC,YAAI,EAAET;AALD,OAAP;AAOF;;AAEA,QAAMtB,SAAQ,GAAIa,CAAC,CAAC5E,EAAE,CAAC+F,OAAJ,EAAa,cAAb,EAA6B;AAC9CC,sBAAgB,EAAEhG,EAAE,CAAC+F,OAAH,CAAWE,OADiB;AAE9C,+BAAyBjG,EAAE,CAACkG,WAAH,CAAeC,YAFM;AAG9C7B,YAAM,EAAEM,CAAC,CAAC5E,EAAE,CAACoG,oBAAJ,EAA0B;AACjCC,iBAAS,EAAE,KADsB;AAEjCC,iBAAS,EAAE,KAFsB;AAGjCC,oBAAY,EAAE;AAHmB,OAA1B,CAHqC;AAQ9C,+BAAyB;AARqB,KAA7B,CAAnB;AAWA,QAAIC,8BAA6B,GAAI5B,CAAC,CACpC5E,EAAE,CAACyG,SADiC,EAEpC,MAFoC,EAGpC7B,CAAC,CAAC5E,EAAE,CAAC0G,KAAJ,EAAW;AACVC,UAAI,EAAE,IADI;AAEVC,YAAM,EAAE,SAFE;AAGVC,iBAAW,EAAE,CAHH;AAIVC,qBAAe,EAAE,CAAC,CAAD,EAAI,CAAJ;AAJP,KAAX,CAHmC,EASpClC,CAAC,CAAC5E,EAAE,CAAC+G,WAAJ,CATmC,CAAtC,CAvDQ,CAmER;;AACAhD,aAAS,CAACiD,YAAV,GAAyBpC,CAAC,CACxB5E,EAAE,CAACiH,IADqB,EAExB,MAFwB,EAGxB;AACEC,kBAAY,EAAElH,EAAE,CAACmH,IAAH,CAAQC;AADxB,KAHwB,EAMxB,IAAIpH,EAAE,CAACqH,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCrH,EAAE,CAACsH,KAAH,CAASC,KAA3C,EAAkDC,UAAlD,CACExH,EAAE,CAACsH,KAAH,CAAS3C,SADX,CANwB,EASxB;AACE8C,gBAAU,EAAE,IADd;AAEEC,gCAA0B,EAAElB;AAF9B,KATwB,EAaxB;AACA5B,KAAC,CAAC5E,EAAE,CAAC0G,KAAJ,EAAW,WAAX,EAAwB;AACvBC,UAAI,EAAE5B,UADiB;AAEvB6B,YAAM,EAAE,IAFe;AAGvBe,YAAM,EAAE,EAHe;AAIvBC,kBAAY,EAAE,IAJS;AAKvBC,gBAAU,EAAE,IALW;AAMvBC,YAAM,EAAE,SANe;AAOvBC,wBAAkB,EAAE,EAPG;AAQvBC,0BAAoB,EAAE;AARC,KAAxB,CAduB,EAwBxBpD,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,MAFD,EAGC;AACEF,YAAM,EAAE,CADV;AAEEM,UAAI,EAAET,OAFR;AAGEQ,cAAQ,EAAE,IAHZ;AAIEoC,aAAO,EAAE,IAAIjI,EAAE,CAACkI,IAAP,CAAY,EAAZ,EAAgBC,GAAhB;AAJX,KAHD,EASC,IAAInI,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,MAAvB,EAA+BG,UAA/B,EATD,CAxBuB,CAA1B,CApEQ,CAwGR;;AACAzD,aAAS,CAACqE,eAAV,CAA0BC,GAA1B,CACE,MADF,EAEEzD,CAAC,CACC5E,EAAE,CAACiH,IADJ,EAEC,MAFD,EAGC;AACEC,kBAAY,EAAElH,EAAE,CAACmH,IAAH,CAAQC,MADxB;AAEE5B,YAAM,EAAE,IAAIxF,EAAE,CAACsI,MAAP,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AAFV,KAHD,EAOC,IAAItI,EAAE,CAACqH,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCrH,EAAE,CAACsH,KAAH,CAASC,KAA3C,EAAkDC,UAAlD,CACExH,EAAE,CAACsH,KAAH,CAAS3C,SADX,CAPD,EAUC;AACE8C,gBAAU,EAAE,IADd;AAEEC,gCAA0B,EAAElB;AAF9B,KAVD,EAcC5B,CAAC,CAAC5E,EAAE,CAAC0G,KAAJ,EAAW,QAAX,EAAqB;AACpBC,UAAI,EAAEzB,QADc;AAEpByC,YAAM,EAAE,EAFY;AAGpBC,kBAAY,EAAE,IAHM;AAIpBE,YAAM,EAAE,SAJY;AAKpB;AACAlB,YAAM,EAAE,SANY;AAQpBC,iBAAW,EAAE;AARO,KAArB,CAdF,EAwBCjC,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,MAFD,EAGCH,SAAS,EAHV,EAIC;AACEqB,YAAM,EAAE,SADV;AAEEqB,aAAO,EAAE,IAAIjI,EAAE,CAACkI,IAAP,CAAY,EAAZ,EAAgBC,GAAhB;AAFX,KAJD,EAQC,IAAInI,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,MAAvB,EAA+BG,UAA/B,EARD,CAxBF,CAFH;AAuCAzD,aAAS,CAACqE,eAAV,CAA0BC,GAA1B,CACE,KADF,EAEEzD,CAAC,CACC5E,EAAE,CAACiH,IADJ,EAEC,MAFD,EAGC;AACEC,kBAAY,EAAElH,EAAE,CAACmH,IAAH,CAAQC;AADxB,KAHD,EAMC,IAAIpH,EAAE,CAACqH,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCrH,EAAE,CAACsH,KAAH,CAASC,KAA3C,EAAkDC,UAAlD,CACExH,EAAE,CAACsH,KAAH,CAAS3C,SADX,CAND,EASC;AACE8C,gBAAU,EAAE,IADd;AAEEC,gCAA0B,EAAElB;AAF9B,KATD,EAaC5B,CAAC,CAAC5E,EAAE,CAAC0G,KAAJ,EAAW,QAAX,EAAqB;AACpBC,UAAI,EAAExB,OADc;AAEpBwC,YAAM,EAAE,EAFY;AAGpBE,gBAAU,EAAE,IAHQ;AAIpBC,YAAM,EAAE,SAJY;AAKpBE,0BAAoB,EAAE,EALF;AAMpBpB,YAAM,EAAE,SANY;AAOpBC,iBAAW,EAAE;AAPO,KAArB,CAbF,EAsBCjC,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,KAFD,EAGCH,SAAS,EAHV,EAIC;AACEqB,YAAM,EAAE,SADV;AAEEqB,aAAO,EAAE,IAAIjI,EAAE,CAACkI,IAAP,CAAY,EAAZ,EAAgBC,GAAhB;AAFX,KAJD,EAQC,IAAInI,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,MAAvB,EAA+BG,UAA/B,EARD,CAtBF,CAFH;AAqCAzD,aAAS,CAACqE,eAAV,CAA0BC,GAA1B,CACE,MADF,EAEEzD,CAAC,CACC5E,EAAE,CAACiH,IADJ,EAEC,MAFD,EAGC;AACEC,kBAAY,EAAElH,EAAE,CAACmH,IAAH,CAAQC;AADxB,KAHD,EAMC,IAAIpH,EAAE,CAACqH,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCrH,EAAE,CAACsH,KAAH,CAASC,KAA3C,EAAkDC,UAAlD,CACExH,EAAE,CAACsH,KAAH,CAAS3C,SADX,CAND,EASC;AACE8C,gBAAU,EAAE,IADd;AAEEC,gCAA0B,EAAElB;AAF9B,KATD,EAaC5B,CAAC,CAAC5E,EAAE,CAAC0G,KAAJ,EAAW,SAAX,EAAsB;AACrBC,UAAI,EAAE1B,SADe;AAErB0C,YAAM,EAAE,EAFa;AAGrBC,kBAAY,EAAE,IAHO;AAIrBC,gBAAU,EAAE,IAJS;AAKrBC,YAAM,EAAE,SALa;AAMrBE,0BAAoB,EAAE,EAND;AAOrBpB,YAAM,EAAE,SAPa;AAQrBC,iBAAW,EAAE;AARQ,KAAtB,CAbF,EAuBCjC,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,MAFD,EAGCH,SAAS,EAHV,EAIC;AACEqB,YAAM,EAAE,SADV;AAEE;AACA;AACAqB,aAAO,EAAE,IAAIjI,EAAE,CAACkI,IAAP,CAAY,EAAZ,EAAgBC,GAAhB;AAJX,KAJD,EAUC,IAAInI,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,MAAvB,EAA+BG,UAA/B,EAVD,CAvBF,CAFH;AAwCA,QAAIe,cAAa,GAAI3D,CAAC,CACpB5E,EAAE,CAACwI,KADiB,EAEpB5D,CAAC,CACC5E,EAAE,CAACwI,KADJ,EAEC,OAFD,EAGC;AACEC,aAAO,EAAE,IAAIzI,EAAE,CAACkI,IAAP,CAAY,GAAZ,EAAiB,GAAjB,CADX;AAEE1C,YAAM,EAAE,IAAIxF,EAAE,CAACsI,MAAP,CAAc,CAAd,EAAiB,CAAjB,EAAoB,EAApB,EAAwB,CAAxB,CAFV;AAGEI,sBAAgB,EAAE1I,EAAE,CAACmH,IAAH,CAAQC;AAH5B,KAHD,EAQCxC,CAAC,CAAC5E,EAAE,CAAC2I,mBAAJ,EAAyB;AACxBC,YAAM,EAAE,CADgB;AAExBC,WAAK,EAAE;AAFiB,KAAzB,CARF,EAYCjE,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,UAFD,EAGC;AACEF,YAAM,EAAE,IAAIxF,EAAE,CAACsI,MAAP,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CADV;AAEEG,aAAO,EAAE,IAAIzI,EAAE,CAACkI,IAAP,CAAY,GAAZ,EAAiBC,GAAjB,CAFX;AAGE1C,UAAI,EAAEzF,EAAE,CAAC0F,SAAH,CAAaC,OAHrB;AAIE;AACAE,cAAQ,EAAE,IALZ;AAMEC,UAAI,EAAER,SANR;AAOEwD,SAAG,EAAE,CAPP;AAQEF,YAAM,EAAE,CARV;AASEhC,YAAM,EAAE;AATV,KAHD,EAcC,IAAI5G,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,OAAvB,EAAgCG,UAAhC,EAdD,CAZF,EA6BC5C,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,OAFD,EAGC;AACEF,YAAM,EAAE,IAAIxF,EAAE,CAACsI,MAAP,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CADV;AAEEG,aAAO,EAAE,IAAIzI,EAAE,CAACkI,IAAP,CAAY,GAAZ,EAAiBC,GAAjB,CAFX;AAGE1C,UAAI,EAAEzF,EAAE,CAAC0F,SAAH,CAAaC,OAHrB;AAIE;AACAE,cAAQ,EAAE,IALZ;AAMEe,YAAM,EAAE,SANV;AAOEd,UAAI,EAAER,SAPR;AAQEwD,SAAG,EAAE,CARP;AASEF,YAAM,EAAE;AATV,KAHD,EAcC,IAAI5I,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,OAAvB,EAAgCG,UAAhC,EAdD,CA7BF,EA8CC5C,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,WAFD,EAGC;AACEF,YAAM,EAAE,IAAIxF,EAAE,CAACsI,MAAP,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CADV;AAEEG,aAAO,EAAE,IAAIzI,EAAE,CAACkI,IAAP,CAAY,GAAZ,EAAiBC,GAAjB,CAFX;AAGE1C,UAAI,EAAEzF,EAAE,CAAC0F,SAAH,CAAaC,OAHrB;AAIE;AACAE,cAAQ,EAAE,IALZ;AAMEC,UAAI,EAAER,SANR;AAOEsB,YAAM,EAAE,SAPV;AAQEkC,SAAG,EAAE,CARP;AASEF,YAAM,EAAE;AATV,KAHD,EAcC,IAAI5I,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,OAAvB,EAAgCG,UAAhC,EAdD,CA9CF,EA+DC5C,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,OAFD,EAGC;AACEF,YAAM,EAAE,IAAIxF,EAAE,CAACsI,MAAP,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CADV;AAEEG,aAAO,EAAE,IAAIzI,EAAE,CAACkI,IAAP,CAAY,GAAZ,EAAiBC,GAAjB,CAFX;AAGE1C,UAAI,EAAEzF,EAAE,CAAC0F,SAAH,CAAaC,OAHrB;AAIE;AACAE,cAAQ,EAAE,IALZ;AAMEC,UAAI,EAAER,SANR;AAOEsB,YAAM,EAAE,SAPV;AAQEkC,SAAG,EAAE,CARP;AASEF,YAAM,EAAE;AATV,KAHD,EAcC,IAAI5I,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,OAAvB,EAAgCG,UAAhC,EAdD,CA/DF,CAFmB,CAiFlB;AAjFkB,KAAtB;AAoFAzD,aAAS,CAACqE,eAAV,CAA0BC,GAA1B,CACE,IADF,EAEEzD,CAAC,CACC5E,EAAE,CAACiH,IADJ,EAEC,MAFD,EAGC;AACEC,kBAAY,EAAElH,EAAE,CAACmH,IAAH,CAAQC;AADxB,KAHD,EAMC,IAAIpH,EAAE,CAACqH,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCrH,EAAE,CAACsH,KAAH,CAASC,KAA3C,EAAkDC,UAAlD,CACExH,EAAE,CAACsH,KAAH,CAAS3C,SADX,CAND,EASC;AACE8C,gBAAU,EAAE,IADd;AAEEC,gCAA0B,EAAElB;AAF9B,KATD,EAaC5B,CAAC,CAAC5E,EAAE,CAAC0G,KAAJ,EAAW,kBAAX,EAA+B;AAC9BC,UAAI,EAAE5B,UADwB;AAE9B6B,YAAM,EAAE,SAFsB;AAG9BC,iBAAW,EAAE,CAHiB;AAI9Bc,YAAM,EAAE,EAJsB;AAK9BC,kBAAY,EAAE,IALgB;AAM9BC,gBAAU,EAAE,IANkB;AAO9BC,YAAM,EAAE,SAPsB;AAQ9BC,wBAAkB,EAAE,EARU;AAS9BC,0BAAoB,EAAE;AATQ,KAA/B,CAbF,EAwBCpD,CAAC,CACC5E,EAAE,CAACwI,KADJ,EAEC,UAFD,EAGC;AACEE,sBAAgB,EAAE1I,EAAE,CAACmH,IAAH,CAAQC;AAD5B,KAHD,EAOCxC,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,IAFD,EAGCH,SAAS,EAHV,EAIC;AACEqB,YAAM,EAAE,SADV;AAEEpB,YAAM,EAAE,IAAIxF,EAAE,CAACsI,MAAP,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAFV;AAGEL,aAAO,EAAE,IAAIjI,EAAE,CAACkI,IAAP,CAAY,GAAZ,EAAiBC,GAAjB,CAHX,CAIE;;AAJF,KAJD,EAUC,IAAInI,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,MAAvB,EAA+BG,UAA/B,EAVD,CAPF,EAoBC5C,CAAC,CACC5E,EAAE,CAACwI,KADJ,EAEC,UAFD,EAGC;AACEE,sBAAgB,EAAE1I,EAAE,CAACmH,IAAH,CAAQ4B,OAD5B;AAEEC,kBAAY,EAAET;AAFhB,KAHD,EAOC,IAAIvI,EAAE,CAACqH,OAAP,CAAe,WAAf,EAA4B,aAA5B,EAA2CG,UAA3C,EAPD,CApBF,CAxBF,CAFH;AA2DA,QAAIyB,8BAA6B,GAAIrE,CAAC,CACpC5E,EAAE,CAACyG,SADiC,EAEpC,MAFoC,EAGpC7B,CAAC,CACC5E,EAAE,CAAC0G,KADJ,EAEC;AACA;AACEwC,iBAAW,EAAE,IADf;AAEEvC,UAAI,EAAE,IAFR;AAGEC,YAAM,EAAE,aAHV;AAIEC,iBAAW,EAAE;AAJf,KAHD,CAHmC,CAYlC;AAZkC,KAAtC,CA5WQ,CA0XR;;AACA9C,aAAS,CAACoF,YAAV,GAAyBvE,CAAC,CACxB5E,EAAE,CAACoJ,IADqB,EACf;AACT;AACE3B,gBAAU,EAAE,IADd;AAEEC,gCAA0B,EAAEuB;AAF9B,KAFwB,EAMxB,IAAIjJ,EAAE,CAACqH,OAAP,CAAe,QAAf,EAAyBG,UAAzB,EANwB,EAOxB;AACE;AACA6B,mBAAa,EAAE;AAFjB,KAPwB,EAWxB;AACAzE,KAAC,CACC5E,EAAE,CAAC0G,KADJ,EACW;AACV;AACEE,YAAM,EAAE,SADV;AAEEC,iBAAW,EAAE;AAFf,KAFD,CAZuB,EAmBxBjC,CAAC,CACC5E,EAAE,CAAC0G,KADJ,EACW;AACV;AACE4C,aAAO,EAAE,MADX;AAEE3C,UAAI,EAAE,SAFR;AAGEC,YAAM,EAAE,IAHV;AAIE2C,WAAK,EAAE;AAJT,KAFD,CAnBuB,CAA1B;AA8BAxF,aAAS,CAACqE,eAAV,CAA0BC,GAA1B,CACE,KADF,EAEEzD,CAAC,CACC5E,EAAE,CAACiH,IADJ,EAEC,MAFD,EAGC;AACEC,kBAAY,EAAElH,EAAE,CAACmH,IAAH,CAAQC;AADxB,KAHD,EAMC,IAAIpH,EAAE,CAACqH,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCrH,EAAE,CAACsH,KAAH,CAASC,KAA3C,EAAkDC,UAAlD,CACExH,EAAE,CAACsH,KAAH,CAAS3C,SADX,CAND,EASC;AACE8C,gBAAU,EAAE,IADd;AAEEC,gCAA0B,EAAElB;AAF9B,KATD,EAaC5B,CAAC,CAAC5E,EAAE,CAAC0G,KAAJ,EAAW,kBAAX,EAA+B;AAC9BC,UAAI,EAAEvB,SADwB;AAE9BwB,YAAM,EAAE,SAFsB;AAG9BC,iBAAW,EAAE;AAHiB,KAA/B,CAbF,EAkBCjC,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,oBAFD,EAGCH,SAAS,EAHV,EAIC;AACEC,YAAM,EAAE,CADV;AAEEiD,aAAO,EAAE,IAAIzI,EAAE,CAACkI,IAAP,CAAY,GAAZ,EAAiBC,GAAjB,CAFX;AAGE1C,UAAI,EAAEzF,EAAE,CAAC0F,SAAH,CAAaC,OAHrB;AAIEE,cAAQ,EAAE,IAJZ;AAKEe,YAAM,EAAE,SALV;AAMEd,UAAI,EAAER;AANR,KAJD,EAYC,IAAItF,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,MAAvB,EAA+BG,UAA/B,EAZD,CAlBF,CAgCC;AAhCD,KAFH;AAsCAzD,aAAS,CAACqE,eAAV,CAA0BC,GAA1B,CACE,KADF,EAEEzD,CAAC,CACC5E,EAAE,CAACiH,IADJ,EAEC,MAFD,EAGC;AACEC,kBAAY,EAAElH,EAAE,CAACmH,IAAH,CAAQC;AADxB,KAHD,EAMC,IAAIpH,EAAE,CAACqH,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCrH,EAAE,CAACsH,KAAH,CAASC,KAA3C,EAAkDC,UAAlD,CACExH,EAAE,CAACsH,KAAH,CAAS3C,SADX,CAND,EASC;AACE8C,gBAAU,EAAE,IADd;AAEEC,gCAA0B,EAAElB;AAF9B,KATD,EAaC5B,CAAC,CAAC5E,EAAE,CAAC0G,KAAJ,EAAW,kBAAX,EAA+B;AAC9BC,UAAI,EAAEvB,SADwB;AAE9BwB,YAAM,EAAE,SAFsB;AAG9BC,iBAAW,EAAE;AAHiB,KAA/B,CAbF,EAkBCjC,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,oBAFD,EAGCH,SAAS,EAHV,EAIC;AACEC,YAAM,EAAE,CADV;AAEEiD,aAAO,EAAE,IAAIzI,EAAE,CAACkI,IAAP,CAAY,GAAZ,EAAiBC,GAAjB,CAFX;AAGE1C,UAAI,EAAEzF,EAAE,CAAC0F,SAAH,CAAaC,OAHrB;AAIEE,cAAQ,EAAE,IAJZ;AAKEe,YAAM,EAAE,SALV;AAMEd,UAAI,EAAER;AANR,KAJD,EAYC,IAAItF,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,MAAvB,EAA+BG,UAA/B,EAZD,CAlBF,CAgCC;AAhCD,KAFH;AAsCAzD,aAAS,CAACqE,eAAV,CAA0BC,GAA1B,CACE,MADF,EAEEzD,CAAC,CACC5E,EAAE,CAACiH,IADJ,EAEC,MAFD,EAGC;AACEC,kBAAY,EAAElH,EAAE,CAACmH,IAAH,CAAQC;AADxB,KAHD,EAMC,IAAIpH,EAAE,CAACqH,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCrH,EAAE,CAACsH,KAAH,CAASC,KAA3C,EAAkDC,UAAlD,CACExH,EAAE,CAACsH,KAAH,CAAS3C,SADX,CAND,EASC;AACE8C,gBAAU,EAAE,IADd;AAEEC,gCAA0B,EAAElB;AAF9B,KATD,EAaC5B,CAAC,CAAC5E,EAAE,CAAC0G,KAAJ,EAAW,kBAAX,EAA+B;AAC9BC,UAAI,EAAEvB,SADwB;AAE9BwB,YAAM,EAAE,SAFsB;AAG9BC,iBAAW,EAAE;AAHiB,KAA/B,CAbF,EAkBCjC,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,qBAFD,EAGCH,SAAS,EAHV,EAIC;AACEC,YAAM,EAAE,CADV;AAEEiD,aAAO,EAAE,IAAIzI,EAAE,CAACkI,IAAP,CAAY,GAAZ,EAAiBC,GAAjB,CAFX;AAGE1C,UAAI,EAAEzF,EAAE,CAAC0F,SAAH,CAAaC,OAHrB;AAIEE,cAAQ,EAAE,IAJZ;AAKEe,YAAM,EAAE,SALV;AAMEd,UAAI,EAAER;AANR,KAJD,EAYC,IAAItF,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,MAAvB,EAA+BG,UAA/B,EAZD,CAlBF,CAgCC;AAhCD,KAFH;AAsCAzD,aAAS,CAACqE,eAAV,CAA0BC,GAA1B,CACE,SADF,EAEEzD,CAAC,CACC5E,EAAE,CAACiH,IADJ,EAEC,MAFD,EAGC;AACEC,kBAAY,EAAElH,EAAE,CAACmH,IAAH,CAAQC;AADxB,KAHD,EAMC,IAAIpH,EAAE,CAACqH,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCrH,EAAE,CAACsH,KAAH,CAASC,KAA3C,EAAkDC,UAAlD,CACExH,EAAE,CAACsH,KAAH,CAAS3C,SADX,CAND,EASC;AACE8C,gBAAU,EAAE,IADd;AAEEC,gCAA0B,EAAElB;AAF9B,KATD,EAaC5B,CAAC,CAAC5E,EAAE,CAAC0G,KAAJ,EAAW,kBAAX,EAA+B;AAC9BC,UAAI,EAAEvB,SADwB;AAE9BwB,YAAM,EAAE,SAFsB;AAG9BC,iBAAW,EAAE;AAHiB,KAA/B,CAbF,EAkBCjC,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,wBAFD,EAGCH,SAAS,EAHV,EAIC;AACEC,YAAM,EAAE,CADV;AAEEiD,aAAO,EAAE,IAAIzI,EAAE,CAACkI,IAAP,CAAY,GAAZ,EAAiBC,GAAjB,CAFX;AAGE1C,UAAI,EAAEzF,EAAE,CAAC0F,SAAH,CAAaC,OAHrB;AAIEE,cAAQ,EAAE,IAJZ;AAKEe,YAAM,EAAE,SALV;AAMEd,UAAI,EAAER;AANR,KAJD,EAYC,IAAItF,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,MAAvB,EAA+BG,UAA/B,EAZD,CAlBF,CAgCC;AAhCD,KAFH;AAsCAzD,aAAS,CAACqE,eAAV,CAA0BC,GAA1B,CACE,iBADF,EAEEzD,CAAC,CACC5E,EAAE,CAACiH,IADJ,EAEC,MAFD,EAGC;AACEC,kBAAY,EAAElH,EAAE,CAACmH,IAAH,CAAQC;AADxB,KAHD,EAMC,IAAIpH,EAAE,CAACqH,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCrH,EAAE,CAACsH,KAAH,CAASC,KAA3C,EAAkDC,UAAlD,CACExH,EAAE,CAACsH,KAAH,CAAS3C,SADX,CAND,EASC;AACE8C,gBAAU,EAAE,IADd;AAEEC,gCAA0B,EAAElB;AAF9B,KATD,EAaC5B,CAAC,CAAC5E,EAAE,CAAC0G,KAAJ,EAAW,kBAAX,EAA+B;AAC9BC,UAAI,EAAEvB,SADwB;AAE9BwB,YAAM,EAAE,SAFsB;AAG9BC,iBAAW,EAAE;AAHiB,KAA/B,CAbF,EAkBCjC,CAAC,CACC5E,EAAE,CAAC0F,SADJ,EAEC,iCAFD,EAGCH,SAAS,EAHV,EAIC;AACEC,YAAM,EAAE,CADV;AAEEiD,aAAO,EAAE,IAAIzI,EAAE,CAACkI,IAAP,CAAY,GAAZ,EAAiBC,GAAjB,CAFX;AAGE1C,UAAI,EAAEzF,EAAE,CAAC0F,SAAH,CAAaC,OAHrB;AAIEE,cAAQ,EAAE,IAJZ;AAKEe,YAAM,EAAE,SALV;AAMEd,UAAI,EAAER;AANR,KAJD,EAYC,IAAItF,EAAE,CAACqH,OAAP,CAAe,MAAf,EAAuB,MAAvB,EAA+BG,UAA/B,EAZD,CAlBF,CAgCC;AAhCD,KAFH;AAsCA,QAAIgC,OAAM,GAAI5E,CAAC,CACb5E,EAAE,CAACyJ,OADU,EAEb,cAFa,EAEG;AAChB;AACE;AACArB,qBAAe,EAAErE,SAAS,CAACqE,eAF7B;AAGEsB,eAAS,EAAE1J,EAAE,CAAC+F,OAAH,CAAWE,OAHxB,CAGiC;;AAHjC,KAHa,CAAf;AAUAuD,WAAO,CAACxF,KAAR,CAAcvD,aAAd,GAA8B,CAC5B;AACEC,cAAQ,EAAE;AADZ,KAD4B,EAI5B;AACEA,cAAQ,EAAE;AADZ,KAJ4B,EAO5B;AACEA,cAAQ,EAAE,IADZ;AAEEG,iBAAW,EAAE,CAAC,EAAD;AAFf,KAP4B,EAW5B;AACEH,cAAQ,EAAE;AADZ,KAX4B,EAc5B;AACEA,cAAQ,EAAE;AADZ,KAd4B,EAiB5B;AACEA,cAAQ,EAAE;AADZ,KAjB4B,EAoB5B;AACEA,cAAQ,EAAE;AADZ,KApB4B,EAuB5B;AACEA,cAAQ,EAAE;AADZ,KAvB4B,EA0B5B;AACEA,cAAQ,EAAE;AADZ,KA1B4B,CAA9B;AA+BAiJ,UAAM,CAAC5F,SAAP,GAAmBA,SAAnB;AACD;AAh+BY,CAAf","names":["axios","go","PrismEditor","highlight","languages","name","components","data","canvasData","file","nodeDataArray","category","key","loc","reasonsList","text1","text3","linkDataArray","from","to","points","code","methods","highlighter","js","getJson","method","url","localStorage","uid","pid","responseType","then","res","console","log","status","canvas_data","renderJson","alert","getPython","download","blob","Blob","type","URL","createObjectURL","a","document","createElement","style","display","href","click","revokeObjectURL","compile","formData","FormData","append","location","replace","updateJson","getElementById","value","myDiagram","model","toJson","isModified","Model","fromJson","renderCode","layout","layoutDiagram","enterTrain","mounted","JSON","stringify","$","GraphObject","make","yellowgrad","Brush","greengrad","bluegrad","redgrad","whitegrad","bigfont","smallfont","textStyle","margin","wrap","TextBlock","WrapFit","textAlign","editable","font","Diagram","initialAutoScale","Uniform","LinkingTool","ForwardsOnly","LayeredDigraphLayout","isInitial","isOngoing","layerSpacing","nodeSelectionAdornmentTemplate","Adornment","Shape","fill","stroke","strokeWidth","strokeDashArray","Placeholder","nodeTemplate","Node","locationSpot","Spot","Center","Binding","Point","parse","makeTwoWay","selectable","selectionAdornmentTemplate","portId","fromLinkable","toLinkable","cursor","toEndSegmentLength","fromEndSegmentLength","minSize","Size","NaN","nodeTemplateMap","add","Margin","reasonTemplate","Panel","maxSize","defaultAlignment","RowColumnDefinition","column","width","row","TopLeft","itemTemplate","linkSelectionAdornmentTemplate","isPanelMain","linkTemplate","Link","toShortLength","toArrow","scale","palette","Palette","autoScale","window"],"sourceRoot":"","sources":["/Users/wanghaonan/Documents/GitHub/Comp208-Neural-Lego/frontend/src/views/CanvasView.vue"],"sourcesContent":["<template>\n  <div id=\"page-top\" class=\"body\">\n    <!-- Page Wrapper -->\n    <div id=\"wrapper\">\n\n        <!-- Sidebar -->\n        <ul class=\"navbar-nav bg-gradient-primary sidebar sidebar-dark accordion\" id=\"accordionSidebar\">\n\n            <!-- Sidebar - Brand -->\n\n            <a class=\"sidebar-brand d-flex align-items-center justify-content-center\">\n                <!-- <div class=\"sidebar-brand-icon rotate-n-15\">\n                    <i class=\"fas fa-laugh-wink\"></i>\n                </div> -->\n                <div class=\"sidebar-brand-text mx-3\">NEURAL LEGO</div>\n            </a>\n\n            <!-- Divider -->\n            <hr class=\"sidebar-divider my-0\">\n\n            <!-- Nav Item - Dashboard -->\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"/profile\">\n                    <i class=\"fas fa-fw fa-user\"></i>\n                    <span>User</span></a>\n            </li>\n\n            <!-- Divider -->\n            <hr class=\"sidebar-divider my-0\">\n\n            <!-- Nav Item - Dashboard -->\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"/project\">\n                    <i class=\"fas fa-fw fa-folder\"></i>\n                    <span>Project</span></a>\n            </li>\n\n            <!-- Divider -->\n            <hr class=\"sidebar-divider my-0\">\n\n            <!-- Nav Item - Dashboard -->\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"/template\">\n                    <i class=\"fas fa-fw fa-table\"></i>\n                    <span>Template</span></a>\n            </li>\n\n\n            <hr class=\"sidebar-divider my-0\">\n\n            <!-- Nav Item - Dashboard -->\n            <li class=\"nav-item active\">\n                <a class=\"nav-link\" href=\"draggable.html\">\n                    <i class=\"fas fa-fw fa-palette\"></i>\n                    <span>Canvas</span></a>\n            </li>\n\n\n            <hr class=\"sidebar-divider my-0\">\n\n            <!-- Nav Item - Dashboard -->\n            <li class=\"nav-item \">\n                <a class=\"nav-link\" href=\"home.html\">\n                    <i class=\"fas fa-fw fa-arrow-circle-left\"></i>\n                    <span>Log out</span></a>\n            </li>\n            <!-- Divider -->\n            <hr class=\"sidebar-divider d-none d-md-block\">\n        </ul>\n        <!-- End of Sidebar -->\n\n        <!-- Content Wrapper -->\n        <div id=\"content-wrapper\" class=\"d-flex flex-column\">\n\n            <!-- Main Content -->\n            <div id=\"content\">\n\n                <!-- Topbar -->\n                <nav class=\"navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow\">\n\n                    <!-- Sidebar Toggle (Topbar) -->\n                    <button id=\"sidebarToggleTop\" class=\"btn btn-link d-md-none rounded-circle mr-3\">\n                        <i class=\"fa fa-bars\"></i>\n                    </button>\n\n                    <!-- Topbar Search -->\n                    <form class=\"d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search\">\n                        <div class=\"input-group\">\n                            <input type=\"text\" class=\"form-control bg-light border-0 small\" placeholder=\"Search for...\" aria-label=\"Search\" aria-describedby=\"basic-addon2\">\n                            <div class=\"input-group-append\">\n                                <button class=\"btn btn-primary\" type=\"button\">\n                                    <i class=\"fas fa-search fa-sm\"></i>\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n\n                    <!-- Topbar Navbar -->\n                    <ul class=\"navbar-nav ml-auto\">\n\n                        <!-- Nav Item - Search Dropdown (Visible Only XS) -->\n                        <li class=\"nav-item dropdown no-arrow d-sm-none\">\n                            <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"searchDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                <i class=\"fas fa-search fa-fw\"></i>\n                            </a>\n                            <!-- Dropdown - Messages -->\n                            <div class=\"dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in\" aria-labelledby=\"searchDropdown\">\n                                <form class=\"form-inline mr-auto w-100 navbar-search\">\n                                    <div class=\"input-group\">\n                                        <input type=\"text\" class=\"form-control bg-light border-0 small\" placeholder=\"Search for...\" aria-label=\"Search\" aria-describedby=\"basic-addon2\">\n                                        <div class=\"input-group-append\">\n                                            <button class=\"btn btn-primary\" type=\"button\">\n                                                <i class=\"fas fa-search fa-sm\"></i>\n                                            </button>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </li>\n\n                    </ul>\n\n                </nav>\n                <!-- End of Topbar -->\n\n                <div id=\"allSampleContent\" class=\"p-4 w-full\">\n                    \n\n                    <div id=\"sample\">\n\n                        <div style=\"width: 100%; margin-bottom: 10px;display: flex\">\n                            <div id=\"myPaletteDiv\" style=\"width: 150px; margin-right: 10px; border: solid 4px #82929B\"></div>\n\n                            <div id=\"myDiagramDiv_1\" style=\"width: 200px;margin-right: 10px;height: 600px;  border: solid 4px #82929B\"></div>\n                            <div id=\"myDiagramDiv_2\" style=\"flex-grow:1;height: 600px; border: solid 4px #82929B\"></div>\n                        </div>\n\n                        <button class=\"btn btn-primary\" id=\"SaveButton\" onclick=\"save()\">Save</button>\n                        <button class=\"btn btn-primary\" onclick=\"load()\">Load</button>\n                        <button class=\"btn btn-primary\" onclick=\"layout()\">Layout</button>\n                        <button class=\"btn btn-primary\">Compile</button>\n                        <a href=\"/train\"><button class=\"btn btn-primary\">Train</button></a>\n                        <br />\n                        <textarea id=\"mySavedModel\" style=\"width:100%;height:300px\">{ \"class\": \"GraphLinksModel\",\n\"copiesArrays\": true,\n\"copiesArrayObjects\": true,\n\"nodeDataArray\": [ {\"category\":\"Data\", \"reasonsList\":[ {} ], \"key\":-2, \"loc\":\"-99.10220015417542 -20.151221229488044\"} ],\n\"linkDataArray\": []}\n            </textarea>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n        <!-- End of Content Wrapper -->\n\n    </div>\n    <!-- End of Page Wrapper -->\n\n    <!-- Logout Modal-->\n    <div class=\"modal fade\" id=\"logoutModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\" role=\"document\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\" id=\"exampleModalLabel\">Ready to Leave?</h5>\n                    <button class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">×</span>\n                    </button>\n                </div>\n                <div class=\"modal-body\">Select \"Logout\" below if you are ready to end your current session.</div>\n                <div class=\"modal-footer\">\n                    <button class=\"btn btn-secondary\" type=\"button\" data-dismiss=\"modal\">Cancel</button>\n                    <a class=\"btn btn-primary\" href=\"login.html\">Logout</a>\n                </div>\n            </div>\n        </div>\n    </div>\n\n  </div>\n</template>\n\n\n\n<script>\nimport axios from \"axios\";\nimport * as go from \"../../public/go.js\";\n\n//import Prism Editor\nimport { PrismEditor } from \"vue-prism-editor\";\nimport \"vue-prism-editor/dist/prismeditor.min.css\"; // import the styles somewhere\n\n// import highlighting library (you can use any library you want just return html string)\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-javascript\";\nimport \"prismjs/themes/prism-twilight.css\"; // import syntax highlighting styles\n\nexport default {\n  name: \"CanvasView\",\n\n  components: {\n    PrismEditor,\n  },\n\n  data() {\n    return {\n      canvasData: {\n        file: {\n          class: \"GraphLinksModel\",\n          nodeDataArray: [\n            {\n              category: \"Data\",\n              key: -1,\n              loc: \"42.22500681322674 47.35735117835321\",\n            },\n            {\n              category: \"End\",\n              key: -4,\n              loc: \"567.1497069414404 47.35735117835318\",\n            },\n            {\n              category: \"ReLU\",\n              key: -2,\n              loc: \"403.0334278716728 47.357351178353184\",\n            },\n            {\n              category: \"FC\",\n              reasonsList: [{ text1: \"512\", text3: \"128\" }],\n              key: -3,\n              loc: \"216.57893005138874 47.357351178353184\",\n            },\n          ],\n          linkDataArray: [\n            {\n              from: -3,\n              to: -2,\n              points: [\n                278.70784647632394, 47.35735117835319, 318.70784647632394,\n                47.35735117835319, 338.707846476324, 47.3573511783532,\n                348.707846476324, 47.3573511783532,\n              ],\n            },\n            {\n              from: -2,\n              to: -4,\n              points: [\n                457.3590092670217, 47.3573511783532, 497.3590092670217,\n                47.3573511783532, 517.3590092670217, 47.35735117835319,\n                527.3590092670217, 47.35735117835319,\n              ],\n            },\n            {\n              from: -1,\n              to: -3,\n              points: [\n                84.4500136264535, 47.3573511783532, 94.4500136264535,\n                47.3573511783532, 104.45001362645351, 47.35735117835319,\n                154.4500136264535, 47.35735117835319,\n              ],\n            },\n          ],\n        },\n        code: `import torch import torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torchvision import datasets, transforms\nimport argparse\nimport time\nimport os\n\n#setup training parameters\nparser = argparse.ArgumentParser(description='PyTorch MNIST Training')\nparser.add_argument('--batch-size', type=int, default=128, metavar='N',\n                    help='input batch size for training (default: 128)')\nparser.add_argument('--test-batch-size', type=int, default=128, metavar='N',\n                    help='input batch size for testing (default: 128)')\nparser.add_argument('--epochs', type=int, default=5, metavar='N',\n                    help='number of epochs to train')\nparser.add_argument('--lr', type=float, default=0.01, metavar='LR',\n                    help='learning rate')\nparser.add_argument('--no-cuda', action='store_true', default=False,\n                    help='disables CUDA training')\nparser.add_argument('--seed', type=int, default=1, metavar='S',\n                    help='random seed (default: 1)')\nparser.add_argument('--model-dir', default='./model-mnist-cnn',\n                    help='directory of model for saving checkpoint')\nparser.add_argument('--load-model', action='store_true', default=False,\n                    help='load model or not')\n    \nargs = parser.parse_args(args=[]) \n    \nif not os.path.exists(args.model_dir):\n    os.makedirs(args.model_dir)\n            \n# Judge cuda is available or not\nuse_cuda = not args.no_cuda and torch.cuda.is_available()\n#device = torch.device(\"cuda\" if use_cuda else \"cpu\")\ndevice = torch.device(\"cpu\")\n    \ntorch.manual_seed(args.seed)\nkwargs = {'num_workers': 1, 'pin_memory': True} if use_cuda else {}\n    \n# Setup data loader\ntransform=transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize((0.1307,), (0.3081,))\n        ])\ntrainset = datasets.MNIST('data', train=True, download=True,\n                    transform=transform)\ntestset = datasets.MNIST('data', train=False,\n                    transform=transform)\ntrain_loader = torch.utils.data.DataLoader(trainset,batch_size=args.batch_size, shuffle=True,**kwargs)\ntest_loader = torch.utils.data.DataLoader(testset,batch_size=args.test_batch_size, shuffle=False, **kwargs)\n    \n    \n# Define CNN\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        # in_channels:1  out_channels:32  kernel_size:3  stride:1\n        self.conv1 = nn.Conv2d(1, 32, 3, 1)\n        # in_channels:32  out_channels:64  kernel_size:3  stride:1\n        self.conv2 = nn.Conv2d(32, 64, 3, 1)\n        self.fc1 = nn.Linear(9216, 128)\n        self.fc2 = nn.Linear(128, 10)\n    \n    def forward(self, x):\n        x = self.conv1(x)\n        x = F.relu(x)\n        x = self.conv2(x)\n        x = F.relu(x)\n        x = F.max_pool2d(x, 2)\n        x = torch.flatten(x, 1)\n        x = self.fc1(x)\n        x = F.relu(x)\n        x = self.fc2(x)\n        output = F.log_softmax(x, dim=1)\n        return output\n    \n    \n    \n# Train function\ndef train(args, model, device, train_loader, optimizer, epoch):\n    model.train()\n    for batch_idx, (data, target) in enumerate(train_loader):\n        data, target = data.to(device), target.to(device)\n            \n        #clear gradients\n        optimizer.zero_grad()\n            \n        #compute loss\n        loss = F.cross_entropy(model(data), target)\n            \n        #get gradients and update\n        loss.backward()\n        optimizer.step()\n    \n# Predict function\ndef eval_test(model, device, test_loader):\n    model.eval()\n    test_loss = 0\n    correct = 0\n    with torch.no_grad():\n        for data, target in test_loader:\n            data, target = data.to(device), target.to(device)\n            output = model(data)\n            test_loss += F.cross_entropy(output, target, size_average=False).item()\n            pred = output.max(1, keepdim=True)[1]\n            correct += pred.eq(target.view_as(pred)).sum().item()\n    test_loss /= len(test_loader.dataset)\n    test_accuracy = correct / len(test_loader.dataset)\n    return test_loss, test_accuracy\n    \n# Main function, train the initial model or load the model\ndef main():\n    model = Net().to(device)\n    optimizer = optim.SGD(model.parameters(), lr=args.lr)\n        \n    if args.load_model:\n        # Load model\n        model.load_state_dict(torch.load(os.path.join(args.model_dir, 'final_model.pt')))\n        trnloss, trnacc = eval_test(model, device, train_loader)\n        tstloss, tstacc = eval_test(model, device, test_loader)\n        print('trn_loss: {:.4f}, trn_acc: {:.2f}%'.format(trnloss, 100. * trnacc), end=', ')\n        print('test_loss: {:.4f}, test_acc: {:.2f}%'.format(tstloss, 100. * tstacc))\n            \n    else:\n        # Train initial model\n        for epoch in range(1, args.epochs + 1):\n            start_time = time.time()\n    \n            #training\n            train(args, model, device, train_loader, optimizer, epoch)\n    \n            #get trnloss and testloss\n            trnloss, trnacc = eval_test(model, device, train_loader)\n            tstloss, tstacc = eval_test(model, device, test_loader)\n    \n            #print trnloss and testloss\n            print('Epoch '+str(epoch)+': '+str(int(time.time()-start_time))+'s', end=', ')\n            print('trn_loss: {:.4f}, trn_acc: {:.2f}%'.format(trnloss, 100. * trnacc), end=', ')\n            print('test_loss: {:.4f}, test_acc: {:.2f}%'.format(tstloss, 100. * tstacc))\n            \n        #save model\n        torch.save(model.state_dict(), os.path.join(args.model_dir, 'final_model.pt'))\n    \nif __name__ == '__main__':\n    main()\n   \t\t `,\n      },\n    };\n  },\n\n  methods: {\n    highlighter(code) {\n      return highlight(code, languages.js); // languages.<insert language> to return html with markup\n    },\n\n    getJson() {\n      axios({\n        method: \"get\",\n        url:\n          \"/canvas/getJson/\" + localStorage.uid + \"/\" + localStorage.pid + \"/\",\n        responseType: \"stream\",\n      }).then((res) => {\n        console.log(res.data);\n        // not first time\n        if (res.data.status == 200) {\n          this.canvas_data.file = res.data;\n          this.renderJson();\n        }\n        // first time\n        else if (res.data.status == 204) {\n        } else {\n          alert(\"can not get user's json!\");\n        }\n      });\n    },\n\n    getPython() {\n      axios({\n        method: \"get\",\n        url:\n          \"/canvas/getPython/\" +\n          localStorage.uid +\n          \"/\" +\n          localStorage.pid +\n          \"/\",\n        responseType: \"stream\",\n      }).then((res) => {\n        console.log(res.data);\n        if (res.data.status == 200) {\n          this.canvas_data.code = res.code;\n        } else {\n          alert(\"can not get user's python!\");\n        }\n      });\n    },\n\n    download() {\n      axios({\n        method: \"get\",\n        url:\n          \"/canvas/download/\" + localStorage.uid + \"/\" + localStorage.pid + \"/\",\n        responseType: \"blob\",\n      }).then((res) => {\n        console.log(res.data);\n        if (res.data.status == 200) {\n          let blob = new Blob([res], {\n            type: \"application/zip;charset-UTF-8\",\n          });\n\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement(\"a\");\n          a.style.display = \"none\";\n          a.href = url;\n          a.download = \"projectttt.zip\";\n          a.click();\n          URL.revokeObjectURL(url);\n        } else {\n          alert(\"can not get user's json!\");\n        }\n      });\n    },\n\n    // Update json first, then send to backend and get python code\n    compile() {\n      // Update json\n      this.getJson();\n      // console.log(this.canvasData.file);\n      // this.renderJson();\n      // console.log(this.canvasData.file);\n      // this.updateJson();\n      // console.log(this.canvasData.file);\n\n      // send json to backend\n      // this.canvasData.file = myDiagram.model.toJson();\n\n      let formData = new FormData();\n      formData.append(\"file\", this.canvasData.file);\n      axios({\n        method: \"post\",\n        url:\n          \"/canvas/compile/\" + localStorage.uid + \"/\" + localStorage.pid + \"/\",\n        data: formData,\n      }).then((res) => {\n        console.log(res.data);\n        // If compile successful 200, backend update database, frontend get data and reload\n        if (res.data.status == \"200\") {\n          this.getPython();\n          console.log(\"compile ok!\");\n        }\n        // If complie fails 500, frontend alert error\n        else if (res.data.status == \"500\") {\n          alert(\"The network model is not valid!\");\n        }\n        location.replace(\"/canvas/\");\n      });\n    },\n\n    // Update Json accroding to user's operation\n    updateJson() {\n      document.getElementById(\"mySavedModel\").value = myDiagram.model.toJson();\n      myDiagram.isModified = false;\n    },\n\n    // Render Json on the canvas area\n    renderJson() {\n      myDiagram.model = go.Model.fromJson(\n        document.getElementById(\"mySavedModel\").value\n      );\n    },\n\n    // Render .py on the code area\n    renderCode() {},\n\n    // To make canvas tidy 200\n    layout() {\n      this.updateJson();\n      myDiagram.layoutDiagram(true);\n    },\n\n    // Go to train page 200\n    enterTrain() {\n      location.replace(\"/train/\");\n    },\n  },\n\n  mounted() {\n    // this.getJson();\n    // // this.updateJson();\n    // this.canvasData.file = JSON.stringify(this.canvasData.file);\n    // this.renderJson();\n    this.canvasData.file = JSON.stringify(this.canvasData.file);\n    this.compile();\n    // this.canvasData.file = JSON.stringify(this.canvasData.file);\n\n    const $ = go.GraphObject.make; // for conciseness in defining templates\n    var yellowgrad = $(go.Brush, \"Linear\", {\n      0: \"#bde0fe\",\n      1: \"#bde0fe\",\n    });\n    var greengrad = $(go.Brush, \"Linear\", {\n      0: \"#fdffb6\",\n      1: \"#fdffb6\",\n    });\n    var bluegrad = $(go.Brush, \"Linear\", {\n      0: \"#caffbf\",\n      1: \"#caffbf\",\n    });\n    var redgrad = $(go.Brush, \"Linear\", {\n      0: \"#ffadad\",\n      1: \"#ffadad\",\n    });\n    var whitegrad = $(go.Brush, \"Linear\", {\n      0: \"#E7C5FC\",\n      1: \"#E7C5FC\",\n    });\n    var bigfont = \"bold 15pt Helvetica, Arial, sans-serif\";\n    var smallfont = \"bold 13pt Helvetica, Arial, sans-serif\";\n\n    // Common text styling\n    function textStyle() {\n      return {\n        margin: 6,\n        wrap: go.TextBlock.WrapFit,\n        textAlign: \"center\",\n        editable: true,\n        font: bigfont,\n      };\n    }\n\n    const myDiagram = $(go.Diagram, \"myDiagramDiv\", {\n      initialAutoScale: go.Diagram.Uniform,\n      \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\n      layout: $(go.LayeredDigraphLayout, {\n        isInitial: false,\n        isOngoing: false,\n        layerSpacing: 50,\n      }),\n      \"undoManager.isEnabled\": true,\n    });\n\n    var nodeSelectionAdornmentTemplate = $(\n      go.Adornment,\n      \"Auto\",\n      $(go.Shape, {\n        fill: null,\n        stroke: \"#979dac\",\n        strokeWidth: 2,\n        strokeDashArray: [4, 2],\n      }),\n      $(go.Placeholder)\n    );\n\n    // define the Node template\n    myDiagram.nodeTemplate = $(\n      go.Node,\n      \"Auto\",\n      {\n        locationSpot: go.Spot.Center,\n      },\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n        go.Point.stringify\n      ),\n      {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n      },\n      // define the node's outer shape, which will surround the TextBlock\n      $(go.Shape, \"Rectangle\", {\n        fill: yellowgrad,\n        stroke: null,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true,\n        cursor: \"pointer\",\n        toEndSegmentLength: 50,\n        fromEndSegmentLength: 50,\n      }),\n      $(\n        go.TextBlock,\n        \"ReLU\",\n        {\n          margin: 6,\n          font: bigfont,\n          editable: true,\n          minSize: new go.Size(40, NaN),\n        },\n        new go.Binding(\"text\", \"text\").makeTwoWay()\n      )\n    );\n    // Data\n    myDiagram.nodeTemplateMap.add(\n      \"Data\",\n      $(\n        go.Node,\n        \"Auto\",\n        {\n          locationSpot: go.Spot.Center,\n          margin: new go.Margin(0, 0, 0, 0),\n        },\n        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n          go.Point.stringify\n        ),\n        {\n          selectable: true,\n          selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n        },\n        $(go.Shape, \"Circle\", {\n          fill: bluegrad,\n          portId: \"\",\n          fromLinkable: true,\n          cursor: \"pointer\",\n          //fromEndSegmentLength: 40,\n          stroke: \"#74c69d\",\n\n          strokeWidth: 4,\n        }),\n        $(\n          go.TextBlock,\n          \"Data\",\n          textStyle(),\n          {\n            stroke: \"#2d6a4f\",\n            minSize: new go.Size(40, NaN),\n          },\n          new go.Binding(\"text\", \"text\").makeTwoWay()\n        )\n      )\n    );\n\n    myDiagram.nodeTemplateMap.add(\n      \"End\",\n      $(\n        go.Node,\n        \"Auto\",\n        {\n          locationSpot: go.Spot.Center,\n        },\n        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n          go.Point.stringify\n        ),\n        {\n          selectable: true,\n          selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n        },\n        $(go.Shape, \"Circle\", {\n          fill: redgrad,\n          portId: \"\",\n          toLinkable: true,\n          cursor: \"pointer\",\n          fromEndSegmentLength: 40,\n          stroke: \"#df7373\",\n          strokeWidth: 4,\n        }),\n        $(\n          go.TextBlock,\n          \"End\",\n          textStyle(),\n          {\n            stroke: \"#ad2e24\",\n            minSize: new go.Size(40, NaN),\n          },\n          new go.Binding(\"text\", \"text\").makeTwoWay()\n        )\n      )\n    );\n\n    myDiagram.nodeTemplateMap.add(\n      \"ReLU\",\n      $(\n        go.Node,\n        \"Auto\",\n        {\n          locationSpot: go.Spot.Center,\n        },\n        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n          go.Point.stringify\n        ),\n        {\n          selectable: true,\n          selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n        },\n        $(go.Shape, \"Ellipse\", {\n          fill: greengrad,\n          portId: \"\",\n          fromLinkable: true,\n          toLinkable: true,\n          cursor: \"pointer\",\n          fromEndSegmentLength: 40,\n          stroke: \"#ffd100\",\n          strokeWidth: 4,\n        }),\n        $(\n          go.TextBlock,\n          \"ReLU\",\n          textStyle(),\n          {\n            stroke: \"#e2711d\",\n            // locationSpot: go.Spot.Center,\n            //margin: new go.Margin(10, 0, 0, 0),\n            minSize: new go.Size(60, NaN),\n          },\n          new go.Binding(\"text\", \"text\").makeTwoWay()\n        )\n      )\n    );\n\n    var reasonTemplate = $(\n      go.Panel,\n      $(\n        go.Panel,\n        \"Table\",\n        {\n          maxSize: new go.Size(200, 999),\n          margin: new go.Margin(0, 3, 10, 3),\n          defaultAlignment: go.Spot.Center,\n        },\n        $(go.RowColumnDefinition, {\n          column: 2,\n          width: 2,\n        }),\n        $(\n          go.TextBlock,\n          \"input = \",\n          {\n            margin: new go.Margin(4, 0, 0, 0),\n            maxSize: new go.Size(200, NaN),\n            wrap: go.TextBlock.WrapFit,\n            //stroke: \"whitesmoke\",\n            editable: true,\n            font: smallfont,\n            row: 2,\n            column: 0,\n            stroke: \"#3e5c76\",\n          },\n          new go.Binding(\"text\", \"text0\").makeTwoWay()\n        ),\n\n        $(\n          go.TextBlock,\n          \"value\",\n          {\n            margin: new go.Margin(4, 0, 0, 0),\n            maxSize: new go.Size(200, NaN),\n            wrap: go.TextBlock.WrapFit,\n            //stroke: \"whitesmoke\",\n            editable: true,\n            stroke: \"#3e5c76\",\n            font: smallfont,\n            row: 2,\n            column: 1,\n          },\n          new go.Binding(\"text\", \"text1\").makeTwoWay()\n        ),\n\n        $(\n          go.TextBlock,\n          \"output = \",\n          {\n            margin: new go.Margin(4, 0, 0, 0),\n            maxSize: new go.Size(200, NaN),\n            wrap: go.TextBlock.WrapFit,\n            //stroke: \"whitesmoke\",\n            editable: true,\n            font: smallfont,\n            stroke: \"#3e5c76\",\n            row: 3,\n            column: 0,\n          },\n          new go.Binding(\"text\", \"text2\").makeTwoWay()\n        ),\n\n        $(\n          go.TextBlock,\n          \"value\",\n          {\n            margin: new go.Margin(4, 0, 0, 9),\n            maxSize: new go.Size(200, NaN),\n            wrap: go.TextBlock.WrapFit,\n            //stroke: \"whitesmoke\",\n            editable: true,\n            font: smallfont,\n            stroke: \"#3e5c76\",\n            row: 3,\n            column: 1,\n          },\n          new go.Binding(\"text\", \"text3\").makeTwoWay()\n        )\n      ) // end Table Panel\n    );\n\n    myDiagram.nodeTemplateMap.add(\n      \"FC\",\n      $(\n        go.Node,\n        \"Auto\",\n        {\n          locationSpot: go.Spot.Center,\n        },\n        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n          go.Point.stringify\n        ),\n        {\n          selectable: true,\n          selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n        },\n        $(go.Shape, \"RoundedRectangle\", {\n          fill: yellowgrad,\n          stroke: \"#4ea8de\",\n          strokeWidth: 4,\n          portId: \"\",\n          fromLinkable: true,\n          toLinkable: true,\n          cursor: \"pointer\",\n          toEndSegmentLength: 50,\n          fromEndSegmentLength: 40,\n        }),\n        $(\n          go.Panel,\n          \"Vertical\",\n          {\n            defaultAlignment: go.Spot.Center,\n          },\n\n          $(\n            go.TextBlock,\n            \"FC\",\n            textStyle(),\n            {\n              stroke: \"#3e5c76\",\n              margin: new go.Margin(8, 0, 0, 0),\n              minSize: new go.Size(100, NaN),\n              //maxSize: new go.Size(200, NaN)\n            },\n            new go.Binding(\"text\", \"text\").makeTwoWay()\n          ),\n\n          $(\n            go.Panel,\n            \"Vertical\",\n            {\n              defaultAlignment: go.Spot.TopLeft,\n              itemTemplate: reasonTemplate,\n            },\n            new go.Binding(\"itemArray\", \"reasonsList\").makeTwoWay()\n          )\n        )\n      )\n    );\n\n    var linkSelectionAdornmentTemplate = $(\n      go.Adornment,\n      \"Link\",\n      $(\n        go.Shape,\n        // isPanelMain declares that this Shape shares the Link.geometry\n        {\n          isPanelMain: true,\n          fill: null,\n          stroke: \"deepskyblue\",\n          strokeWidth: 2.5,\n        }\n      ) // use selection object's strokeWidth\n    );\n    // replace the default Link template in the linkTemplateMap\n    myDiagram.linkTemplate = $(\n      go.Link, // the whole link panel\n      {\n        selectable: true,\n        selectionAdornmentTemplate: linkSelectionAdornmentTemplate,\n      },\n      new go.Binding(\"points\").makeTwoWay(),\n      {\n        //curve: go.Link.Bezier,\n        toShortLength: 15,\n      },\n      //new go.Binding(\"curviness\", \"curviness\"),\n      $(\n        go.Shape, // the link shape\n        {\n          stroke: \"#979dac\",\n          strokeWidth: 2.5,\n        }\n      ),\n      $(\n        go.Shape, // the arrowhead\n        {\n          toArrow: \"kite\",\n          fill: \"#979dac\",\n          stroke: null,\n          scale: 2,\n        }\n      )\n    );\n\n    myDiagram.nodeTemplateMap.add(\n      \"RNN\",\n      $(\n        go.Node,\n        \"Auto\",\n        {\n          locationSpot: go.Spot.Center,\n        },\n        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n          go.Point.stringify\n        ),\n        {\n          selectable: true,\n          selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n        },\n        $(go.Shape, \"RoundedRectangle\", {\n          fill: whitegrad,\n          stroke: \"#CF8BF9\",\n          strokeWidth: 4,\n        }),\n        $(\n          go.TextBlock,\n          \"RNN\\n(unavailable)\",\n          textStyle(),\n          {\n            margin: 9,\n            maxSize: new go.Size(200, NaN),\n            wrap: go.TextBlock.WrapFit,\n            editable: true,\n            stroke: \"#560788\",\n            font: smallfont,\n          },\n          new go.Binding(\"text\", \"text\").makeTwoWay()\n        )\n        // no ports, because no links are allowed to connect with a comment\n      )\n    );\n\n    myDiagram.nodeTemplateMap.add(\n      \"CNN\",\n      $(\n        go.Node,\n        \"Auto\",\n        {\n          locationSpot: go.Spot.Center,\n        },\n        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n          go.Point.stringify\n        ),\n        {\n          selectable: true,\n          selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n        },\n        $(go.Shape, \"RoundedRectangle\", {\n          fill: whitegrad,\n          stroke: \"#CF8BF9\",\n          strokeWidth: 4,\n        }),\n        $(\n          go.TextBlock,\n          \"CNN\\n(unavailable)\",\n          textStyle(),\n          {\n            margin: 9,\n            maxSize: new go.Size(200, NaN),\n            wrap: go.TextBlock.WrapFit,\n            editable: true,\n            stroke: \"#560788\",\n            font: smallfont,\n          },\n          new go.Binding(\"text\", \"text\").makeTwoWay()\n        )\n        // no ports, because no links are allowed to connect with a comment\n      )\n    );\n\n    myDiagram.nodeTemplateMap.add(\n      \"LSTM\",\n      $(\n        go.Node,\n        \"Auto\",\n        {\n          locationSpot: go.Spot.Center,\n        },\n        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n          go.Point.stringify\n        ),\n        {\n          selectable: true,\n          selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n        },\n        $(go.Shape, \"RoundedRectangle\", {\n          fill: whitegrad,\n          stroke: \"#CF8BF9\",\n          strokeWidth: 4,\n        }),\n        $(\n          go.TextBlock,\n          \"LSTM\\n(unavailable)\",\n          textStyle(),\n          {\n            margin: 9,\n            maxSize: new go.Size(200, NaN),\n            wrap: go.TextBlock.WrapFit,\n            editable: true,\n            stroke: \"#560788\",\n            font: smallfont,\n          },\n          new go.Binding(\"text\", \"text\").makeTwoWay()\n        )\n        // no ports, because no links are allowed to connect with a comment\n      )\n    );\n\n    myDiagram.nodeTemplateMap.add(\n      \"Softmax\",\n      $(\n        go.Node,\n        \"Auto\",\n        {\n          locationSpot: go.Spot.Center,\n        },\n        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n          go.Point.stringify\n        ),\n        {\n          selectable: true,\n          selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n        },\n        $(go.Shape, \"RoundedRectangle\", {\n          fill: whitegrad,\n          stroke: \"#CF8BF9\",\n          strokeWidth: 4,\n        }),\n        $(\n          go.TextBlock,\n          \"Softmax\\n(unavailable)\",\n          textStyle(),\n          {\n            margin: 9,\n            maxSize: new go.Size(200, NaN),\n            wrap: go.TextBlock.WrapFit,\n            editable: true,\n            stroke: \"#560788\",\n            font: smallfont,\n          },\n          new go.Binding(\"text\", \"text\").makeTwoWay()\n        )\n        // no ports, because no links are allowed to connect with a comment\n      )\n    );\n\n    myDiagram.nodeTemplateMap.add(\n      \"Maximum Polling\",\n      $(\n        go.Node,\n        \"Auto\",\n        {\n          locationSpot: go.Spot.Center,\n        },\n        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\n          go.Point.stringify\n        ),\n        {\n          selectable: true,\n          selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\n        },\n        $(go.Shape, \"RoundedRectangle\", {\n          fill: whitegrad,\n          stroke: \"#CF8BF9\",\n          strokeWidth: 4,\n        }),\n        $(\n          go.TextBlock,\n          \"Maximum\\nPolling\\n(unavailable)\",\n          textStyle(),\n          {\n            margin: 9,\n            maxSize: new go.Size(200, NaN),\n            wrap: go.TextBlock.WrapFit,\n            editable: true,\n            stroke: \"#560788\",\n            font: smallfont,\n          },\n          new go.Binding(\"text\", \"text\").makeTwoWay()\n        )\n        // no ports, because no links are allowed to connect with a comment\n      )\n    );\n\n    var palette = $(\n      go.Palette,\n      \"myPaletteDiv\", // create a new Palette in the HTML DIV element\n      {\n        // share the template map with the Palette\n        nodeTemplateMap: myDiagram.nodeTemplateMap,\n        autoScale: go.Diagram.Uniform, // everything always fits in viewport\n      }\n    );\n\n    palette.model.nodeDataArray = [\n      {\n        category: \"Data\",\n      },\n      {\n        category: \"ReLU\",\n      },\n      {\n        category: \"FC\",\n        reasonsList: [{}],\n      },\n      {\n        category: \"End\",\n      },\n      {\n        category: \"CNN\",\n      },\n      {\n        category: \"RNN\",\n      },\n      {\n        category: \"LSTM\",\n      },\n      {\n        category: \"Softmax\",\n      },\n      {\n        category: \"Maximum Polling\",\n      },\n    ];\n\n    window.myDiagram = myDiagram;\n  },\n};\n</script>\n\n\n<style scoped>\n.body {\n  padding: 0;\n  margin: 0;\n  height: 100%;\n  width: 100%;\n  overflow: visible;\n}\n</style>\n<style scoped src=\"../../new_pages/vendor/fontawesome-free/css/all.min.css\"></style>\n<style scoped src=\"../../new_pages/css/sb-admin-2.min.css\"></style>\n\n<style>\n/* required class */\n.my-editor {\n  /* we dont use `language-` classes anymore so thats why we need to add background and text color manually */\n  background: #2d2d2d;\n  color: #ccc;\n\n  /* you must provide font-family font-size line-height. Example: */\n  font-family: Fira code, Fira Mono, Consolas, Menlo, Courier, monospace;\n  font-size: 14px;\n  line-height: 1.5;\n  padding: 5px;\n}\n\n/* optional class for removing the outline */\n.prism-editor__textarea:focus {\n  outline: none;\n}\n</style>"]},"metadata":{},"sourceType":"module"}