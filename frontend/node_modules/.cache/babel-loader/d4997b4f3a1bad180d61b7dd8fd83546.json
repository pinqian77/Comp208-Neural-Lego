{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-60569357\"), n = n(), _popScopeId(), n;\n};\n\nvar _hoisted_1 = {\n  lang: \"en\"\n};\n\nvar _hoisted_2 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"head\", null, [/*#__PURE__*/_createElementVNode(\"meta\", {\n    charset: \"utf-8\"\n  }), /*#__PURE__*/_createElementVNode(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover\"\n  }), /*#__PURE__*/_createElementVNode(\"meta\", {\n    name: \"description\",\n    content: \"A workflow diagram showing navigation between web pages, with an editable list of comments and to-dos.\"\n  }), /*#__PURE__*/_createCommentVNode(\" <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\" /> \"), /*#__PURE__*/_createCommentVNode(\" Copyright 1998-2022 by Northwoods Software Corporation. \"), /*#__PURE__*/_createElementVNode(\"title\", null, \"Page Flow\")], -1\n  /* HOISTED */\n  );\n});\n\nvar _hoisted_3 = /*#__PURE__*/_createTextVNode(\" function init() { const $ = go.GraphObject.make; // for conciseness in defining templates var yellowgrad = $(go.Brush, \\\"Linear\\\", { 0: \\\"#bde0fe\\\", 1: \\\"#bde0fe\\\", }); var greengrad = $(go.Brush, \\\"Linear\\\", { 0: \\\"#fdffb6\\\", 1: \\\"#fdffb6\\\", }); var bluegrad = $(go.Brush, \\\"Linear\\\", { 0: \\\"#caffbf\\\", 1: \\\"#caffbf\\\", }); var redgrad = $(go.Brush, \\\"Linear\\\", { 0: \\\"#ffadad\\\", 1: \\\"#ffadad\\\", }); var whitegrad = $(go.Brush, \\\"Linear\\\", { 0: \\\"#E7C5FC\\\", 1: \\\"#E7C5FC\\\", }); var bigfont = \\\"bold 15pt Helvetica, Arial, sans-serif\\\"; var smallfont = \\\"bold 13pt Helvetica, Arial, sans-serif\\\"; // Common text styling function textStyle() { return { margin: 6, wrap: go.TextBlock.WrapFit, textAlign: \\\"center\\\", editable: true, font: bigfont, }; } myDiagram = $(go.Diagram, \\\"myDiagramDiv\\\", { // // have mouse wheel events zoom in and out instead of scroll up and down //\\\"toolManager.mouseWheelBehavior\\\": go.ToolManager.WheelZoom, initialAutoScale: go.Diagram.Uniform, \\\"linkingTool.direction\\\": go.LinkingTool.ForwardsOnly, layout: $(go.LayeredDigraphLayout, { isInitial: false, isOngoing: false, layerSpacing: 50, }), \\\"undoManager.isEnabled\\\": true, }); var nodeSelectionAdornmentTemplate = $( go.Adornment, \\\"Auto\\\", $(go.Shape, { fill: null, stroke: \\\"#979dac\\\", strokeWidth: 2, strokeDashArray: [4, 2], }), $(go.Placeholder) ); // define the Node template myDiagram.nodeTemplate = $( go.Node, \\\"Auto\\\", { locationSpot: go.Spot.Center, }, new go.Binding(\\\"location\\\", \\\"loc\\\", go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, // define the node's outer shape, which will surround the TextBlock $(go.Shape, \\\"Rectangle\\\", { fill: yellowgrad, stroke: null, portId: \\\"\\\", fromLinkable: true, toLinkable: true, cursor: \\\"pointer\\\", toEndSegmentLength: 50, fromEndSegmentLength: 50, }), $( go.TextBlock, \\\"ReLU\\\", { margin: 6, font: bigfont, editable: true, minSize: new go.Size(40, NaN), }, new go.Binding(\\\"text\\\", \\\"text\\\").makeTwoWay() ) ); // Data myDiagram.nodeTemplateMap.add( \\\"Data\\\", $( go.Node, \\\"Auto\\\", { locationSpot: go.Spot.Center, margin: new go.Margin(0, 0, 0, 0), }, new go.Binding(\\\"location\\\", \\\"loc\\\", go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape, \\\"Circle\\\", { fill: bluegrad, portId: \\\"\\\", fromLinkable: true, cursor: \\\"pointer\\\", //fromEndSegmentLength: 40, stroke: \\\"#74c69d\\\", strokeWidth: 4, }), $( go.TextBlock, \\\"Data\\\", textStyle(), { stroke: \\\"#2d6a4f\\\", minSize: new go.Size(40, NaN), }, new go.Binding(\\\"text\\\", \\\"text\\\").makeTwoWay() ) ) ); myDiagram.nodeTemplateMap.add( \\\"End\\\", $( go.Node, \\\"Auto\\\", { locationSpot: go.Spot.Center, }, new go.Binding(\\\"location\\\", \\\"loc\\\", go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape, \\\"Circle\\\", { fill: redgrad, portId: \\\"\\\", toLinkable: true, cursor: \\\"pointer\\\", fromEndSegmentLength: 40, stroke: \\\"#df7373\\\", strokeWidth: 4, }), $( go.TextBlock, \\\"End\\\", textStyle(), { stroke: \\\"#ad2e24\\\", minSize: new go.Size(40, NaN), }, new go.Binding(\\\"text\\\", \\\"text\\\").makeTwoWay() ) ) ); myDiagram.nodeTemplateMap.add( \\\"ReLU\\\", $( go.Node, \\\"Auto\\\", { locationSpot: go.Spot.Center, }, new go.Binding(\\\"location\\\", \\\"loc\\\", go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape, \\\"Ellipse\\\", { fill: greengrad, portId: \\\"\\\", fromLinkable: true, toLinkable: true, cursor: \\\"pointer\\\", fromEndSegmentLength: 40, stroke: \\\"#ffd100\\\", strokeWidth: 4, }), $( go.TextBlock, \\\"ReLU\\\", textStyle(), { stroke: \\\"#e2711d\\\", // locationSpot: go.Spot.Center, //margin: new go.Margin(10, 0, 0, 0), minSize: new go.Size(60, NaN), }, new go.Binding(\\\"text\\\", \\\"text\\\").makeTwoWay() ) ) ); var reasonTemplate = $( go.Panel, $( go.Panel, \\\"Table\\\", { maxSize: new go.Size(200, 999), margin: new go.Margin(0, 3, 10, 3), defaultAlignment: go.Spot.Center, }, $(go.RowColumnDefinition, { column: 2, width: 2, }), $( go.TextBlock, \\\"input = \\\", { margin: new go.Margin(4, 0, 0, 0), maxSize: new go.Size(200, NaN), wrap: go.TextBlock.WrapFit, //stroke: \\\"whitesmoke\\\", editable: true, font: smallfont, row: 2, column: 0, stroke: \\\"#3e5c76\\\", }, new go.Binding(\\\"text\\\", \\\"text0\\\").makeTwoWay() ), $( go.TextBlock, \\\"value\\\", { margin: new go.Margin(4, 0, 0, 0), maxSize: new go.Size(200, NaN), wrap: go.TextBlock.WrapFit, //stroke: \\\"whitesmoke\\\", editable: true, stroke: \\\"#3e5c76\\\", font: smallfont, row: 2, column: 1, }, new go.Binding(\\\"text\\\", \\\"text1\\\").makeTwoWay() ), $( go.TextBlock, \\\"output = \\\", { margin: new go.Margin(4, 0, 0, 0), maxSize: new go.Size(200, NaN), wrap: go.TextBlock.WrapFit, //stroke: \\\"whitesmoke\\\", editable: true, font: smallfont, stroke: \\\"#3e5c76\\\", row: 3, column: 0, }, new go.Binding(\\\"text\\\", \\\"text2\\\").makeTwoWay() ), $( go.TextBlock, \\\"value\\\", { margin: new go.Margin(4, 0, 0, 9), maxSize: new go.Size(200, NaN), wrap: go.TextBlock.WrapFit, //stroke: \\\"whitesmoke\\\", editable: true, font: smallfont, stroke: \\\"#3e5c76\\\", row: 3, column: 1, }, new go.Binding(\\\"text\\\", \\\"text3\\\").makeTwoWay() ) ) // end Table Panel ); myDiagram.nodeTemplateMap.add( \\\"FC\\\", $( go.Node, \\\"Auto\\\", { locationSpot: go.Spot.Center, }, new go.Binding(\\\"location\\\", \\\"loc\\\", go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape, \\\"RoundedRectangle\\\", { fill: yellowgrad, stroke: \\\"#4ea8de\\\", strokeWidth: 4, portId: \\\"\\\", fromLinkable: true, toLinkable: true, cursor: \\\"pointer\\\", toEndSegmentLength: 50, fromEndSegmentLength: 40, }), $( go.Panel, \\\"Vertical\\\", { defaultAlignment: go.Spot.Center, }, $( go.TextBlock, \\\"FC\\\", textStyle(), { stroke: \\\"#3e5c76\\\", margin: new go.Margin(8, 0, 0, 0), minSize: new go.Size(100, NaN), //maxSize: new go.Size(200, NaN) }, new go.Binding(\\\"text\\\", \\\"text\\\").makeTwoWay() ), $( go.Panel, \\\"Vertical\\\", { defaultAlignment: go.Spot.TopLeft, itemTemplate: reasonTemplate, }, new go.Binding(\\\"itemArray\\\", \\\"reasonsList\\\").makeTwoWay() ) ) ) ); var linkSelectionAdornmentTemplate = $( go.Adornment, \\\"Link\\\", $( go.Shape, // isPanelMain declares that this Shape shares the Link.geometry { isPanelMain: true, fill: null, stroke: \\\"deepskyblue\\\", strokeWidth: 2.5, } ) // use selection object's strokeWidth ); // replace the default Link template in the linkTemplateMap myDiagram.linkTemplate = $( go.Link, // the whole link panel { selectable: true, selectionAdornmentTemplate: linkSelectionAdornmentTemplate, }, new go.Binding(\\\"points\\\").makeTwoWay(), { //curve: go.Link.Bezier, toShortLength: 15, }, //new go.Binding(\\\"curviness\\\", \\\"curviness\\\"), $( go.Shape, // the link shape { stroke: \\\"#979dac\\\", strokeWidth: 2.5, } ), $( go.Shape, // the arrowhead { toArrow: \\\"kite\\\", fill: \\\"#979dac\\\", stroke: null, scale: 2, } ) ); myDiagram.nodeTemplateMap.add( \\\"RNN\\\", $( go.Node, \\\"Auto\\\", { locationSpot: go.Spot.Center, }, new go.Binding(\\\"location\\\", \\\"loc\\\", go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape, \\\"RoundedRectangle\\\", { fill: whitegrad, stroke: \\\"#CF8BF9\\\", strokeWidth: 4, }), $( go.TextBlock, \\\"RNN\\\\n(unavailable)\\\", textStyle(), { margin: 9, maxSize: new go.Size(200, NaN), wrap: go.TextBlock.WrapFit, editable: true, stroke: \\\"#560788\\\", font: smallfont, }, new go.Binding(\\\"text\\\", \\\"text\\\").makeTwoWay() ) // no ports, because no links are allowed to connect with a comment ) ); myDiagram.nodeTemplateMap.add( \\\"CNN\\\", $( go.Node, \\\"Auto\\\", { locationSpot: go.Spot.Center, }, new go.Binding(\\\"location\\\", \\\"loc\\\", go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape, \\\"RoundedRectangle\\\", { fill: whitegrad, stroke: \\\"#CF8BF9\\\", strokeWidth: 4, }), $( go.TextBlock, \\\"CNN\\\\n(unavailable)\\\", textStyle(), { margin: 9, maxSize: new go.Size(200, NaN), wrap: go.TextBlock.WrapFit, editable: true, stroke: \\\"#560788\\\", font: smallfont, }, new go.Binding(\\\"text\\\", \\\"text\\\").makeTwoWay() ) // no ports, because no links are allowed to connect with a comment ) ); myDiagram.nodeTemplateMap.add( \\\"LSTM\\\", $( go.Node, \\\"Auto\\\", { locationSpot: go.Spot.Center, }, new go.Binding(\\\"location\\\", \\\"loc\\\", go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape, \\\"RoundedRectangle\\\", { fill: whitegrad, stroke: \\\"#CF8BF9\\\", strokeWidth: 4, }), $( go.TextBlock, \\\"LSTM\\\\n(unavailable)\\\", textStyle(), { margin: 9, maxSize: new go.Size(200, NaN), wrap: go.TextBlock.WrapFit, editable: true, stroke: \\\"#560788\\\", font: smallfont, }, new go.Binding(\\\"text\\\", \\\"text\\\").makeTwoWay() ) // no ports, because no links are allowed to connect with a comment ) ); myDiagram.nodeTemplateMap.add( \\\"Softmax\\\", $( go.Node, \\\"Auto\\\", { locationSpot: go.Spot.Center, }, new go.Binding(\\\"location\\\", \\\"loc\\\", go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape, \\\"RoundedRectangle\\\", { fill: whitegrad, stroke: \\\"#CF8BF9\\\", strokeWidth: 4, }), $( go.TextBlock, \\\"Softmax\\\\n(unavailable)\\\", textStyle(), { margin: 9, maxSize: new go.Size(200, NaN), wrap: go.TextBlock.WrapFit, editable: true, stroke: \\\"#560788\\\", font: smallfont, }, new go.Binding(\\\"text\\\", \\\"text\\\").makeTwoWay() ) // no ports, because no links are allowed to connect with a comment ) ); myDiagram.nodeTemplateMap.add( \\\"Maximum Polling\\\", $( go.Node, \\\"Auto\\\", { locationSpot: go.Spot.Center, }, new go.Binding(\\\"location\\\", \\\"loc\\\", go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape, \\\"RoundedRectangle\\\", { fill: whitegrad, stroke: \\\"#CF8BF9\\\", strokeWidth: 4, }), $( go.TextBlock, \\\"Maximum\\\\nPolling\\\\n(unavailable)\\\", textStyle(), { margin: 9, maxSize: new go.Size(200, NaN), wrap: go.TextBlock.WrapFit, editable: true, stroke: \\\"#560788\\\", font: smallfont, }, new go.Binding(\\\"text\\\", \\\"text\\\").makeTwoWay() ) // no ports, because no links are allowed to connect with a comment ) ); var palette = $( go.Palette, \\\"myPaletteDiv\\\", // create a new Palette in the HTML DIV element { // share the template map with the Palette nodeTemplateMap: myDiagram.nodeTemplateMap, autoScale: go.Diagram.Uniform, // everything always fits in viewport } ); palette.model.nodeDataArray = [ { category: \\\"Data\\\", }, { category: \\\"ReLU\\\", }, { category: \\\"FC\\\", reasonsList: [{}], }, { category: \\\"End\\\", }, { category: \\\"CNN\\\", }, { category: \\\"RNN\\\", }, { category: \\\"LSTM\\\", }, { category: \\\"Softmax\\\", }, { category: \\\"Maximum Polling\\\", }, ]; // read in the JSON-format data from the \\\"mySavedModel\\\" element load(); layout(); } function layout() { myDiagram.layoutDiagram(true); } // Show the diagram's model in JSON format function save() { document.getElementById(\\\"mySavedModel\\\").value = myDiagram.model.toJson(); myDiagram.isModified = false; } function load() { myDiagram.model = go.Model.fromJson( document.getElementById(\\\"mySavedModel\\\").value ); } window.addEventListener(\\\"DOMContentLoaded\\\", init); \");\n\nvar _hoisted_4 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"body\", null, [/*#__PURE__*/_createElementVNode(\"div\", {\n    id: \"allSampleContent\",\n    \"class\": \"p-4 w-full\"\n  }, [/*#__PURE__*/_createElementVNode(\"div\", {\n    id: \"sample\"\n  }, [/*#__PURE__*/_createElementVNode(\"div\", {\n    style: {\n      \"width\": \"100%\",\n      \"margin-bottom\": \"10px\",\n      \"display\": \"flex\",\n      \"justify-content\": \"space-between\"\n    }\n  }, [/*#__PURE__*/_createElementVNode(\"div\", {\n    id: \"myPaletteDiv\",\n    style: {\n      \"width\": \"150px\",\n      \"margin-right\": \"10px\",\n      \"background-color\": \"whitesmoke\",\n      \"border\": \"solid 4px #82929b\"\n    }\n  }), /*#__PURE__*/_createElementVNode(\"div\", {\n    id: \"myDiagramDiv\",\n    style: {\n      \"flex-grow\": \"3\",\n      \"margin-right\": \"10px\",\n      \"height\": \"600px\",\n      \"background-color\": \"whitesmoke\",\n      \"border\": \"solid 4px #82929b\"\n    }\n  }), /*#__PURE__*/_createElementVNode(\"div\", {\n    id: \"myDiagramDiv\",\n    style: {\n      \"flex-grow\": \"2\",\n      \"height\": \"600px\",\n      \"background-color\": \"whitesmoke\",\n      \"border\": \"solid 4px #82929b\"\n    }\n  })]), /*#__PURE__*/_createElementVNode(\"button\", {\n    id: \"SaveButton\",\n    onclick: \"save()\"\n  }, \"Save\"), /*#__PURE__*/_createElementVNode(\"button\", {\n    onclick: \"load()\"\n  }, \"Load\"), /*#__PURE__*/_createElementVNode(\"button\", {\n    onclick: \"layout()\"\n  }, \"Layout\"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createElementVNode(\"textarea\", {\n    id: \"mySavedModel\",\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"300px\"\n    }\n  }, \"\\r\\n{ \\\"class\\\": \\\"GraphLinksModel\\\", \\r\\n\\\"nodeDataArray\\\": [ {\\\"category\\\":\\\"Data\\\", \\\"key\\\":-1, \\\"loc\\\":\\\"-70.5 -90.19999980926514\\\"} ], \\r\\n\\\"linkDataArray\\\": []}\\r\\n  \")])])], -1\n  /* HOISTED */\n  );\n});\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_go_js = _resolveComponent(\"go-js\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\"DOCTYPE html\"), _createElementVNode(\"html\", _hoisted_1, [_hoisted_2, _createVNode(_component_go_js, null, {\n    \"default\": _withCtx(function () {\n      return [_hoisted_3];\n    }),\n    _: 1\n    /* STABLE */\n\n  }), _hoisted_4])], 2112\n  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;;;;AAEQA,MAAI,EAAC;;;;sBACTC,oBAaO,MAbP,EAaO,IAbP,EAaO,cAZLA,oBAAwB,MAAxB,EAAwB;AAAlBC,WAAO,EAAC;AAAU,GAAxB,CAYK,eAXLD,oBAGE,MAHF,EAGE;AAFAE,QAAI,EAAC,UAEL;AADAC,WAAO,EAAC;AACR,GAHF,CAWK,eAPLH,oBAGE,MAHF,EAGE;AAFAE,QAAI,EAAC,aAEL;AADAC,WAAO,EAAC;AACR,GAHF,CAOK,eAHLC,uEAGK,eAFLA,gFAEK,eADLJ,oBAAwB,OAAxB,EAAwB,IAAxB,EAAO,WAAP,CACK,CAbP;;AAAA;;;+CAeO;;;sBAqKPA,oBAqDO,MArDP,EAqDO,IArDP,EAqDO,cApDLA,oBAmDM,KAnDN,EAmDM;AAnDDK,MAAE,EAAC,kBAmDF;AAnDqB,aAAM;AAmD3B,GAnDN,gBACEL,oBAiDM,KAjDN,EAiDM;AAjDDK,MAAE,EAAC;AAiDF,GAjDN,EAAgB,cACdL,oBAoCM,KApCN,EAoCM;AAnCJM,SAKC,EALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCI,GApCN,EAMG,cAEDN,oBAQO,KARP,EAQO;AAPLK,MAAE,EAAC,cAOE;AANLC,SAKC,EALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAMK,GARP,CAFC,eAWDN,oBASO,KATP,EASO;AARLK,MAAE,EAAC,cAQE;AAPLC,SAMC,EAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOK,GATP,CAXC,eAqBDN,oBAQO,KARP,EAQO;AAPLK,MAAE,EAAC,cAOE;AANLC,SAKC,EALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAMK,GARP,CArBC,CANH,CADc,eAuCdN,oBAAsD,QAAtD,EAAsD;AAA9CK,MAAE,EAAC,YAA2C;AAA9BE,WAAO,EAAC;AAAsB,GAAtD,EAAyC,MAAzC,CAvCc,eAwCdP,oBAAsC,QAAtC,EAAsC;AAA9BO,WAAO,EAAC;AAAsB,GAAtC,EAAyB,MAAzB,CAxCc,eAyCdP,oBAA0C,QAA1C,EAA0C;AAAlCO,WAAO,EAAC;AAA0B,GAA1C,EAA2B,QAA3B,CAzCc,eA0CdP,oBAAM,IAAN,CA1Cc,eA2CdA,oBAKC,UALD,EAKC;AALSK,MAAE,EAAC,cAKZ;AAL2BC,SAAkC,EAAlC;AAAA;AAAA;AAAA;AAK3B,GALD,EAA+D,8KAA/D,CA3Cc,CAAhB,EADF,CAoDK,CArDP;;AAAA;;;;;;6DAtLFF,qCACAJ,oBA2OO,MA3OP,cA2OO,CA1OLQ,UA0OK,EA3NLC,aAmKQC,gBAnKR,EAmKQ,IAnKR,EAmKQ;wBAnKD;AAAA,aAmKP,YAnKO;AAAA,MAmKC;;;;AAAA,GAnKR,CA2NK,EAtDLC,UAsDK,CA3OP","names":["lang","_createElementVNode","charset","name","content","_createCommentVNode","id","style","onclick","_hoisted_2","_createVNode","_component_go_js","_hoisted_4"],"sourceRoot":"","sources":["C:\\qp_box\\_CodeField\\Neural-Lego\\frontend\\src\\views\\CanvasView.vue"],"sourcesContent":["<template>\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"utf-8\" />\r\n      <meta\r\n        name=\"viewport\"\r\n        content=\"width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover\"\r\n      />\r\n      <meta\r\n        name=\"description\"\r\n        content=\"A workflow diagram showing navigation between web pages, with an editable list of comments and to-dos.\"\r\n      />\r\n      <!-- <link rel=\"stylesheet\" href=\"style.css\" /> -->\r\n      <!-- Copyright 1998-2022 by Northwoods Software Corporation. -->\r\n      <title>Page Flow</title>\r\n    </head>\r\n\r\n    <go-js>\r\n      function init() { const $ = go.GraphObject.make; // for conciseness in\r\n      defining templates var yellowgrad = $(go.Brush, \"Linear\", { 0: \"#bde0fe\",\r\n      1: \"#bde0fe\", }); var greengrad = $(go.Brush, \"Linear\", { 0: \"#fdffb6\", 1:\r\n      \"#fdffb6\", }); var bluegrad = $(go.Brush, \"Linear\", { 0: \"#caffbf\", 1:\r\n      \"#caffbf\", }); var redgrad = $(go.Brush, \"Linear\", { 0: \"#ffadad\", 1:\r\n      \"#ffadad\", }); var whitegrad = $(go.Brush, \"Linear\", { 0: \"#E7C5FC\", 1:\r\n      \"#E7C5FC\", }); var bigfont = \"bold 15pt Helvetica, Arial, sans-serif\"; var\r\n      smallfont = \"bold 13pt Helvetica, Arial, sans-serif\"; // Common text\r\n      styling function textStyle() { return { margin: 6, wrap:\r\n      go.TextBlock.WrapFit, textAlign: \"center\", editable: true, font: bigfont,\r\n      }; } myDiagram = $(go.Diagram, \"myDiagramDiv\", { // // have mouse wheel\r\n      events zoom in and out instead of scroll up and down\r\n      //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\r\n      initialAutoScale: go.Diagram.Uniform, \"linkingTool.direction\":\r\n      go.LinkingTool.ForwardsOnly, layout: $(go.LayeredDigraphLayout, {\r\n      isInitial: false, isOngoing: false, layerSpacing: 50, }),\r\n      \"undoManager.isEnabled\": true, }); var nodeSelectionAdornmentTemplate = $(\r\n      go.Adornment, \"Auto\", $(go.Shape, { fill: null, stroke: \"#979dac\",\r\n      strokeWidth: 2, strokeDashArray: [4, 2], }), $(go.Placeholder) ); //\r\n      define the Node template myDiagram.nodeTemplate = $( go.Node, \"Auto\", {\r\n      locationSpot: go.Spot.Center, }, new go.Binding(\"location\", \"loc\",\r\n      go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true,\r\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, // define\r\n      the node's outer shape, which will surround the TextBlock $(go.Shape,\r\n      \"Rectangle\", { fill: yellowgrad, stroke: null, portId: \"\", fromLinkable:\r\n      true, toLinkable: true, cursor: \"pointer\", toEndSegmentLength: 50,\r\n      fromEndSegmentLength: 50, }), $( go.TextBlock, \"ReLU\", { margin: 6, font:\r\n      bigfont, editable: true, minSize: new go.Size(40, NaN), }, new\r\n      go.Binding(\"text\", \"text\").makeTwoWay() ) ); // Data\r\n      myDiagram.nodeTemplateMap.add( \"Data\", $( go.Node, \"Auto\", { locationSpot:\r\n      go.Spot.Center, margin: new go.Margin(0, 0, 0, 0), }, new\r\n      go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n      go.Point.stringify ), { selectable: true, selectionAdornmentTemplate:\r\n      nodeSelectionAdornmentTemplate, }, $(go.Shape, \"Circle\", { fill: bluegrad,\r\n      portId: \"\", fromLinkable: true, cursor: \"pointer\", //fromEndSegmentLength:\r\n      40, stroke: \"#74c69d\", strokeWidth: 4, }), $( go.TextBlock, \"Data\",\r\n      textStyle(), { stroke: \"#2d6a4f\", minSize: new go.Size(40, NaN), }, new\r\n      go.Binding(\"text\", \"text\").makeTwoWay() ) ) );\r\n      myDiagram.nodeTemplateMap.add( \"End\", $( go.Node, \"Auto\", { locationSpot:\r\n      go.Spot.Center, }, new go.Binding(\"location\", \"loc\",\r\n      go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true,\r\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape,\r\n      \"Circle\", { fill: redgrad, portId: \"\", toLinkable: true, cursor:\r\n      \"pointer\", fromEndSegmentLength: 40, stroke: \"#df7373\", strokeWidth: 4,\r\n      }), $( go.TextBlock, \"End\", textStyle(), { stroke: \"#ad2e24\", minSize: new\r\n      go.Size(40, NaN), }, new go.Binding(\"text\", \"text\").makeTwoWay() ) ) );\r\n      myDiagram.nodeTemplateMap.add( \"ReLU\", $( go.Node, \"Auto\", { locationSpot:\r\n      go.Spot.Center, }, new go.Binding(\"location\", \"loc\",\r\n      go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true,\r\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape,\r\n      \"Ellipse\", { fill: greengrad, portId: \"\", fromLinkable: true, toLinkable:\r\n      true, cursor: \"pointer\", fromEndSegmentLength: 40, stroke: \"#ffd100\",\r\n      strokeWidth: 4, }), $( go.TextBlock, \"ReLU\", textStyle(), { stroke:\r\n      \"#e2711d\", // locationSpot: go.Spot.Center, //margin: new go.Margin(10, 0,\r\n      0, 0), minSize: new go.Size(60, NaN), }, new go.Binding(\"text\",\r\n      \"text\").makeTwoWay() ) ) ); var reasonTemplate = $( go.Panel, $( go.Panel,\r\n      \"Table\", { maxSize: new go.Size(200, 999), margin: new go.Margin(0, 3, 10,\r\n      3), defaultAlignment: go.Spot.Center, }, $(go.RowColumnDefinition, {\r\n      column: 2, width: 2, }), $( go.TextBlock, \"input = \", { margin: new\r\n      go.Margin(4, 0, 0, 0), maxSize: new go.Size(200, NaN), wrap:\r\n      go.TextBlock.WrapFit, //stroke: \"whitesmoke\", editable: true, font:\r\n      smallfont, row: 2, column: 0, stroke: \"#3e5c76\", }, new go.Binding(\"text\",\r\n      \"text0\").makeTwoWay() ), $( go.TextBlock, \"value\", { margin: new\r\n      go.Margin(4, 0, 0, 0), maxSize: new go.Size(200, NaN), wrap:\r\n      go.TextBlock.WrapFit, //stroke: \"whitesmoke\", editable: true, stroke:\r\n      \"#3e5c76\", font: smallfont, row: 2, column: 1, }, new go.Binding(\"text\",\r\n      \"text1\").makeTwoWay() ), $( go.TextBlock, \"output = \", { margin: new\r\n      go.Margin(4, 0, 0, 0), maxSize: new go.Size(200, NaN), wrap:\r\n      go.TextBlock.WrapFit, //stroke: \"whitesmoke\", editable: true, font:\r\n      smallfont, stroke: \"#3e5c76\", row: 3, column: 0, }, new go.Binding(\"text\",\r\n      \"text2\").makeTwoWay() ), $( go.TextBlock, \"value\", { margin: new\r\n      go.Margin(4, 0, 0, 9), maxSize: new go.Size(200, NaN), wrap:\r\n      go.TextBlock.WrapFit, //stroke: \"whitesmoke\", editable: true, font:\r\n      smallfont, stroke: \"#3e5c76\", row: 3, column: 1, }, new go.Binding(\"text\",\r\n      \"text3\").makeTwoWay() ) ) // end Table Panel );\r\n      myDiagram.nodeTemplateMap.add( \"FC\", $( go.Node, \"Auto\", { locationSpot:\r\n      go.Spot.Center, }, new go.Binding(\"location\", \"loc\",\r\n      go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true,\r\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape,\r\n      \"RoundedRectangle\", { fill: yellowgrad, stroke: \"#4ea8de\", strokeWidth: 4,\r\n      portId: \"\", fromLinkable: true, toLinkable: true, cursor: \"pointer\",\r\n      toEndSegmentLength: 50, fromEndSegmentLength: 40, }), $( go.Panel,\r\n      \"Vertical\", { defaultAlignment: go.Spot.Center, }, $( go.TextBlock, \"FC\",\r\n      textStyle(), { stroke: \"#3e5c76\", margin: new go.Margin(8, 0, 0, 0),\r\n      minSize: new go.Size(100, NaN), //maxSize: new go.Size(200, NaN) }, new\r\n      go.Binding(\"text\", \"text\").makeTwoWay() ), $( go.Panel, \"Vertical\", {\r\n      defaultAlignment: go.Spot.TopLeft, itemTemplate: reasonTemplate, }, new\r\n      go.Binding(\"itemArray\", \"reasonsList\").makeTwoWay() ) ) ) ); var\r\n      linkSelectionAdornmentTemplate = $( go.Adornment, \"Link\", $( go.Shape, //\r\n      isPanelMain declares that this Shape shares the Link.geometry {\r\n      isPanelMain: true, fill: null, stroke: \"deepskyblue\", strokeWidth: 2.5, }\r\n      ) // use selection object's strokeWidth ); // replace the default Link\r\n      template in the linkTemplateMap myDiagram.linkTemplate = $( go.Link, //\r\n      the whole link panel { selectable: true, selectionAdornmentTemplate:\r\n      linkSelectionAdornmentTemplate, }, new go.Binding(\"points\").makeTwoWay(),\r\n      { //curve: go.Link.Bezier, toShortLength: 15, }, //new\r\n      go.Binding(\"curviness\", \"curviness\"), $( go.Shape, // the link shape {\r\n      stroke: \"#979dac\", strokeWidth: 2.5, } ), $( go.Shape, // the arrowhead {\r\n      toArrow: \"kite\", fill: \"#979dac\", stroke: null, scale: 2, } ) );\r\n      myDiagram.nodeTemplateMap.add( \"RNN\", $( go.Node, \"Auto\", { locationSpot:\r\n      go.Spot.Center, }, new go.Binding(\"location\", \"loc\",\r\n      go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true,\r\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape,\r\n      \"RoundedRectangle\", { fill: whitegrad, stroke: \"#CF8BF9\", strokeWidth: 4,\r\n      }), $( go.TextBlock, \"RNN\\n(unavailable)\", textStyle(), { margin: 9,\r\n      maxSize: new go.Size(200, NaN), wrap: go.TextBlock.WrapFit, editable:\r\n      true, stroke: \"#560788\", font: smallfont, }, new go.Binding(\"text\",\r\n      \"text\").makeTwoWay() ) // no ports, because no links are allowed to\r\n      connect with a comment ) ); myDiagram.nodeTemplateMap.add( \"CNN\", $(\r\n      go.Node, \"Auto\", { locationSpot: go.Spot.Center, }, new\r\n      go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n      go.Point.stringify ), { selectable: true, selectionAdornmentTemplate:\r\n      nodeSelectionAdornmentTemplate, }, $(go.Shape, \"RoundedRectangle\", { fill:\r\n      whitegrad, stroke: \"#CF8BF9\", strokeWidth: 4, }), $( go.TextBlock,\r\n      \"CNN\\n(unavailable)\", textStyle(), { margin: 9, maxSize: new go.Size(200,\r\n      NaN), wrap: go.TextBlock.WrapFit, editable: true, stroke: \"#560788\", font:\r\n      smallfont, }, new go.Binding(\"text\", \"text\").makeTwoWay() ) // no ports,\r\n      because no links are allowed to connect with a comment ) );\r\n      myDiagram.nodeTemplateMap.add( \"LSTM\", $( go.Node, \"Auto\", { locationSpot:\r\n      go.Spot.Center, }, new go.Binding(\"location\", \"loc\",\r\n      go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true,\r\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape,\r\n      \"RoundedRectangle\", { fill: whitegrad, stroke: \"#CF8BF9\", strokeWidth: 4,\r\n      }), $( go.TextBlock, \"LSTM\\n(unavailable)\", textStyle(), { margin: 9,\r\n      maxSize: new go.Size(200, NaN), wrap: go.TextBlock.WrapFit, editable:\r\n      true, stroke: \"#560788\", font: smallfont, }, new go.Binding(\"text\",\r\n      \"text\").makeTwoWay() ) // no ports, because no links are allowed to\r\n      connect with a comment ) ); myDiagram.nodeTemplateMap.add( \"Softmax\", $(\r\n      go.Node, \"Auto\", { locationSpot: go.Spot.Center, }, new\r\n      go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n      go.Point.stringify ), { selectable: true, selectionAdornmentTemplate:\r\n      nodeSelectionAdornmentTemplate, }, $(go.Shape, \"RoundedRectangle\", { fill:\r\n      whitegrad, stroke: \"#CF8BF9\", strokeWidth: 4, }), $( go.TextBlock,\r\n      \"Softmax\\n(unavailable)\", textStyle(), { margin: 9, maxSize: new\r\n      go.Size(200, NaN), wrap: go.TextBlock.WrapFit, editable: true, stroke:\r\n      \"#560788\", font: smallfont, }, new go.Binding(\"text\", \"text\").makeTwoWay()\r\n      ) // no ports, because no links are allowed to connect with a comment ) );\r\n      myDiagram.nodeTemplateMap.add( \"Maximum Polling\", $( go.Node, \"Auto\", {\r\n      locationSpot: go.Spot.Center, }, new go.Binding(\"location\", \"loc\",\r\n      go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true,\r\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, $(go.Shape,\r\n      \"RoundedRectangle\", { fill: whitegrad, stroke: \"#CF8BF9\", strokeWidth: 4,\r\n      }), $( go.TextBlock, \"Maximum\\nPolling\\n(unavailable)\", textStyle(), {\r\n      margin: 9, maxSize: new go.Size(200, NaN), wrap: go.TextBlock.WrapFit,\r\n      editable: true, stroke: \"#560788\", font: smallfont, }, new\r\n      go.Binding(\"text\", \"text\").makeTwoWay() ) // no ports, because no links\r\n      are allowed to connect with a comment ) ); var palette = $( go.Palette,\r\n      \"myPaletteDiv\", // create a new Palette in the HTML DIV element { // share\r\n      the template map with the Palette nodeTemplateMap:\r\n      myDiagram.nodeTemplateMap, autoScale: go.Diagram.Uniform, // everything\r\n      always fits in viewport } ); palette.model.nodeDataArray = [ { category:\r\n      \"Data\", }, { category: \"ReLU\", }, { category: \"FC\", reasonsList: [{}], },\r\n      { category: \"End\", }, { category: \"CNN\", }, { category: \"RNN\", }, {\r\n      category: \"LSTM\", }, { category: \"Softmax\", }, { category: \"Maximum\r\n      Polling\", }, ]; // read in the JSON-format data from the \"mySavedModel\"\r\n      element load(); layout(); } function layout() {\r\n      myDiagram.layoutDiagram(true); } // Show the diagram's model in JSON\r\n      format function save() { document.getElementById(\"mySavedModel\").value =\r\n      myDiagram.model.toJson(); myDiagram.isModified = false; } function load()\r\n      { myDiagram.model = go.Model.fromJson(\r\n      document.getElementById(\"mySavedModel\").value ); }\r\n      window.addEventListener(\"DOMContentLoaded\", init);\r\n    </go-js>\r\n\r\n    <body>\r\n      <div id=\"allSampleContent\" class=\"p-4 w-full\">\r\n        <div id=\"sample\">\r\n          <div\r\n            style=\"\r\n              width: 100%;\r\n              margin-bottom: 10px;\r\n              display: flex;\r\n              justify-content: space-between;\r\n            \"\r\n          >\r\n            <div\r\n              id=\"myPaletteDiv\"\r\n              style=\"\r\n                width: 150px;\r\n                margin-right: 10px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n            <div\r\n              id=\"myDiagramDiv\"\r\n              style=\"\r\n                flex-grow: 3;\r\n                margin-right: 10px;\r\n                height: 600px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n            <div\r\n              id=\"myDiagramDiv\"\r\n              style=\"\r\n                flex-grow: 2;\r\n                height: 600px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n          </div>\r\n\r\n          <button id=\"SaveButton\" onclick=\"save()\">Save</button>\r\n          <button onclick=\"load()\">Load</button>\r\n          <button onclick=\"layout()\">Layout</button>\r\n          <br />\r\n          <textarea id=\"mySavedModel\" style=\"width: 100%; height: 300px\">\r\n{ \"class\": \"GraphLinksModel\", \r\n\"nodeDataArray\": [ {\"category\":\"Data\", \"key\":-1, \"loc\":\"-70.5 -90.19999980926514\"} ], \r\n\"linkDataArray\": []}\r\n  </textarea\r\n          >\r\n        </div>\r\n      </div>\r\n    </body>\r\n  </html>\r\n</template>\r\n\r\n\r\n\r\n<script id=\"code\">\r\nimport { go } from \"../assets/go.js\";\r\n\r\nexport default {\r\n  name: \"canvasView\",\r\n  data() {\r\n    return {};\r\n  },\r\n\r\n  methods: {},\r\n\r\n  components: {\r\n    \"go-js\": {\r\n      render(createElement) {\r\n        return createElement(\"script\", {\r\n          attrs: {\r\n            type: \"text/javascript\",\r\n            src: \"/assers/go.js\",\r\n          },\r\n        });\r\n      },\r\n    },\r\n  },\r\n\r\n  //   mounted() {\r\n  //     let script = document.createElement(\"script\");\r\n  //     script.type = \"text/javascript\";\r\n  //     script.src = \"/assets/go.js\";\r\n  //     document.body.appendChild(script);\r\n  //   },\r\n};\r\n\r\n// ---------------------------------\r\n// ---------------------------------\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n#myPaletteDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.015);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myDiagramDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.01);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myPaletteDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n#myDiagramDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n.button,\r\nbutton {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(31, 73, 99, var(--tw-bg-opacity));\r\n  border-radius: 0.25rem;\r\n  display: inline-block;\r\n  margin: 0.25rem;\r\n  font-size: 12pt;\r\n  font-family: Helvetica, Arial;\r\n  padding-top: 0.25rem;\r\n  padding-bottom: 0.25rem;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n}\r\n\r\n.button:hover,\r\nbutton:hover {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(98, 127, 145, var(--tw-bg-opacity));\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n  transition-property: background-color, border-color, color, fill, stroke;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n  transition-duration: 150ms;\r\n  transition-duration: 0.2s;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}