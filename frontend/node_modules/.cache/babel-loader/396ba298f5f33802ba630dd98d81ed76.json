{"ast":null,"code":"import * as go from \"/public/go.js\";\nexport default {\n  name: \"CanvasView\",\n  mounted: function mounted() {\n    var $ = go.GraphObject.make; // for conciseness in defining templates\n\n    var yellowgrad = $(go.Brush, \"Linear\", {\n      0: \"#bde0fe\",\n      1: \"#bde0fe\"\n    });\n    var greengrad = $(go.Brush, \"Linear\", {\n      0: \"#fdffb6\",\n      1: \"#fdffb6\"\n    });\n    var bluegrad = $(go.Brush, \"Linear\", {\n      0: \"#caffbf\",\n      1: \"#caffbf\"\n    });\n    var redgrad = $(go.Brush, \"Linear\", {\n      0: \"#ffadad\",\n      1: \"#ffadad\"\n    });\n    var whitegrad = $(go.Brush, \"Linear\", {\n      0: \"#E7C5FC\",\n      1: \"#E7C5FC\"\n    });\n    var bigfont = \"bold 15pt Helvetica, Arial, sans-serif\";\n    var smallfont = \"bold 13pt Helvetica, Arial, sans-serif\";\n    var myDiagram = $(go.Diagram, \"myDiagramDiv\", {\n      // // have mouse wheel events zoom in and out instead of scroll up and down\n      //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\n      initialAutoScale: go.Diagram.Uniform,\n      \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\n      layout: $(go.LayeredDigraphLayout, {\n        isInitial: false,\n        isOngoing: false,\n        layerSpacing: 50\n      }),\n      \"undoManager.isEnabled\": true\n    });\n    var nodeSelectionAdornmentTemplate = $(go.Adornment, \"Auto\", $(go.Shape, {\n      fill: null,\n      stroke: \"#979dac\",\n      strokeWidth: 2,\n      strokeDashArray: [4, 2]\n    }), $(go.Placeholder)); // define the Node template\n\n    myDiagram.nodeTemplate = $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, // define the node's outer shape, which will surround the TextBlock\n    $(go.Shape, \"Rectangle\", {\n      fill: yellowgrad,\n      stroke: null,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true,\n      cursor: \"pointer\",\n      toEndSegmentLength: 50,\n      fromEndSegmentLength: 50\n    }), $(go.TextBlock, \"ReLU\", {\n      margin: 6,\n      font: bigfont,\n      editable: true,\n      minSize: new go.Size(40, NaN)\n    }, new go.Binding(\"text\", \"text\").makeTwoWay())); // Data\n\n    myDiagram.nodeTemplateMap.add(\"Data\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center,\n      margin: new go.Margin(0, 0, 0, 0)\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"Circle\", {\n      fill: bluegrad,\n      portId: \"\",\n      fromLinkable: true,\n      cursor: \"pointer\",\n      //fromEndSegmentLength: 40,\n      stroke: \"#74c69d\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"Data\", textStyle(), {\n      stroke: \"#2d6a4f\",\n      minSize: new go.Size(40, NaN)\n    }, new go.Binding(\"text\", \"text\").makeTwoWay())));\n    myDiagram.nodeTemplateMap.add(\"End\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"Circle\", {\n      fill: redgrad,\n      portId: \"\",\n      toLinkable: true,\n      cursor: \"pointer\",\n      fromEndSegmentLength: 40,\n      stroke: \"#df7373\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"End\", textStyle(), {\n      stroke: \"#ad2e24\",\n      minSize: new go.Size(40, NaN)\n    }, new go.Binding(\"text\", \"text\").makeTwoWay())));\n    myDiagram.nodeTemplateMap.add(\"ReLU\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"Ellipse\", {\n      fill: greengrad,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true,\n      cursor: \"pointer\",\n      fromEndSegmentLength: 40,\n      stroke: \"#ffd100\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"ReLU\", textStyle(), {\n      stroke: \"#e2711d\",\n      // locationSpot: go.Spot.Center,\n      //margin: new go.Margin(10, 0, 0, 0),\n      minSize: new go.Size(60, NaN)\n    }, new go.Binding(\"text\", \"text\").makeTwoWay())));\n    var reasonTemplate = $(go.Panel, $(go.Panel, \"Table\", {\n      maxSize: new go.Size(200, 999),\n      margin: new go.Margin(0, 3, 10, 3),\n      defaultAlignment: go.Spot.Center\n    }, $(go.RowColumnDefinition, {\n      column: 2,\n      width: 2\n    }), $(go.TextBlock, \"input = \", {\n      margin: new go.Margin(4, 0, 0, 0),\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      //stroke: \"whitesmoke\",\n      editable: true,\n      font: smallfont,\n      row: 2,\n      column: 0,\n      stroke: \"#3e5c76\"\n    }, new go.Binding(\"text\", \"text0\").makeTwoWay()), $(go.TextBlock, \"value\", {\n      margin: new go.Margin(4, 0, 0, 0),\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      //stroke: \"whitesmoke\",\n      editable: true,\n      stroke: \"#3e5c76\",\n      font: smallfont,\n      row: 2,\n      column: 1\n    }, new go.Binding(\"text\", \"text1\").makeTwoWay()), $(go.TextBlock, \"output = \", {\n      margin: new go.Margin(4, 0, 0, 0),\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      //stroke: \"whitesmoke\",\n      editable: true,\n      font: smallfont,\n      stroke: \"#3e5c76\",\n      row: 3,\n      column: 0\n    }, new go.Binding(\"text\", \"text2\").makeTwoWay()), $(go.TextBlock, \"value\", {\n      margin: new go.Margin(4, 0, 0, 9),\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      //stroke: \"whitesmoke\",\n      editable: true,\n      font: smallfont,\n      stroke: \"#3e5c76\",\n      row: 3,\n      column: 1\n    }, new go.Binding(\"text\", \"text3\").makeTwoWay())) // end Table Panel\n    );\n    myDiagram.nodeTemplateMap.add(\"FC\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"RoundedRectangle\", {\n      fill: yellowgrad,\n      stroke: \"#4ea8de\",\n      strokeWidth: 4,\n      portId: \"\",\n      fromLinkable: true,\n      toLinkable: true,\n      cursor: \"pointer\",\n      toEndSegmentLength: 50,\n      fromEndSegmentLength: 40\n    }), $(go.Panel, \"Vertical\", {\n      defaultAlignment: go.Spot.Center\n    }, $(go.TextBlock, \"FC\", textStyle(), {\n      stroke: \"#3e5c76\",\n      margin: new go.Margin(8, 0, 0, 0),\n      minSize: new go.Size(100, NaN) //maxSize: new go.Size(200, NaN)\n\n    }, new go.Binding(\"text\", \"text\").makeTwoWay()), $(go.Panel, \"Vertical\", {\n      defaultAlignment: go.Spot.TopLeft,\n      itemTemplate: reasonTemplate\n    }, new go.Binding(\"itemArray\", \"reasonsList\").makeTwoWay()))));\n    var linkSelectionAdornmentTemplate = $(go.Adornment, \"Link\", $(go.Shape, // isPanelMain declares that this Shape shares the Link.geometry\n    {\n      isPanelMain: true,\n      fill: null,\n      stroke: \"deepskyblue\",\n      strokeWidth: 2.5\n    }) // use selection object's strokeWidth\n    ); // replace the default Link template in the linkTemplateMap\n\n    myDiagram.linkTemplate = $(go.Link, // the whole link panel\n    {\n      selectable: true,\n      selectionAdornmentTemplate: linkSelectionAdornmentTemplate\n    }, new go.Binding(\"points\").makeTwoWay(), {\n      //curve: go.Link.Bezier,\n      toShortLength: 15\n    }, //new go.Binding(\"curviness\", \"curviness\"),\n    $(go.Shape, // the link shape\n    {\n      stroke: \"#979dac\",\n      strokeWidth: 2.5\n    }), $(go.Shape, // the arrowhead\n    {\n      toArrow: \"kite\",\n      fill: \"#979dac\",\n      stroke: null,\n      scale: 2\n    }));\n    myDiagram.nodeTemplateMap.add(\"RNN\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"RoundedRectangle\", {\n      fill: whitegrad,\n      stroke: \"#CF8BF9\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"RNN\\n(unavailable)\", textStyle(), {\n      margin: 9,\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      editable: true,\n      stroke: \"#560788\",\n      font: smallfont\n    }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n    ));\n    myDiagram.nodeTemplateMap.add(\"CNN\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"RoundedRectangle\", {\n      fill: whitegrad,\n      stroke: \"#CF8BF9\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"CNN\\n(unavailable)\", textStyle(), {\n      margin: 9,\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      editable: true,\n      stroke: \"#560788\",\n      font: smallfont\n    }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n    ));\n    myDiagram.nodeTemplateMap.add(\"LSTM\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"RoundedRectangle\", {\n      fill: whitegrad,\n      stroke: \"#CF8BF9\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"LSTM\\n(unavailable)\", textStyle(), {\n      margin: 9,\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      editable: true,\n      stroke: \"#560788\",\n      font: smallfont\n    }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n    ));\n    myDiagram.nodeTemplateMap.add(\"Softmax\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"RoundedRectangle\", {\n      fill: whitegrad,\n      stroke: \"#CF8BF9\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"Softmax\\n(unavailable)\", textStyle(), {\n      margin: 9,\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      editable: true,\n      stroke: \"#560788\",\n      font: smallfont\n    }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n    ));\n    myDiagram.nodeTemplateMap.add(\"Maximum Polling\", $(go.Node, \"Auto\", {\n      locationSpot: go.Spot.Center\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n      selectable: true,\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n    }, $(go.Shape, \"RoundedRectangle\", {\n      fill: whitegrad,\n      stroke: \"#CF8BF9\",\n      strokeWidth: 4\n    }), $(go.TextBlock, \"Maximum\\nPolling\\n(unavailable)\", textStyle(), {\n      margin: 9,\n      maxSize: new go.Size(200, NaN),\n      wrap: go.TextBlock.WrapFit,\n      editable: true,\n      stroke: \"#560788\",\n      font: smallfont\n    }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n    ));\n    var palette = $(go.Palette, \"myPaletteDiv\", // create a new Palette in the HTML DIV element\n    {\n      // share the template map with the Palette\n      nodeTemplateMap: myDiagram.nodeTemplateMap,\n      autoScale: go.Diagram.Uniform // everything always fits in viewport\n\n    });\n    palette.model.nodeDataArray = [{\n      category: \"Data\"\n    }, {\n      category: \"ReLU\"\n    }, {\n      category: \"FC\",\n      reasonsList: [{}]\n    }, {\n      category: \"End\"\n    }, {\n      category: \"CNN\"\n    }, {\n      category: \"RNN\"\n    }, {\n      category: \"LSTM\"\n    }, {\n      category: \"Softmax\"\n    }, {\n      category: \"Maximum Polling\"\n    }];\n  },\n  methods: {//       save() {\n    //     console.log(\"save\");\n    //     // myDiagram.layoutDiagram(true);\n    //   },\n    //       load() {\n    //     console.log(\"load\");\n    //     // myDiagram.layoutDiagram(true);\n    //   },\n    //   layout() {\n    //     // console.log(\"layout\");\n    //     // myDiagram.layoutDiagram(true);\n    //   },\n  }\n};","map":{"version":3,"mappings":"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","names":["go","name","mounted","$","GraphObject","make","yellowgrad","Brush","greengrad","bluegrad","redgrad","whitegrad","bigfont","smallfont","myDiagram","Diagram","initialAutoScale","Uniform","LinkingTool","ForwardsOnly","layout","LayeredDigraphLayout","isInitial","isOngoing","layerSpacing","nodeSelectionAdornmentTemplate","Adornment","Shape","fill","stroke","strokeWidth","strokeDashArray","Placeholder","nodeTemplate","Node","locationSpot","Spot","Center","Binding","Point","parse","makeTwoWay","stringify","selectable","selectionAdornmentTemplate","portId","fromLinkable","toLinkable","cursor","toEndSegmentLength","fromEndSegmentLength","TextBlock","margin","font","editable","minSize","Size","NaN","nodeTemplateMap","add","Margin","textStyle","reasonTemplate","Panel","maxSize","defaultAlignment","RowColumnDefinition","column","width","wrap","WrapFit","row","TopLeft","itemTemplate","linkSelectionAdornmentTemplate","isPanelMain","linkTemplate","Link","toShortLength","toArrow","scale","palette","Palette","autoScale","model","nodeDataArray","category","reasonsList","methods"],"sourceRoot":"","sources":["C:\\qp_box\\_CodeField\\Neural-Lego\\frontend\\src\\views\\CanvasView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div id=\"allSampleContent\" class=\"p-4 w-full\">\r\n      <div id=\"sample\">\r\n        <div\r\n          style=\"\r\n            width: 100%;\r\n            margin-bottom: 10px;\r\n            display: flex;\r\n            justify-content: space-between;\r\n          \"\r\n        >\r\n          <div\r\n            id=\"myPaletteDiv\"\r\n            style=\"\r\n              width: 150px;\r\n              margin-right: 10px;\r\n              background-color: whitesmoke;\r\n              border: solid 4px #82929b;\r\n            \"\r\n          ></div>\r\n          <div\r\n            id=\"myDiagramDiv\"\r\n            style=\"\r\n              flex-grow: 3;\r\n              margin-right: 10px;\r\n              height: 600px;\r\n              background-color: whitesmoke;\r\n              border: solid 4px #82929b;\r\n            \"\r\n          ></div>\r\n          <div\r\n            id=\"myDiagramDiv\"\r\n            style=\"\r\n              flex-grow: 2;\r\n              height: 600px;\r\n              background-color: whitesmoke;\r\n              border: solid 4px #82929b;\r\n            \"\r\n          ></div>\r\n        </div>\r\n\r\n        <button type=\"submit\" @click=\"save()\">Save</button>\r\n        <button type=\"submit\" @click=\"load()\">Load</button>\r\n        <button type=\"submit\" @click=\"layout()\">Layout</button>\r\n        <br />\r\n        <textarea id=\"mySavedModel\" style=\"width: 100%; height: 300px\">\r\n{ \"class\": \"GraphLinksModel\", \r\n\"nodeDataArray\": [ {\"category\":\"Data\", \"key\":-1, \"loc\":\"-70.5 -90.19999980926514\"} ], \r\n\"linkDataArray\": []}\r\n  </textarea\r\n        >\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n\r\n<script id='code'>\r\nimport * as go from \"/public/go.js\";\r\n\r\nexport default {\r\n  name: \"CanvasView\",\r\n  mounted() {\r\n    const $ = go.GraphObject.make; // for conciseness in defining templates\r\n\r\n    var yellowgrad = $(go.Brush, \"Linear\", {\r\n                    0: \"#bde0fe\",\r\n                    1: \"#bde0fe\"\r\n                });\r\n                var greengrad = $(go.Brush, \"Linear\", {\r\n                    0: \"#fdffb6\",\r\n                    1: \"#fdffb6\"\r\n                });\r\n                var bluegrad = $(go.Brush, \"Linear\", {\r\n                    0: \"#caffbf\",\r\n                    1: \"#caffbf\",\r\n                });\r\n                var redgrad = $(go.Brush, \"Linear\", {\r\n                    0: \"#ffadad\",\r\n                    1: \"#ffadad\"\r\n                });\r\n                var whitegrad = $(go.Brush, \"Linear\", {\r\n                    0: \"#E7C5FC\",\r\n                    1: \"#E7C5FC\"\r\n                });\r\n                    var bigfont = \"bold 15pt Helvetica, Arial, sans-serif\";\r\n                var smallfont = \"bold 13pt Helvetica, Arial, sans-serif\";\r\n\r\n    const myDiagram = $(go.Diagram, \"myDiagramDiv\", {\r\n                    // // have mouse wheel events zoom in and out instead of scroll up and down\r\n                    //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\r\n                    initialAutoScale: go.Diagram.Uniform,\r\n                    \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\r\n                    layout: $(go.LayeredDigraphLayout, {\r\n                        isInitial: false,\r\n                        isOngoing: false,\r\n                        layerSpacing: 50\r\n                    }),\r\n                    \"undoManager.isEnabled\": true\r\n                });\r\n\r\n\r\n        var nodeSelectionAdornmentTemplate =\r\n                    $(go.Adornment, \"Auto\",\r\n                        $(go.Shape, {\r\n                            fill: null,\r\n                            stroke: \"#979dac\",\r\n                            strokeWidth: 2,\r\n                            strokeDashArray: [4, 2]\r\n                        }),\r\n                        $(go.Placeholder)\r\n                    );\r\n\r\n                // define the Node template\r\n                myDiagram.nodeTemplate = $(go.Node, \"Auto\", {\r\n                        locationSpot: go.Spot.Center\r\n                    },\r\n                    new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                        selectable: true,\r\n                        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                    },\r\n                    // define the node's outer shape, which will surround the TextBlock\r\n                    $(go.Shape, \"Rectangle\", {\r\n                        fill: yellowgrad,\r\n                        stroke: null,\r\n                        portId: \"\",\r\n                        fromLinkable: true,\r\n                        toLinkable: true,\r\n                        cursor: \"pointer\",\r\n                        toEndSegmentLength: 50,\r\n                        fromEndSegmentLength: 50\r\n                    }),\r\n                    $(go.TextBlock, \"ReLU\", {\r\n                            margin: 6,\r\n                            font: bigfont,\r\n                            editable: true,\r\n                            minSize: new go.Size(40, NaN)\r\n                        },\r\n                        new go.Binding(\"text\", \"text\").makeTwoWay()));\r\n\r\n                // Data\r\n                myDiagram.nodeTemplateMap.add(\"Data\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center,\r\n                            margin: new go.Margin(0, 0, 0, 0),\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"Circle\", {\r\n                            fill: bluegrad,\r\n                            portId: \"\",\r\n                            fromLinkable: true,\r\n                            cursor: \"pointer\",\r\n                            //fromEndSegmentLength: 40,\r\n                            stroke: \"#74c69d\",\r\n\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"Data\", textStyle(), {\r\n                                stroke: \"#2d6a4f\",\r\n                                minSize: new go.Size(40, NaN)\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay(),\r\n                        )\r\n                    ));\r\n\r\n                myDiagram.nodeTemplateMap.add(\"End\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"Circle\", {\r\n                            fill: redgrad,\r\n                            portId: \"\",\r\n                            toLinkable: true,\r\n                            cursor: \"pointer\",\r\n                            fromEndSegmentLength: 40,\r\n                            stroke: \"#df7373\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"End\", textStyle(), {\r\n                                stroke: \"#ad2e24\",\r\n                                minSize: new go.Size(40, NaN)\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay(),\r\n                        )\r\n                    ));\r\n\r\n                myDiagram.nodeTemplateMap.add(\"ReLU\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"Ellipse\", {\r\n                            fill: greengrad,\r\n                            portId: \"\",\r\n                            fromLinkable: true,\r\n                            toLinkable: true,\r\n                            cursor: \"pointer\",\r\n                            fromEndSegmentLength: 40,\r\n                            stroke: \"#ffd100\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"ReLU\", textStyle(), {\r\n                                stroke: \"#e2711d\",\r\n                                // locationSpot: go.Spot.Center,\r\n                                //margin: new go.Margin(10, 0, 0, 0),\r\n                                minSize: new go.Size(60, NaN)\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay(),\r\n                        )\r\n                    ));\r\n\r\n                var reasonTemplate = $(go.Panel,\r\n                    $(go.Panel, \"Table\", {\r\n                            maxSize: new go.Size(200, 999),\r\n                            margin: new go.Margin(0, 3, 10, 3),\r\n                            defaultAlignment: go.Spot.Center\r\n                        },\r\n                        $(go.RowColumnDefinition, {\r\n                            column: 2,\r\n                            width: 2\r\n                        }),\r\n                        $(go.TextBlock, \"input = \", {\r\n                                margin: new go.Margin(4, 0, 0, 0),\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                //stroke: \"whitesmoke\",\r\n                                editable: true,\r\n                                font: smallfont,\r\n                                row: 2,\r\n                                column: 0,\r\n                                stroke: \"#3e5c76\"\r\n                            },\r\n                            new go.Binding(\"text\", \"text0\").makeTwoWay()),\r\n\r\n                        $(go.TextBlock, \"value\", {\r\n                                margin: new go.Margin(4, 0, 0, 0),\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                //stroke: \"whitesmoke\",\r\n                                editable: true,\r\n                                stroke: \"#3e5c76\",\r\n                                font: smallfont,\r\n                                row: 2,\r\n                                column: 1\r\n                            },\r\n                            new go.Binding(\"text\", \"text1\").makeTwoWay()),\r\n\r\n                        $(go.TextBlock, \"output = \", {\r\n                                margin: new go.Margin(4, 0, 0, 0),\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                //stroke: \"whitesmoke\",\r\n                                editable: true,\r\n                                font: smallfont,\r\n                                stroke: \"#3e5c76\",\r\n                                row: 3,\r\n                                column: 0\r\n                            },\r\n                            new go.Binding(\"text\", \"text2\").makeTwoWay()),\r\n\r\n                        $(go.TextBlock, \"value\", {\r\n                                margin: new go.Margin(4, 0, 0, 9),\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                //stroke: \"whitesmoke\",\r\n                                editable: true,\r\n                                font: smallfont,\r\n                                stroke: \"#3e5c76\",\r\n                                row: 3,\r\n                                column: 1\r\n                            },\r\n                            new go.Binding(\"text\", \"text3\").makeTwoWay()),\r\n\r\n\r\n                    ) // end Table Panel\r\n                );\r\n\r\n\r\n                myDiagram.nodeTemplateMap.add(\"FC\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"RoundedRectangle\", {\r\n                            fill: yellowgrad,\r\n                            stroke: \"#4ea8de\",\r\n                            strokeWidth: 4,\r\n                            portId: \"\",\r\n                            fromLinkable: true,\r\n                            toLinkable: true,\r\n                            cursor: \"pointer\",\r\n                            toEndSegmentLength: 50,\r\n                            fromEndSegmentLength: 40\r\n                        }),\r\n                        $(go.Panel, \"Vertical\", {\r\n                                defaultAlignment: go.Spot.Center\r\n                            },\r\n\r\n                            $(go.TextBlock, \"FC\", textStyle(), {\r\n                                    stroke: \"#3e5c76\",\r\n                                    margin: new go.Margin(8, 0, 0, 0),\r\n                                    minSize: new go.Size(100, NaN)\r\n                                        //maxSize: new go.Size(200, NaN)\r\n                                },\r\n                                new go.Binding(\"text\", \"text\").makeTwoWay()),\r\n\r\n                            $(go.Panel, \"Vertical\", {\r\n                                    defaultAlignment: go.Spot.TopLeft,\r\n                                    itemTemplate: reasonTemplate\r\n                                },\r\n                                new go.Binding(\"itemArray\", \"reasonsList\").makeTwoWay()\r\n                            )\r\n                        )\r\n                    ));\r\n\r\n                var linkSelectionAdornmentTemplate =\r\n                    $(go.Adornment, \"Link\",\r\n                        $(go.Shape,\r\n                            // isPanelMain declares that this Shape shares the Link.geometry\r\n                            {\r\n                                isPanelMain: true,\r\n                                fill: null,\r\n                                stroke: \"deepskyblue\",\r\n                                strokeWidth: 2.5\r\n                            }) // use selection object's strokeWidth\r\n                    );\r\n                // replace the default Link template in the linkTemplateMap\r\n                myDiagram.linkTemplate =\r\n                    $(go.Link, // the whole link panel\r\n                        {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: linkSelectionAdornmentTemplate\r\n                        },\r\n                        new go.Binding(\"points\").makeTwoWay(), {\r\n                            //curve: go.Link.Bezier,\r\n                            toShortLength: 15\r\n                        },\r\n                        //new go.Binding(\"curviness\", \"curviness\"),\r\n                        $(go.Shape, // the link shape\r\n                            {\r\n                                stroke: \"#979dac\",\r\n                                strokeWidth: 2.5\r\n                            }),\r\n                        $(go.Shape, // the arrowhead\r\n                            {\r\n                                toArrow: \"kite\",\r\n                                fill: \"#979dac\",\r\n                                stroke: null,\r\n                                scale: 2\r\n                            })\r\n                    );\r\n\r\n                myDiagram.nodeTemplateMap.add(\"RNN\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"RoundedRectangle\", {\r\n                            fill: whitegrad,\r\n                            stroke: \"#CF8BF9\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"RNN\\n(unavailable)\", textStyle(), {\r\n                                margin: 9,\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                editable: true,\r\n                                stroke: \"#560788\",\r\n                                font: smallfont\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay())\r\n                        // no ports, because no links are allowed to connect with a comment\r\n                    ));\r\n\r\n                myDiagram.nodeTemplateMap.add(\"CNN\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"RoundedRectangle\", {\r\n                            fill: whitegrad,\r\n                            stroke: \"#CF8BF9\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"CNN\\n(unavailable)\", textStyle(), {\r\n                                margin: 9,\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                editable: true,\r\n                                stroke: \"#560788\",\r\n                                font: smallfont\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay())\r\n                        // no ports, because no links are allowed to connect with a comment\r\n                    ));\r\n\r\n                myDiagram.nodeTemplateMap.add(\"LSTM\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"RoundedRectangle\", {\r\n                            fill: whitegrad,\r\n                            stroke: \"#CF8BF9\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"LSTM\\n(unavailable)\", textStyle(), {\r\n                                margin: 9,\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                editable: true,\r\n                                stroke: \"#560788\",\r\n                                font: smallfont\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay())\r\n                        // no ports, because no links are allowed to connect with a comment\r\n                    ));\r\n\r\n                myDiagram.nodeTemplateMap.add(\"Softmax\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"RoundedRectangle\", {\r\n                            fill: whitegrad,\r\n                            stroke: \"#CF8BF9\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"Softmax\\n(unavailable)\", textStyle(), {\r\n                                margin: 9,\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                editable: true,\r\n                                stroke: \"#560788\",\r\n                                font: smallfont\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay())\r\n                        // no ports, because no links are allowed to connect with a comment\r\n                    ));\r\n\r\n                myDiagram.nodeTemplateMap.add(\"Maximum Polling\",\r\n                    $(go.Node, \"Auto\", {\r\n                            locationSpot: go.Spot.Center\r\n                        },\r\n                        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\r\n                            selectable: true,\r\n                            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\r\n                        },\r\n                        $(go.Shape, \"RoundedRectangle\", {\r\n                            fill: whitegrad,\r\n                            stroke: \"#CF8BF9\",\r\n                            strokeWidth: 4\r\n                        }),\r\n                        $(go.TextBlock, \"Maximum\\nPolling\\n(unavailable)\", textStyle(), {\r\n                                margin: 9,\r\n                                maxSize: new go.Size(200, NaN),\r\n                                wrap: go.TextBlock.WrapFit,\r\n                                editable: true,\r\n                                stroke: \"#560788\",\r\n                                font: smallfont\r\n                            },\r\n                            new go.Binding(\"text\", \"text\").makeTwoWay())\r\n                        // no ports, because no links are allowed to connect with a comment\r\n                    ));\r\n\r\n                var palette = $(go.Palette, \"myPaletteDiv\", // create a new Palette in the HTML DIV element\r\n                    {\r\n                        // share the template map with the Palette\r\n                        nodeTemplateMap: myDiagram.nodeTemplateMap,\r\n                        autoScale: go.Diagram.Uniform // everything always fits in viewport\r\n                    });\r\n\r\n                palette.model.nodeDataArray = [{\r\n                    category: \"Data\",\r\n                }, {\r\n                    category: \"ReLU\"\r\n                }, {\r\n                    category: \"FC\",\r\n                    reasonsList: [{}]\r\n                }, {\r\n                    category: \"End\"\r\n                }, {\r\n                    category: \"CNN\"\r\n                }, {\r\n                    category: \"RNN\"\r\n                }, {\r\n                    category: \"LSTM\"\r\n                }, {\r\n                    category: \"Softmax\"\r\n                }, {\r\n                    category: \"Maximum Polling\"\r\n                }];\r\n  },\r\n\r\n  methods: {\r\n    //       save() {\r\n    //     console.log(\"save\");\r\n    //     // myDiagram.layoutDiagram(true);\r\n    //   },\r\n    //       load() {\r\n    //     console.log(\"load\");\r\n    //     // myDiagram.layoutDiagram(true);\r\n    //   },\r\n    //   layout() {\r\n    //     // console.log(\"layout\");\r\n    //     // myDiagram.layoutDiagram(true);\r\n    //   },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n#myPaletteDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.015);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myDiagramDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.01);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myPaletteDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n#myDiagramDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n.button,\r\nbutton {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(31, 73, 99, var(--tw-bg-opacity));\r\n  border-radius: 0.25rem;\r\n  display: inline-block;\r\n  margin: 0.25rem;\r\n  font-size: 12pt;\r\n  font-family: Helvetica, Arial;\r\n  padding-top: 0.25rem;\r\n  padding-bottom: 0.25rem;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n}\r\n\r\n.button:hover,\r\nbutton:hover {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(98, 127, 145, var(--tw-bg-opacity));\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n  transition-property: background-color, border-color, color, fill, stroke;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n  transition-duration: 150ms;\r\n  transition-duration: 0.2s;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}