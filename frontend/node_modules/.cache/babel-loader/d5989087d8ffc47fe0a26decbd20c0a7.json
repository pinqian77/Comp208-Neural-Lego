{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-60569357\"), n = n(), _popScopeId(), n;\n};\n\nvar _hoisted_1 = {\n  lang: \"en\"\n};\n\nvar _hoisted_2 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"head\", null, [/*#__PURE__*/_createElementVNode(\"meta\", {\n    charset: \"utf-8\"\n  }), /*#__PURE__*/_createElementVNode(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover\"\n  }), /*#__PURE__*/_createElementVNode(\"meta\", {\n    name: \"description\",\n    content: \"A workflow diagram showing navigation between web pages, with an editable list of comments and to-dos.\"\n  }), /*#__PURE__*/_createCommentVNode(\" <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\" /> \"), /*#__PURE__*/_createCommentVNode(\" Copyright 1998-2022 by Northwoods Software Corporation. \"), /*#__PURE__*/_createElementVNode(\"title\", null, \"Page Flow\")], -1\n  /* HOISTED */\n  );\n});\n\nvar _hoisted_3 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"body\", null, [/*#__PURE__*/_createElementVNode(\"div\", {\n    id: \"allSampleContent\",\n    \"class\": \"p-4 w-full\"\n  }, [/*#__PURE__*/_createElementVNode(\"div\", {\n    id: \"sample\"\n  }, [/*#__PURE__*/_createElementVNode(\"div\", {\n    style: {\n      \"width\": \"100%\",\n      \"margin-bottom\": \"10px\",\n      \"display\": \"flex\",\n      \"justify-content\": \"space-between\"\n    }\n  }, [/*#__PURE__*/_createElementVNode(\"div\", {\n    id: \"myPaletteDiv\",\n    style: {\n      \"width\": \"150px\",\n      \"margin-right\": \"10px\",\n      \"background-color\": \"whitesmoke\",\n      \"border\": \"solid 4px #82929b\"\n    }\n  }), /*#__PURE__*/_createElementVNode(\"div\", {\n    id: \"myDiagramDiv\",\n    style: {\n      \"flex-grow\": \"3\",\n      \"margin-right\": \"10px\",\n      \"height\": \"600px\",\n      \"background-color\": \"whitesmoke\",\n      \"border\": \"solid 4px #82929b\"\n    }\n  }), /*#__PURE__*/_createElementVNode(\"div\", {\n    id: \"myDiagramDiv\",\n    style: {\n      \"flex-grow\": \"2\",\n      \"height\": \"600px\",\n      \"background-color\": \"whitesmoke\",\n      \"border\": \"solid 4px #82929b\"\n    }\n  })]), /*#__PURE__*/_createElementVNode(\"button\", {\n    id: \"SaveButton\",\n    onclick: \"save()\"\n  }, \"Save\"), /*#__PURE__*/_createElementVNode(\"button\", {\n    onclick: \"load()\"\n  }, \"Load\"), /*#__PURE__*/_createElementVNode(\"button\", {\n    onclick: \"layout()\"\n  }, \"Layout\"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createElementVNode(\"textarea\", {\n    id: \"mySavedModel\",\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"300px\"\n    }\n  }, \"\\r\\n{ \\\"class\\\": \\\"GraphLinksModel\\\", \\r\\n\\\"nodeDataArray\\\": [ {\\\"category\\\":\\\"Data\\\", \\\"key\\\":-1, \\\"loc\\\":\\\"-70.5 -90.19999980926514\\\"} ], \\r\\n\\\"linkDataArray\\\": []}\\r\\n  \")])])], -1\n  /* HOISTED */\n  );\n});\n\nvar _hoisted_4 = [_hoisted_2, _hoisted_3];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"html\", _hoisted_1, _hoisted_4);\n}","map":{"version":3,"mappings":";;;;;;;AACQA,MAAI,EAAC;;;;sBACTC,oBAaO,MAbP,EAaO,IAbP,EAaO,cAZLA,oBAAwB,MAAxB,EAAwB;AAAlBC,WAAO,EAAC;AAAU,GAAxB,CAYK,eAXLD,oBAGE,MAHF,EAGE;AAFAE,QAAI,EAAC,UAEL;AADAC,WAAO,EAAC;AACR,GAHF,CAWK,eAPLH,oBAGE,MAHF,EAGE;AAFAE,QAAI,EAAC,aAEL;AADAC,WAAO,EAAC;AACR,GAHF,CAOK,eAHLC,uEAGK,eAFLA,gFAEK,eADLJ,oBAAwB,OAAxB,EAAwB,IAAxB,EAAO,WAAP,CACK,CAbP;;AAAA;;;;sBAeAA,oBAqDO,MArDP,EAqDO,IArDP,EAqDO,cApDLA,oBAmDM,KAnDN,EAmDM;AAnDDK,MAAE,EAAC,kBAmDF;AAnDqB,aAAM;AAmD3B,GAnDN,gBACEL,oBAiDM,KAjDN,EAiDM;AAjDDK,MAAE,EAAC;AAiDF,GAjDN,EAAgB,cACdL,oBAoCM,KApCN,EAoCM;AAnCJM,SAKC,EALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCI,GApCN,EAMG,cAEDN,oBAQO,KARP,EAQO;AAPLK,MAAE,EAAC,cAOE;AANLC,SAKC,EALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAMK,GARP,CAFC,eAWDN,oBASO,KATP,EASO;AARLK,MAAE,EAAC,cAQE;AAPLC,SAMC,EAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOK,GATP,CAXC,eAqBDN,oBAQO,KARP,EAQO;AAPLK,MAAE,EAAC,cAOE;AANLC,SAKC,EALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAMK,GARP,CArBC,CANH,CADc,eAuCdN,oBAAsD,QAAtD,EAAsD;AAA9CK,MAAE,EAAC,YAA2C;AAA9BE,WAAO,EAAC;AAAsB,GAAtD,EAAyC,MAAzC,CAvCc,eAwCdP,oBAAsC,QAAtC,EAAsC;AAA9BO,WAAO,EAAC;AAAsB,GAAtC,EAAyB,MAAzB,CAxCc,eAyCdP,oBAA0C,QAA1C,EAA0C;AAAlCO,WAAO,EAAC;AAA0B,GAA1C,EAA2B,QAA3B,CAzCc,eA0CdP,oBAAM,IAAN,CA1Cc,eA2CdA,oBAKC,UALD,EAKC;AALSK,MAAE,EAAC,cAKZ;AAL2BC,SAAkC,EAAlC;AAAA;AAAA;AAAA;AAK3B,GALD,EAA+D,8KAA/D,CA3Cc,CAAhB,EADF,CAoDK,CArDP;;AAAA;;;kBAfAE,YAeAC;;uBAhBFC,oBAsEO,MAtEP,cAsEOC,UAtEP","names":["lang","_createElementVNode","charset","name","content","_createCommentVNode","id","style","onclick","_hoisted_2","_hoisted_3","_createElementBlock","_hoisted_4"],"sourceRoot":"","sources":["C:\\qp_box\\_CodeField\\Neural-Lego\\frontend\\src\\views\\CanvasView.vue"],"sourcesContent":["<template>\r\n  <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"utf-8\" />\r\n      <meta\r\n        name=\"viewport\"\r\n        content=\"width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover\"\r\n      />\r\n      <meta\r\n        name=\"description\"\r\n        content=\"A workflow diagram showing navigation between web pages, with an editable list of comments and to-dos.\"\r\n      />\r\n      <!-- <link rel=\"stylesheet\" href=\"style.css\" /> -->\r\n      <!-- Copyright 1998-2022 by Northwoods Software Corporation. -->\r\n      <title>Page Flow</title>\r\n    </head>\r\n\r\n    <body>\r\n      <div id=\"allSampleContent\" class=\"p-4 w-full\">\r\n        <div id=\"sample\">\r\n          <div\r\n            style=\"\r\n              width: 100%;\r\n              margin-bottom: 10px;\r\n              display: flex;\r\n              justify-content: space-between;\r\n            \"\r\n          >\r\n            <div\r\n              id=\"myPaletteDiv\"\r\n              style=\"\r\n                width: 150px;\r\n                margin-right: 10px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n            <div\r\n              id=\"myDiagramDiv\"\r\n              style=\"\r\n                flex-grow: 3;\r\n                margin-right: 10px;\r\n                height: 600px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n            <div\r\n              id=\"myDiagramDiv\"\r\n              style=\"\r\n                flex-grow: 2;\r\n                height: 600px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n          </div>\r\n\r\n          <button id=\"SaveButton\" onclick=\"save()\">Save</button>\r\n          <button onclick=\"load()\">Load</button>\r\n          <button onclick=\"layout()\">Layout</button>\r\n          <br />\r\n          <textarea id=\"mySavedModel\" style=\"width: 100%; height: 300px\">\r\n{ \"class\": \"GraphLinksModel\", \r\n\"nodeDataArray\": [ {\"category\":\"Data\", \"key\":-1, \"loc\":\"-70.5 -90.19999980926514\"} ], \r\n\"linkDataArray\": []}\r\n  </textarea\r\n          >\r\n        </div>\r\n      </div>\r\n    </body>\r\n  </html>\r\n</template>\r\n\r\n\r\n\r\n<script id='code'>\r\nimport { go } from \"/public/go.js\";\r\n\r\nexport default {\r\n  name: \"canvasView\",\r\n  data() {\r\n    return {};\r\n  },\r\n\r\n  methods: {},\r\n\r\n  //   components: {\r\n  //     \"go-js\": {\r\n  //       render(createElement) {\r\n  //         return createElement(\"script\", {\r\n  //           attrs: {\r\n  //             type: \"text/javascript\",\r\n  //             src: \"/assets/go.js\",\r\n  //           },\r\n  //         });\r\n  //       },\r\n  //     },\r\n  //   },\r\n\r\n  mounted() {\r\n    let script = document.createElement(\"script\");\r\n    script.type = \"text/javascript\";\r\n    script.src = \"/go.js\";\r\n    document.body.appendChild(script);\r\n  },\r\n};\r\n\r\nfunction init() {\r\n  const $ = go.GraphObject.make; // for conciseness in defining templates\r\n\r\n  var yellowgrad = $(go.Brush, \"Linear\", {\r\n    0: \"#bde0fe\",\r\n    1: \"#bde0fe\",\r\n  });\r\n  var greengrad = $(go.Brush, \"Linear\", {\r\n    0: \"#fdffb6\",\r\n    1: \"#fdffb6\",\r\n  });\r\n  var bluegrad = $(go.Brush, \"Linear\", {\r\n    0: \"#caffbf\",\r\n    1: \"#caffbf\",\r\n  });\r\n  var redgrad = $(go.Brush, \"Linear\", {\r\n    0: \"#ffadad\",\r\n    1: \"#ffadad\",\r\n  });\r\n  var whitegrad = $(go.Brush, \"Linear\", {\r\n    0: \"#E7C5FC\",\r\n    1: \"#E7C5FC\",\r\n  });\r\n\r\n  var bigfont = \"bold 15pt Helvetica, Arial, sans-serif\";\r\n  var smallfont = \"bold 13pt Helvetica, Arial, sans-serif\";\r\n\r\n  // Common text styling\r\n  function textStyle() {\r\n    return {\r\n      margin: 6,\r\n      wrap: go.TextBlock.WrapFit,\r\n      textAlign: \"center\",\r\n      editable: true,\r\n      font: bigfont,\r\n    };\r\n  }\r\n\r\n  myDiagram = $(go.Diagram, \"myDiagramDiv\", {\r\n    // // have mouse wheel events zoom in and out instead of scroll up and down\r\n    //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\r\n    initialAutoScale: go.Diagram.Uniform,\r\n    \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\r\n    layout: $(go.LayeredDigraphLayout, {\r\n      isInitial: false,\r\n      isOngoing: false,\r\n      layerSpacing: 50,\r\n    }),\r\n    \"undoManager.isEnabled\": true,\r\n  });\r\n\r\n  var nodeSelectionAdornmentTemplate = $(\r\n    go.Adornment,\r\n    \"Auto\",\r\n    $(go.Shape, {\r\n      fill: null,\r\n      stroke: \"#979dac\",\r\n      strokeWidth: 2,\r\n      strokeDashArray: [4, 2],\r\n    }),\r\n    $(go.Placeholder)\r\n  );\r\n\r\n  // define the Node template\r\n  myDiagram.nodeTemplate = $(\r\n    go.Node,\r\n    \"Auto\",\r\n    {\r\n      locationSpot: go.Spot.Center,\r\n    },\r\n    new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n      go.Point.stringify\r\n    ),\r\n    {\r\n      selectable: true,\r\n      selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n    },\r\n    // define the node's outer shape, which will surround the TextBlock\r\n    $(go.Shape, \"Rectangle\", {\r\n      fill: yellowgrad,\r\n      stroke: null,\r\n      portId: \"\",\r\n      fromLinkable: true,\r\n      toLinkable: true,\r\n      cursor: \"pointer\",\r\n      toEndSegmentLength: 50,\r\n      fromEndSegmentLength: 50,\r\n    }),\r\n    $(\r\n      go.TextBlock,\r\n      \"ReLU\",\r\n      {\r\n        margin: 6,\r\n        font: bigfont,\r\n        editable: true,\r\n        minSize: new go.Size(40, NaN),\r\n      },\r\n      new go.Binding(\"text\", \"text\").makeTwoWay()\r\n    )\r\n  );\r\n\r\n  // Data\r\n  myDiagram.nodeTemplateMap.add(\r\n    \"Data\",\r\n    $(\r\n      go.Node,\r\n      \"Auto\",\r\n      {\r\n        locationSpot: go.Spot.Center,\r\n        margin: new go.Margin(0, 0, 0, 0),\r\n      },\r\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify\r\n      ),\r\n      {\r\n        selectable: true,\r\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n      },\r\n      $(go.Shape, \"Circle\", {\r\n        fill: bluegrad,\r\n        portId: \"\",\r\n        fromLinkable: true,\r\n        cursor: \"pointer\",\r\n        //fromEndSegmentLength: 40,\r\n        stroke: \"#74c69d\",\r\n\r\n        strokeWidth: 4,\r\n      }),\r\n      $(\r\n        go.TextBlock,\r\n        \"Data\",\r\n        textStyle(),\r\n        {\r\n          stroke: \"#2d6a4f\",\r\n          minSize: new go.Size(40, NaN),\r\n        },\r\n        new go.Binding(\"text\", \"text\").makeTwoWay()\r\n      )\r\n    )\r\n  );\r\n\r\n  myDiagram.nodeTemplateMap.add(\r\n    \"End\",\r\n    $(\r\n      go.Node,\r\n      \"Auto\",\r\n      {\r\n        locationSpot: go.Spot.Center,\r\n      },\r\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify\r\n      ),\r\n      {\r\n        selectable: true,\r\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n      },\r\n      $(go.Shape, \"Circle\", {\r\n        fill: redgrad,\r\n        portId: \"\",\r\n        toLinkable: true,\r\n        cursor: \"pointer\",\r\n        fromEndSegmentLength: 40,\r\n        stroke: \"#df7373\",\r\n        strokeWidth: 4,\r\n      }),\r\n      $(\r\n        go.TextBlock,\r\n        \"End\",\r\n        textStyle(),\r\n        {\r\n          stroke: \"#ad2e24\",\r\n          minSize: new go.Size(40, NaN),\r\n        },\r\n        new go.Binding(\"text\", \"text\").makeTwoWay()\r\n      )\r\n    )\r\n  );\r\n\r\n  myDiagram.nodeTemplateMap.add(\r\n    \"ReLU\",\r\n    $(\r\n      go.Node,\r\n      \"Auto\",\r\n      {\r\n        locationSpot: go.Spot.Center,\r\n      },\r\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify\r\n      ),\r\n      {\r\n        selectable: true,\r\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n      },\r\n      $(go.Shape, \"Ellipse\", {\r\n        fill: greengrad,\r\n        portId: \"\",\r\n        fromLinkable: true,\r\n        toLinkable: true,\r\n        cursor: \"pointer\",\r\n        fromEndSegmentLength: 40,\r\n        stroke: \"#ffd100\",\r\n        strokeWidth: 4,\r\n      }),\r\n      $(\r\n        go.TextBlock,\r\n        \"ReLU\",\r\n        textStyle(),\r\n        {\r\n          stroke: \"#e2711d\",\r\n          // locationSpot: go.Spot.Center,\r\n          //margin: new go.Margin(10, 0, 0, 0),\r\n          minSize: new go.Size(60, NaN),\r\n        },\r\n        new go.Binding(\"text\", \"text\").makeTwoWay()\r\n      )\r\n    )\r\n  );\r\n\r\n  var reasonTemplate = $(\r\n    go.Panel,\r\n    $(\r\n      go.Panel,\r\n      \"Table\",\r\n      {\r\n        maxSize: new go.Size(200, 999),\r\n        margin: new go.Margin(0, 3, 10, 3),\r\n        defaultAlignment: go.Spot.Center,\r\n      },\r\n      $(go.RowColumnDefinition, {\r\n        column: 2,\r\n        width: 2,\r\n      }),\r\n      $(\r\n        go.TextBlock,\r\n        \"input = \",\r\n        {\r\n          margin: new go.Margin(4, 0, 0, 0),\r\n          maxSize: new go.Size(200, NaN),\r\n          wrap: go.TextBlock.WrapFit,\r\n          //stroke: \"whitesmoke\",\r\n          editable: true,\r\n          font: smallfont,\r\n          row: 2,\r\n          column: 0,\r\n          stroke: \"#3e5c76\",\r\n        },\r\n        new go.Binding(\"text\", \"text0\").makeTwoWay()\r\n      ),\r\n\r\n      $(\r\n        go.TextBlock,\r\n        \"value\",\r\n        {\r\n          margin: new go.Margin(4, 0, 0, 0),\r\n          maxSize: new go.Size(200, NaN),\r\n          wrap: go.TextBlock.WrapFit,\r\n          //stroke: \"whitesmoke\",\r\n          editable: true,\r\n          stroke: \"#3e5c76\",\r\n          font: smallfont,\r\n          row: 2,\r\n          column: 1,\r\n        },\r\n        new go.Binding(\"text\", \"text1\").makeTwoWay()\r\n      ),\r\n\r\n      $(\r\n        go.TextBlock,\r\n        \"output = \",\r\n        {\r\n          margin: new go.Margin(4, 0, 0, 0),\r\n          maxSize: new go.Size(200, NaN),\r\n          wrap: go.TextBlock.WrapFit,\r\n          //stroke: \"whitesmoke\",\r\n          editable: true,\r\n          font: smallfont,\r\n          stroke: \"#3e5c76\",\r\n          row: 3,\r\n          column: 0,\r\n        },\r\n        new go.Binding(\"text\", \"text2\").makeTwoWay()\r\n      ),\r\n\r\n      $(\r\n        go.TextBlock,\r\n        \"value\",\r\n        {\r\n          margin: new go.Margin(4, 0, 0, 9),\r\n          maxSize: new go.Size(200, NaN),\r\n          wrap: go.TextBlock.WrapFit,\r\n          //stroke: \"whitesmoke\",\r\n          editable: true,\r\n          font: smallfont,\r\n          stroke: \"#3e5c76\",\r\n          row: 3,\r\n          column: 1,\r\n        },\r\n        new go.Binding(\"text\", \"text3\").makeTwoWay()\r\n      )\r\n    ) // end Table Panel\r\n  );\r\n\r\n  myDiagram.nodeTemplateMap.add(\r\n    \"FC\",\r\n    $(\r\n      go.Node,\r\n      \"Auto\",\r\n      {\r\n        locationSpot: go.Spot.Center,\r\n      },\r\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify\r\n      ),\r\n      {\r\n        selectable: true,\r\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n      },\r\n      $(go.Shape, \"RoundedRectangle\", {\r\n        fill: yellowgrad,\r\n        stroke: \"#4ea8de\",\r\n        strokeWidth: 4,\r\n        portId: \"\",\r\n        fromLinkable: true,\r\n        toLinkable: true,\r\n        cursor: \"pointer\",\r\n        toEndSegmentLength: 50,\r\n        fromEndSegmentLength: 40,\r\n      }),\r\n      $(\r\n        go.Panel,\r\n        \"Vertical\",\r\n        {\r\n          defaultAlignment: go.Spot.Center,\r\n        },\r\n\r\n        $(\r\n          go.TextBlock,\r\n          \"FC\",\r\n          textStyle(),\r\n          {\r\n            stroke: \"#3e5c76\",\r\n            margin: new go.Margin(8, 0, 0, 0),\r\n            minSize: new go.Size(100, NaN),\r\n            //maxSize: new go.Size(200, NaN)\r\n          },\r\n          new go.Binding(\"text\", \"text\").makeTwoWay()\r\n        ),\r\n\r\n        $(\r\n          go.Panel,\r\n          \"Vertical\",\r\n          {\r\n            defaultAlignment: go.Spot.TopLeft,\r\n            itemTemplate: reasonTemplate,\r\n          },\r\n          new go.Binding(\"itemArray\", \"reasonsList\").makeTwoWay()\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  var linkSelectionAdornmentTemplate = $(\r\n    go.Adornment,\r\n    \"Link\",\r\n    $(\r\n      go.Shape,\r\n      // isPanelMain declares that this Shape shares the Link.geometry\r\n      {\r\n        isPanelMain: true,\r\n        fill: null,\r\n        stroke: \"deepskyblue\",\r\n        strokeWidth: 2.5,\r\n      }\r\n    ) // use selection object's strokeWidth\r\n  );\r\n  // replace the default Link template in the linkTemplateMap\r\n  myDiagram.linkTemplate = $(\r\n    go.Link, // the whole link panel\r\n    {\r\n      selectable: true,\r\n      selectionAdornmentTemplate: linkSelectionAdornmentTemplate,\r\n    },\r\n    new go.Binding(\"points\").makeTwoWay(),\r\n    {\r\n      //curve: go.Link.Bezier,\r\n      toShortLength: 15,\r\n    },\r\n    //new go.Binding(\"curviness\", \"curviness\"),\r\n    $(\r\n      go.Shape, // the link shape\r\n      {\r\n        stroke: \"#979dac\",\r\n        strokeWidth: 2.5,\r\n      }\r\n    ),\r\n    $(\r\n      go.Shape, // the arrowhead\r\n      {\r\n        toArrow: \"kite\",\r\n        fill: \"#979dac\",\r\n        stroke: null,\r\n        scale: 2,\r\n      }\r\n    )\r\n  );\r\n\r\n  myDiagram.nodeTemplateMap.add(\r\n    \"RNN\",\r\n    $(\r\n      go.Node,\r\n      \"Auto\",\r\n      {\r\n        locationSpot: go.Spot.Center,\r\n      },\r\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify\r\n      ),\r\n      {\r\n        selectable: true,\r\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n      },\r\n      $(go.Shape, \"RoundedRectangle\", {\r\n        fill: whitegrad,\r\n        stroke: \"#CF8BF9\",\r\n        strokeWidth: 4,\r\n      }),\r\n      $(\r\n        go.TextBlock,\r\n        \"RNN\\n(unavailable)\",\r\n        textStyle(),\r\n        {\r\n          margin: 9,\r\n          maxSize: new go.Size(200, NaN),\r\n          wrap: go.TextBlock.WrapFit,\r\n          editable: true,\r\n          stroke: \"#560788\",\r\n          font: smallfont,\r\n        },\r\n        new go.Binding(\"text\", \"text\").makeTwoWay()\r\n      )\r\n      // no ports, because no links are allowed to connect with a comment\r\n    )\r\n  );\r\n\r\n  myDiagram.nodeTemplateMap.add(\r\n    \"CNN\",\r\n    $(\r\n      go.Node,\r\n      \"Auto\",\r\n      {\r\n        locationSpot: go.Spot.Center,\r\n      },\r\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify\r\n      ),\r\n      {\r\n        selectable: true,\r\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n      },\r\n      $(go.Shape, \"RoundedRectangle\", {\r\n        fill: whitegrad,\r\n        stroke: \"#CF8BF9\",\r\n        strokeWidth: 4,\r\n      }),\r\n      $(\r\n        go.TextBlock,\r\n        \"CNN\\n(unavailable)\",\r\n        textStyle(),\r\n        {\r\n          margin: 9,\r\n          maxSize: new go.Size(200, NaN),\r\n          wrap: go.TextBlock.WrapFit,\r\n          editable: true,\r\n          stroke: \"#560788\",\r\n          font: smallfont,\r\n        },\r\n        new go.Binding(\"text\", \"text\").makeTwoWay()\r\n      )\r\n      // no ports, because no links are allowed to connect with a comment\r\n    )\r\n  );\r\n\r\n  myDiagram.nodeTemplateMap.add(\r\n    \"LSTM\",\r\n    $(\r\n      go.Node,\r\n      \"Auto\",\r\n      {\r\n        locationSpot: go.Spot.Center,\r\n      },\r\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify\r\n      ),\r\n      {\r\n        selectable: true,\r\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n      },\r\n      $(go.Shape, \"RoundedRectangle\", {\r\n        fill: whitegrad,\r\n        stroke: \"#CF8BF9\",\r\n        strokeWidth: 4,\r\n      }),\r\n      $(\r\n        go.TextBlock,\r\n        \"LSTM\\n(unavailable)\",\r\n        textStyle(),\r\n        {\r\n          margin: 9,\r\n          maxSize: new go.Size(200, NaN),\r\n          wrap: go.TextBlock.WrapFit,\r\n          editable: true,\r\n          stroke: \"#560788\",\r\n          font: smallfont,\r\n        },\r\n        new go.Binding(\"text\", \"text\").makeTwoWay()\r\n      )\r\n      // no ports, because no links are allowed to connect with a comment\r\n    )\r\n  );\r\n\r\n  myDiagram.nodeTemplateMap.add(\r\n    \"Softmax\",\r\n    $(\r\n      go.Node,\r\n      \"Auto\",\r\n      {\r\n        locationSpot: go.Spot.Center,\r\n      },\r\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify\r\n      ),\r\n      {\r\n        selectable: true,\r\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n      },\r\n      $(go.Shape, \"RoundedRectangle\", {\r\n        fill: whitegrad,\r\n        stroke: \"#CF8BF9\",\r\n        strokeWidth: 4,\r\n      }),\r\n      $(\r\n        go.TextBlock,\r\n        \"Softmax\\n(unavailable)\",\r\n        textStyle(),\r\n        {\r\n          margin: 9,\r\n          maxSize: new go.Size(200, NaN),\r\n          wrap: go.TextBlock.WrapFit,\r\n          editable: true,\r\n          stroke: \"#560788\",\r\n          font: smallfont,\r\n        },\r\n        new go.Binding(\"text\", \"text\").makeTwoWay()\r\n      )\r\n      // no ports, because no links are allowed to connect with a comment\r\n    )\r\n  );\r\n\r\n  myDiagram.nodeTemplateMap.add(\r\n    \"Maximum Polling\",\r\n    $(\r\n      go.Node,\r\n      \"Auto\",\r\n      {\r\n        locationSpot: go.Spot.Center,\r\n      },\r\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify\r\n      ),\r\n      {\r\n        selectable: true,\r\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n      },\r\n      $(go.Shape, \"RoundedRectangle\", {\r\n        fill: whitegrad,\r\n        stroke: \"#CF8BF9\",\r\n        strokeWidth: 4,\r\n      }),\r\n      $(\r\n        go.TextBlock,\r\n        \"Maximum\\nPolling\\n(unavailable)\",\r\n        textStyle(),\r\n        {\r\n          margin: 9,\r\n          maxSize: new go.Size(200, NaN),\r\n          wrap: go.TextBlock.WrapFit,\r\n          editable: true,\r\n          stroke: \"#560788\",\r\n          font: smallfont,\r\n        },\r\n        new go.Binding(\"text\", \"text\").makeTwoWay()\r\n      )\r\n      // no ports, because no links are allowed to connect with a comment\r\n    )\r\n  );\r\n\r\n  var palette = $(\r\n    go.Palette,\r\n    \"myPaletteDiv\", // create a new Palette in the HTML DIV element\r\n    {\r\n      // share the template map with the Palette\r\n      nodeTemplateMap: myDiagram.nodeTemplateMap,\r\n      autoScale: go.Diagram.Uniform, // everything always fits in viewport\r\n    }\r\n  );\r\n\r\n  palette.model.nodeDataArray = [\r\n    {\r\n      category: \"Data\",\r\n    },\r\n    {\r\n      category: \"ReLU\",\r\n    },\r\n    {\r\n      category: \"FC\",\r\n      reasonsList: [{}],\r\n    },\r\n    {\r\n      category: \"End\",\r\n    },\r\n    {\r\n      category: \"CNN\",\r\n    },\r\n    {\r\n      category: \"RNN\",\r\n    },\r\n    {\r\n      category: \"LSTM\",\r\n    },\r\n    {\r\n      category: \"Softmax\",\r\n    },\r\n    {\r\n      category: \"Maximum Polling\",\r\n    },\r\n  ];\r\n\r\n  // read in the JSON-format data from the \"mySavedModel\" element\r\n  load();\r\n  layout();\r\n}\r\n\r\nfunction layout() {\r\n  myDiagram.layoutDiagram(true);\r\n}\r\n// Show the diagram's model in JSON format\r\nfunction save() {\r\n  document.getElementById(\"mySavedModel\").value = myDiagram.model.toJson();\r\n  myDiagram.isModified = false;\r\n}\r\n\r\nfunction load() {\r\n  myDiagram.model = go.Model.fromJson(\r\n    document.getElementById(\"mySavedModel\").value\r\n  );\r\n}\r\nwindow.addEventListener(\"DOMContentLoaded\", init);\r\n</script>\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n#myPaletteDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.015);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myDiagramDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.01);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myPaletteDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n#myDiagramDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n.button,\r\nbutton {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(31, 73, 99, var(--tw-bg-opacity));\r\n  border-radius: 0.25rem;\r\n  display: inline-block;\r\n  margin: 0.25rem;\r\n  font-size: 12pt;\r\n  font-family: Helvetica, Arial;\r\n  padding-top: 0.25rem;\r\n  padding-bottom: 0.25rem;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n}\r\n\r\n.button:hover,\r\nbutton:hover {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(98, 127, 145, var(--tw-bg-opacity));\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n  transition-property: background-color, border-color, color, fill, stroke;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n  transition-duration: 150ms;\r\n  transition-duration: 0.2s;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}