{"ast":null,"code":"import { go } from \"../assets/go.js\";\nexport default {\n  name: \"canvasView\",\n  data: function data() {\n    return {};\n  },\n  methods: {},\n  components: {\n    \"go-js\": {\n      render: function render(createElement) {\n        return createElement(\"script\", {\n          attrs: {\n            type: \"text/javascript\",\n            src: \"/assers/go.js\"\n          }\n        });\n      }\n    }\n  } //   mounted() {\n  //     let script = document.createElement(\"script\");\n  //     script.type = \"text/javascript\";\n  //     script.src = \"/assets/go.js\";\n  //     document.body.appendChild(script);\n  //   },\n\n}; // ---------------------------------\n// ---------------------------------","map":{"version":3,"mappings":"AAuPA,SAASA,EAAT,QAAmB,iBAAnB;AAEA,eAAe;AACbC,MAAI,EAAE,YADO;AAEbC,MAFa,kBAEN;AACL,WAAO,EAAP;AACD,GAJY;AAMbC,SAAO,EAAE,EANI;AAQbC,YAAU,EAAE;AACV,aAAS;AACPC,YADO,kBACAC,aADA,EACe;AACpB,eAAOA,aAAa,CAAC,QAAD,EAAW;AAC7BC,eAAK,EAAE;AACLC,gBAAI,EAAE,iBADD;AAELC,eAAG,EAAE;AAFA;AADsB,SAAX,CAApB;AAMD;AARM;AADC,GARC,CAqBb;AACA;AACA;AACA;AACA;AACA;;AA1Ba,CAAf,C,CA6BA;AACA","names":["go","name","data","methods","components","render","createElement","attrs","type","src"],"sourceRoot":"","sources":["C:\\qp_box\\_CodeField\\Neural-Lego\\frontend\\src\\views\\CanvasView.vue"],"sourcesContent":["<template>\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"utf-8\" />\r\n      <meta\r\n        name=\"viewport\"\r\n        content=\"width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover\"\r\n      />\r\n      <meta\r\n        name=\"description\"\r\n        content=\"A workflow diagram showing navigation between web pages, with an editable list of comments and to-dos.\"\r\n      />\r\n      <!-- <link rel=\"stylesheet\" href=\"style.css\" /> -->\r\n      <!-- Copyright 1998-2022 by Northwoods Software Corporation. -->\r\n      <title>Page Flow</title>\r\n    </head>\r\n\r\n    <body>\r\n      <go-js>\r\n        function init() { const $ = go.GraphObject.make; // for conciseness in\r\n        defining templates var yellowgrad = $(go.Brush, \"Linear\", { 0:\r\n        \"#bde0fe\", 1: \"#bde0fe\", }); var greengrad = $(go.Brush, \"Linear\", { 0:\r\n        \"#fdffb6\", 1: \"#fdffb6\", }); var bluegrad = $(go.Brush, \"Linear\", { 0:\r\n        \"#caffbf\", 1: \"#caffbf\", }); var redgrad = $(go.Brush, \"Linear\", { 0:\r\n        \"#ffadad\", 1: \"#ffadad\", }); var whitegrad = $(go.Brush, \"Linear\", { 0:\r\n        \"#E7C5FC\", 1: \"#E7C5FC\", }); var bigfont = \"bold 15pt Helvetica, Arial,\r\n        sans-serif\"; var smallfont = \"bold 13pt Helvetica, Arial, sans-serif\";\r\n        // Common text styling function textStyle() { return { margin: 6, wrap:\r\n        go.TextBlock.WrapFit, textAlign: \"center\", editable: true, font:\r\n        bigfont, }; } myDiagram = $(go.Diagram, \"myDiagramDiv\", { // // have\r\n        mouse wheel events zoom in and out instead of scroll up and down\r\n        //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\r\n        initialAutoScale: go.Diagram.Uniform, \"linkingTool.direction\":\r\n        go.LinkingTool.ForwardsOnly, layout: $(go.LayeredDigraphLayout, {\r\n        isInitial: false, isOngoing: false, layerSpacing: 50, }),\r\n        \"undoManager.isEnabled\": true, }); var nodeSelectionAdornmentTemplate =\r\n        $( go.Adornment, \"Auto\", $(go.Shape, { fill: null, stroke: \"#979dac\",\r\n        strokeWidth: 2, strokeDashArray: [4, 2], }), $(go.Placeholder) ); //\r\n        define the Node template myDiagram.nodeTemplate = $( go.Node, \"Auto\", {\r\n        locationSpot: go.Spot.Center, }, new go.Binding(\"location\", \"loc\",\r\n        go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true,\r\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, }, // define\r\n        the node's outer shape, which will surround the TextBlock $(go.Shape,\r\n        \"Rectangle\", { fill: yellowgrad, stroke: null, portId: \"\", fromLinkable:\r\n        true, toLinkable: true, cursor: \"pointer\", toEndSegmentLength: 50,\r\n        fromEndSegmentLength: 50, }), $( go.TextBlock, \"ReLU\", { margin: 6,\r\n        font: bigfont, editable: true, minSize: new go.Size(40, NaN), }, new\r\n        go.Binding(\"text\", \"text\").makeTwoWay() ) ); // Data\r\n        myDiagram.nodeTemplateMap.add( \"Data\", $( go.Node, \"Auto\", {\r\n        locationSpot: go.Spot.Center, margin: new go.Margin(0, 0, 0, 0), }, new\r\n        go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify ), { selectable: true, selectionAdornmentTemplate:\r\n        nodeSelectionAdornmentTemplate, }, $(go.Shape, \"Circle\", { fill:\r\n        bluegrad, portId: \"\", fromLinkable: true, cursor: \"pointer\",\r\n        //fromEndSegmentLength: 40, stroke: \"#74c69d\", strokeWidth: 4, }), $(\r\n        go.TextBlock, \"Data\", textStyle(), { stroke: \"#2d6a4f\", minSize: new\r\n        go.Size(40, NaN), }, new go.Binding(\"text\", \"text\").makeTwoWay() ) ) );\r\n        myDiagram.nodeTemplateMap.add( \"End\", $( go.Node, \"Auto\", {\r\n        locationSpot: go.Spot.Center, }, new go.Binding(\"location\", \"loc\",\r\n        go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true,\r\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, },\r\n        $(go.Shape, \"Circle\", { fill: redgrad, portId: \"\", toLinkable: true,\r\n        cursor: \"pointer\", fromEndSegmentLength: 40, stroke: \"#df7373\",\r\n        strokeWidth: 4, }), $( go.TextBlock, \"End\", textStyle(), { stroke:\r\n        \"#ad2e24\", minSize: new go.Size(40, NaN), }, new go.Binding(\"text\",\r\n        \"text\").makeTwoWay() ) ) ); myDiagram.nodeTemplateMap.add( \"ReLU\", $(\r\n        go.Node, \"Auto\", { locationSpot: go.Spot.Center, }, new\r\n        go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify ), { selectable: true, selectionAdornmentTemplate:\r\n        nodeSelectionAdornmentTemplate, }, $(go.Shape, \"Ellipse\", { fill:\r\n        greengrad, portId: \"\", fromLinkable: true, toLinkable: true, cursor:\r\n        \"pointer\", fromEndSegmentLength: 40, stroke: \"#ffd100\", strokeWidth: 4,\r\n        }), $( go.TextBlock, \"ReLU\", textStyle(), { stroke: \"#e2711d\", //\r\n        locationSpot: go.Spot.Center, //margin: new go.Margin(10, 0, 0, 0),\r\n        minSize: new go.Size(60, NaN), }, new go.Binding(\"text\",\r\n        \"text\").makeTwoWay() ) ) ); var reasonTemplate = $( go.Panel, $(\r\n        go.Panel, \"Table\", { maxSize: new go.Size(200, 999), margin: new\r\n        go.Margin(0, 3, 10, 3), defaultAlignment: go.Spot.Center, },\r\n        $(go.RowColumnDefinition, { column: 2, width: 2, }), $( go.TextBlock,\r\n        \"input = \", { margin: new go.Margin(4, 0, 0, 0), maxSize: new\r\n        go.Size(200, NaN), wrap: go.TextBlock.WrapFit, //stroke: \"whitesmoke\",\r\n        editable: true, font: smallfont, row: 2, column: 0, stroke: \"#3e5c76\",\r\n        }, new go.Binding(\"text\", \"text0\").makeTwoWay() ), $( go.TextBlock,\r\n        \"value\", { margin: new go.Margin(4, 0, 0, 0), maxSize: new go.Size(200,\r\n        NaN), wrap: go.TextBlock.WrapFit, //stroke: \"whitesmoke\", editable:\r\n        true, stroke: \"#3e5c76\", font: smallfont, row: 2, column: 1, }, new\r\n        go.Binding(\"text\", \"text1\").makeTwoWay() ), $( go.TextBlock, \"output =\r\n        \", { margin: new go.Margin(4, 0, 0, 0), maxSize: new go.Size(200, NaN),\r\n        wrap: go.TextBlock.WrapFit, //stroke: \"whitesmoke\", editable: true,\r\n        font: smallfont, stroke: \"#3e5c76\", row: 3, column: 0, }, new\r\n        go.Binding(\"text\", \"text2\").makeTwoWay() ), $( go.TextBlock, \"value\", {\r\n        margin: new go.Margin(4, 0, 0, 9), maxSize: new go.Size(200, NaN), wrap:\r\n        go.TextBlock.WrapFit, //stroke: \"whitesmoke\", editable: true, font:\r\n        smallfont, stroke: \"#3e5c76\", row: 3, column: 1, }, new\r\n        go.Binding(\"text\", \"text3\").makeTwoWay() ) ) // end Table Panel );\r\n        myDiagram.nodeTemplateMap.add( \"FC\", $( go.Node, \"Auto\", { locationSpot:\r\n        go.Spot.Center, }, new go.Binding(\"location\", \"loc\",\r\n        go.Point.parse).makeTwoWay( go.Point.stringify ), { selectable: true,\r\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate, },\r\n        $(go.Shape, \"RoundedRectangle\", { fill: yellowgrad, stroke: \"#4ea8de\",\r\n        strokeWidth: 4, portId: \"\", fromLinkable: true, toLinkable: true,\r\n        cursor: \"pointer\", toEndSegmentLength: 50, fromEndSegmentLength: 40, }),\r\n        $( go.Panel, \"Vertical\", { defaultAlignment: go.Spot.Center, }, $(\r\n        go.TextBlock, \"FC\", textStyle(), { stroke: \"#3e5c76\", margin: new\r\n        go.Margin(8, 0, 0, 0), minSize: new go.Size(100, NaN), //maxSize: new\r\n        go.Size(200, NaN) }, new go.Binding(\"text\", \"text\").makeTwoWay() ), $(\r\n        go.Panel, \"Vertical\", { defaultAlignment: go.Spot.TopLeft, itemTemplate:\r\n        reasonTemplate, }, new go.Binding(\"itemArray\",\r\n        \"reasonsList\").makeTwoWay() ) ) ) ); var linkSelectionAdornmentTemplate\r\n        = $( go.Adornment, \"Link\", $( go.Shape, // isPanelMain declares that\r\n        this Shape shares the Link.geometry { isPanelMain: true, fill: null,\r\n        stroke: \"deepskyblue\", strokeWidth: 2.5, } ) // use selection object's\r\n        strokeWidth ); // replace the default Link template in the\r\n        linkTemplateMap myDiagram.linkTemplate = $( go.Link, // the whole link\r\n        panel { selectable: true, selectionAdornmentTemplate:\r\n        linkSelectionAdornmentTemplate, }, new\r\n        go.Binding(\"points\").makeTwoWay(), { //curve: go.Link.Bezier,\r\n        toShortLength: 15, }, //new go.Binding(\"curviness\", \"curviness\"), $(\r\n        go.Shape, // the link shape { stroke: \"#979dac\", strokeWidth: 2.5, } ),\r\n        $( go.Shape, // the arrowhead { toArrow: \"kite\", fill: \"#979dac\",\r\n        stroke: null, scale: 2, } ) ); myDiagram.nodeTemplateMap.add( \"RNN\", $(\r\n        go.Node, \"Auto\", { locationSpot: go.Spot.Center, }, new\r\n        go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify ), { selectable: true, selectionAdornmentTemplate:\r\n        nodeSelectionAdornmentTemplate, }, $(go.Shape, \"RoundedRectangle\", {\r\n        fill: whitegrad, stroke: \"#CF8BF9\", strokeWidth: 4, }), $( go.TextBlock,\r\n        \"RNN\\n(unavailable)\", textStyle(), { margin: 9, maxSize: new\r\n        go.Size(200, NaN), wrap: go.TextBlock.WrapFit, editable: true, stroke:\r\n        \"#560788\", font: smallfont, }, new go.Binding(\"text\",\r\n        \"text\").makeTwoWay() ) // no ports, because no links are allowed to\r\n        connect with a comment ) ); myDiagram.nodeTemplateMap.add( \"CNN\", $(\r\n        go.Node, \"Auto\", { locationSpot: go.Spot.Center, }, new\r\n        go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify ), { selectable: true, selectionAdornmentTemplate:\r\n        nodeSelectionAdornmentTemplate, }, $(go.Shape, \"RoundedRectangle\", {\r\n        fill: whitegrad, stroke: \"#CF8BF9\", strokeWidth: 4, }), $( go.TextBlock,\r\n        \"CNN\\n(unavailable)\", textStyle(), { margin: 9, maxSize: new\r\n        go.Size(200, NaN), wrap: go.TextBlock.WrapFit, editable: true, stroke:\r\n        \"#560788\", font: smallfont, }, new go.Binding(\"text\",\r\n        \"text\").makeTwoWay() ) // no ports, because no links are allowed to\r\n        connect with a comment ) ); myDiagram.nodeTemplateMap.add( \"LSTM\", $(\r\n        go.Node, \"Auto\", { locationSpot: go.Spot.Center, }, new\r\n        go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify ), { selectable: true, selectionAdornmentTemplate:\r\n        nodeSelectionAdornmentTemplate, }, $(go.Shape, \"RoundedRectangle\", {\r\n        fill: whitegrad, stroke: \"#CF8BF9\", strokeWidth: 4, }), $( go.TextBlock,\r\n        \"LSTM\\n(unavailable)\", textStyle(), { margin: 9, maxSize: new\r\n        go.Size(200, NaN), wrap: go.TextBlock.WrapFit, editable: true, stroke:\r\n        \"#560788\", font: smallfont, }, new go.Binding(\"text\",\r\n        \"text\").makeTwoWay() ) // no ports, because no links are allowed to\r\n        connect with a comment ) ); myDiagram.nodeTemplateMap.add( \"Softmax\", $(\r\n        go.Node, \"Auto\", { locationSpot: go.Spot.Center, }, new\r\n        go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify ), { selectable: true, selectionAdornmentTemplate:\r\n        nodeSelectionAdornmentTemplate, }, $(go.Shape, \"RoundedRectangle\", {\r\n        fill: whitegrad, stroke: \"#CF8BF9\", strokeWidth: 4, }), $( go.TextBlock,\r\n        \"Softmax\\n(unavailable)\", textStyle(), { margin: 9, maxSize: new\r\n        go.Size(200, NaN), wrap: go.TextBlock.WrapFit, editable: true, stroke:\r\n        \"#560788\", font: smallfont, }, new go.Binding(\"text\",\r\n        \"text\").makeTwoWay() ) // no ports, because no links are allowed to\r\n        connect with a comment ) ); myDiagram.nodeTemplateMap.add( \"Maximum\r\n        Polling\", $( go.Node, \"Auto\", { locationSpot: go.Spot.Center, }, new\r\n        go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify ), { selectable: true, selectionAdornmentTemplate:\r\n        nodeSelectionAdornmentTemplate, }, $(go.Shape, \"RoundedRectangle\", {\r\n        fill: whitegrad, stroke: \"#CF8BF9\", strokeWidth: 4, }), $( go.TextBlock,\r\n        \"Maximum\\nPolling\\n(unavailable)\", textStyle(), { margin: 9, maxSize:\r\n        new go.Size(200, NaN), wrap: go.TextBlock.WrapFit, editable: true,\r\n        stroke: \"#560788\", font: smallfont, }, new go.Binding(\"text\",\r\n        \"text\").makeTwoWay() ) // no ports, because no links are allowed to\r\n        connect with a comment ) ); var palette = $( go.Palette, \"myPaletteDiv\",\r\n        // create a new Palette in the HTML DIV element { // share the template\r\n        map with the Palette nodeTemplateMap: myDiagram.nodeTemplateMap,\r\n        autoScale: go.Diagram.Uniform, // everything always fits in viewport }\r\n        ); palette.model.nodeDataArray = [ { category: \"Data\", }, { category:\r\n        \"ReLU\", }, { category: \"FC\", reasonsList: [{}], }, { category: \"End\", },\r\n        { category: \"CNN\", }, { category: \"RNN\", }, { category: \"LSTM\", }, {\r\n        category: \"Softmax\", }, { category: \"Maximum Polling\", }, ]; // read in\r\n        the JSON-format data from the \"mySavedModel\" element load(); layout(); }\r\n        function layout() { myDiagram.layoutDiagram(true); } // Show the\r\n        diagram's model in JSON format function save() {\r\n        document.getElementById(\"mySavedModel\").value =\r\n        myDiagram.model.toJson(); myDiagram.isModified = false; } function\r\n        load() { myDiagram.model = go.Model.fromJson(\r\n        document.getElementById(\"mySavedModel\").value ); }\r\n        window.addEventListener(\"DOMContentLoaded\", init);\r\n      </go-js>\r\n      <div id=\"allSampleContent\" class=\"p-4 w-full\">\r\n        <div id=\"sample\">\r\n          <div\r\n            style=\"\r\n              width: 100%;\r\n              margin-bottom: 10px;\r\n              display: flex;\r\n              justify-content: space-between;\r\n            \"\r\n          >\r\n            <div\r\n              id=\"myPaletteDiv\"\r\n              style=\"\r\n                width: 150px;\r\n                margin-right: 10px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n            <div\r\n              id=\"myDiagramDiv\"\r\n              style=\"\r\n                flex-grow: 3;\r\n                margin-right: 10px;\r\n                height: 600px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n            <div\r\n              id=\"myDiagramDiv\"\r\n              style=\"\r\n                flex-grow: 2;\r\n                height: 600px;\r\n                background-color: whitesmoke;\r\n                border: solid 4px #82929b;\r\n              \"\r\n            ></div>\r\n          </div>\r\n\r\n          <button id=\"SaveButton\" onclick=\"save()\">Save</button>\r\n          <button onclick=\"load()\">Load</button>\r\n          <button onclick=\"layout()\">Layout</button>\r\n          <br />\r\n          <textarea id=\"mySavedModel\" style=\"width: 100%; height: 300px\">\r\n{ \"class\": \"GraphLinksModel\", \r\n\"nodeDataArray\": [ {\"category\":\"Data\", \"key\":-1, \"loc\":\"-70.5 -90.19999980926514\"} ], \r\n\"linkDataArray\": []}\r\n  </textarea\r\n          >\r\n        </div>\r\n      </div>\r\n    </body>\r\n  </html>\r\n</template>\r\n\r\n\r\n\r\n<script id=\"code\">\r\nimport { go } from \"../assets/go.js\";\r\n\r\nexport default {\r\n  name: \"canvasView\",\r\n  data() {\r\n    return {};\r\n  },\r\n\r\n  methods: {},\r\n\r\n  components: {\r\n    \"go-js\": {\r\n      render(createElement) {\r\n        return createElement(\"script\", {\r\n          attrs: {\r\n            type: \"text/javascript\",\r\n            src: \"/assers/go.js\",\r\n          },\r\n        });\r\n      },\r\n    },\r\n  },\r\n\r\n  //   mounted() {\r\n  //     let script = document.createElement(\"script\");\r\n  //     script.type = \"text/javascript\";\r\n  //     script.src = \"/assets/go.js\";\r\n  //     document.body.appendChild(script);\r\n  //   },\r\n};\r\n\r\n// ---------------------------------\r\n// ---------------------------------\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n#myPaletteDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.015);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myDiagramDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.01);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myPaletteDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n#myDiagramDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n.button,\r\nbutton {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(31, 73, 99, var(--tw-bg-opacity));\r\n  border-radius: 0.25rem;\r\n  display: inline-block;\r\n  margin: 0.25rem;\r\n  font-size: 12pt;\r\n  font-family: Helvetica, Arial;\r\n  padding-top: 0.25rem;\r\n  padding-bottom: 0.25rem;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n}\r\n\r\n.button:hover,\r\nbutton:hover {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(98, 127, 145, var(--tw-bg-opacity));\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n  transition-property: background-color, border-color, color, fill, stroke;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n  transition-duration: 150ms;\r\n  transition-duration: 0.2s;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}