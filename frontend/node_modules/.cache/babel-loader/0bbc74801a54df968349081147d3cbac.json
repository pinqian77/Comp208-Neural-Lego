{"ast":null,"code":"import * as go from \"/public/go.js\";\nexport default {\n  name: \"CanvasView\",\n  mounted: function mounted() {\n    function init() {\n      var $ = go.GraphObject.make; // for conciseness in defining templates\n\n      var yellowgrad = $(go.Brush, \"Linear\", {\n        0: \"#bde0fe\",\n        1: \"#bde0fe\"\n      });\n      var greengrad = $(go.Brush, \"Linear\", {\n        0: \"#fdffb6\",\n        1: \"#fdffb6\"\n      });\n      var bluegrad = $(go.Brush, \"Linear\", {\n        0: \"#caffbf\",\n        1: \"#caffbf\"\n      });\n      var redgrad = $(go.Brush, \"Linear\", {\n        0: \"#ffadad\",\n        1: \"#ffadad\"\n      });\n      var whitegrad = $(go.Brush, \"Linear\", {\n        0: \"#E7C5FC\",\n        1: \"#E7C5FC\"\n      });\n      var bigfont = \"bold 15pt Helvetica, Arial, sans-serif\";\n      var smallfont = \"bold 13pt Helvetica, Arial, sans-serif\"; // Common text styling\n\n      function textStyle() {\n        return {\n          margin: 6,\n          wrap: go.TextBlock.WrapFit,\n          textAlign: \"center\",\n          editable: true,\n          font: bigfont\n        };\n      }\n\n      var myDiagram = $(go.Diagram, \"myDiagramDiv\", {\n        // // have mouse wheel events zoom in and out instead of scroll up and down\n        //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\n        initialAutoScale: go.Diagram.Uniform,\n        \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\n        layout: $(go.LayeredDigraphLayout, {\n          isInitial: false,\n          isOngoing: false,\n          layerSpacing: 50\n        }),\n        \"undoManager.isEnabled\": true\n      });\n      var nodeSelectionAdornmentTemplate = $(go.Adornment, \"Auto\", $(go.Shape, {\n        fill: null,\n        stroke: \"#979dac\",\n        strokeWidth: 2,\n        strokeDashArray: [4, 2]\n      }), $(go.Placeholder)); // define the Node template\n\n      myDiagram.nodeTemplate = $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, // define the node's outer shape, which will surround the TextBlock\n      $(go.Shape, \"Rectangle\", {\n        fill: yellowgrad,\n        stroke: null,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true,\n        cursor: \"pointer\",\n        toEndSegmentLength: 50,\n        fromEndSegmentLength: 50\n      }), $(go.TextBlock, \"ReLU\", {\n        margin: 6,\n        font: bigfont,\n        editable: true,\n        minSize: new go.Size(40, NaN)\n      }, new go.Binding(\"text\", \"text\").makeTwoWay())); // Data\n\n      myDiagram.nodeTemplateMap.add(\"Data\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center,\n        margin: new go.Margin(0, 0, 0, 0)\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"Circle\", {\n        fill: bluegrad,\n        portId: \"\",\n        fromLinkable: true,\n        cursor: \"pointer\",\n        //fromEndSegmentLength: 40,\n        stroke: \"#74c69d\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"Data\", textStyle(), {\n        stroke: \"#2d6a4f\",\n        minSize: new go.Size(40, NaN)\n      }, new go.Binding(\"text\", \"text\").makeTwoWay())));\n      myDiagram.nodeTemplateMap.add(\"End\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"Circle\", {\n        fill: redgrad,\n        portId: \"\",\n        toLinkable: true,\n        cursor: \"pointer\",\n        fromEndSegmentLength: 40,\n        stroke: \"#df7373\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"End\", textStyle(), {\n        stroke: \"#ad2e24\",\n        minSize: new go.Size(40, NaN)\n      }, new go.Binding(\"text\", \"text\").makeTwoWay())));\n      myDiagram.nodeTemplateMap.add(\"ReLU\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"Ellipse\", {\n        fill: greengrad,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true,\n        cursor: \"pointer\",\n        fromEndSegmentLength: 40,\n        stroke: \"#ffd100\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"ReLU\", textStyle(), {\n        stroke: \"#e2711d\",\n        // locationSpot: go.Spot.Center,\n        //margin: new go.Margin(10, 0, 0, 0),\n        minSize: new go.Size(60, NaN)\n      }, new go.Binding(\"text\", \"text\").makeTwoWay())));\n      var reasonTemplate = $(go.Panel, $(go.Panel, \"Table\", {\n        maxSize: new go.Size(200, 999),\n        margin: new go.Margin(0, 3, 10, 3),\n        defaultAlignment: go.Spot.Center\n      }, $(go.RowColumnDefinition, {\n        column: 2,\n        width: 2\n      }), $(go.TextBlock, \"input = \", {\n        margin: new go.Margin(4, 0, 0, 0),\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        //stroke: \"whitesmoke\",\n        editable: true,\n        font: smallfont,\n        row: 2,\n        column: 0,\n        stroke: \"#3e5c76\"\n      }, new go.Binding(\"text\", \"text0\").makeTwoWay()), $(go.TextBlock, \"value\", {\n        margin: new go.Margin(4, 0, 0, 0),\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        //stroke: \"whitesmoke\",\n        editable: true,\n        stroke: \"#3e5c76\",\n        font: smallfont,\n        row: 2,\n        column: 1\n      }, new go.Binding(\"text\", \"text1\").makeTwoWay()), $(go.TextBlock, \"output = \", {\n        margin: new go.Margin(4, 0, 0, 0),\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        //stroke: \"whitesmoke\",\n        editable: true,\n        font: smallfont,\n        stroke: \"#3e5c76\",\n        row: 3,\n        column: 0\n      }, new go.Binding(\"text\", \"text2\").makeTwoWay()), $(go.TextBlock, \"value\", {\n        margin: new go.Margin(4, 0, 0, 9),\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        //stroke: \"whitesmoke\",\n        editable: true,\n        font: smallfont,\n        stroke: \"#3e5c76\",\n        row: 3,\n        column: 1\n      }, new go.Binding(\"text\", \"text3\").makeTwoWay())) // end Table Panel\n      );\n      myDiagram.nodeTemplateMap.add(\"FC\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"RoundedRectangle\", {\n        fill: yellowgrad,\n        stroke: \"#4ea8de\",\n        strokeWidth: 4,\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true,\n        cursor: \"pointer\",\n        toEndSegmentLength: 50,\n        fromEndSegmentLength: 40\n      }), $(go.Panel, \"Vertical\", {\n        defaultAlignment: go.Spot.Center\n      }, $(go.TextBlock, \"FC\", textStyle(), {\n        stroke: \"#3e5c76\",\n        margin: new go.Margin(8, 0, 0, 0),\n        minSize: new go.Size(100, NaN) //maxSize: new go.Size(200, NaN)\n\n      }, new go.Binding(\"text\", \"text\").makeTwoWay()), $(go.Panel, \"Vertical\", {\n        defaultAlignment: go.Spot.TopLeft,\n        itemTemplate: reasonTemplate\n      }, new go.Binding(\"itemArray\", \"reasonsList\").makeTwoWay()))));\n      var linkSelectionAdornmentTemplate = $(go.Adornment, \"Link\", $(go.Shape, // isPanelMain declares that this Shape shares the Link.geometry\n      {\n        isPanelMain: true,\n        fill: null,\n        stroke: \"deepskyblue\",\n        strokeWidth: 2.5\n      }) // use selection object's strokeWidth\n      ); // replace the default Link template in the linkTemplateMap\n\n      myDiagram.linkTemplate = $(go.Link, // the whole link panel\n      {\n        selectable: true,\n        selectionAdornmentTemplate: linkSelectionAdornmentTemplate\n      }, new go.Binding(\"points\").makeTwoWay(), {\n        //curve: go.Link.Bezier,\n        toShortLength: 15\n      }, //new go.Binding(\"curviness\", \"curviness\"),\n      $(go.Shape, // the link shape\n      {\n        stroke: \"#979dac\",\n        strokeWidth: 2.5\n      }), $(go.Shape, // the arrowhead\n      {\n        toArrow: \"kite\",\n        fill: \"#979dac\",\n        stroke: null,\n        scale: 2\n      }));\n      myDiagram.nodeTemplateMap.add(\"RNN\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"RoundedRectangle\", {\n        fill: whitegrad,\n        stroke: \"#CF8BF9\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"RNN\\n(unavailable)\", textStyle(), {\n        margin: 9,\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        editable: true,\n        stroke: \"#560788\",\n        font: smallfont\n      }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n      ));\n      myDiagram.nodeTemplateMap.add(\"CNN\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"RoundedRectangle\", {\n        fill: whitegrad,\n        stroke: \"#CF8BF9\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"CNN\\n(unavailable)\", textStyle(), {\n        margin: 9,\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        editable: true,\n        stroke: \"#560788\",\n        font: smallfont\n      }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n      ));\n      myDiagram.nodeTemplateMap.add(\"LSTM\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"RoundedRectangle\", {\n        fill: whitegrad,\n        stroke: \"#CF8BF9\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"LSTM\\n(unavailable)\", textStyle(), {\n        margin: 9,\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        editable: true,\n        stroke: \"#560788\",\n        font: smallfont\n      }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n      ));\n      myDiagram.nodeTemplateMap.add(\"Softmax\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"RoundedRectangle\", {\n        fill: whitegrad,\n        stroke: \"#CF8BF9\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"Softmax\\n(unavailable)\", textStyle(), {\n        margin: 9,\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        editable: true,\n        stroke: \"#560788\",\n        font: smallfont\n      }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n      ));\n      myDiagram.nodeTemplateMap.add(\"Maximum Polling\", $(go.Node, \"Auto\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, $(go.Shape, \"RoundedRectangle\", {\n        fill: whitegrad,\n        stroke: \"#CF8BF9\",\n        strokeWidth: 4\n      }), $(go.TextBlock, \"Maximum\\nPolling\\n(unavailable)\", textStyle(), {\n        margin: 9,\n        maxSize: new go.Size(200, NaN),\n        wrap: go.TextBlock.WrapFit,\n        editable: true,\n        stroke: \"#560788\",\n        font: smallfont\n      }, new go.Binding(\"text\", \"text\").makeTwoWay()) // no ports, because no links are allowed to connect with a comment\n      ));\n      var palette = $(go.Palette, \"myPaletteDiv\", // create a new Palette in the HTML DIV element\n      {\n        // share the template map with the Palette\n        nodeTemplateMap: myDiagram.nodeTemplateMap,\n        autoScale: go.Diagram.Uniform // everything always fits in viewport\n\n      });\n      palette.model.nodeDataArray = [{\n        category: \"Data\"\n      }, {\n        category: \"ReLU\"\n      }, {\n        category: \"FC\",\n        reasonsList: [{}]\n      }, {\n        category: \"End\"\n      }, {\n        category: \"CNN\"\n      }, {\n        category: \"RNN\"\n      }, {\n        category: \"LSTM\"\n      }, {\n        category: \"Softmax\"\n      }, {\n        category: \"Maximum Polling\"\n      }];\n    }\n\n    window.addEventListener(\"DOMContentLoaded\", init);\n  },\n  methods: {//       save() {\n    //     console.log(\"save\");\n    //     // myDiagram.layoutDiagram(true);\n    //   },\n    //       load() {\n    //     console.log(\"load\");\n    //     // myDiagram.layoutDiagram(true);\n    //   },\n    //   layout() {\n    //     // console.log(\"layout\");\n    //     // myDiagram.layoutDiagram(true);\n    //   },\n  }\n};","map":{"version":3,"mappings":"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","names":["go","name","mounted","init","$","GraphObject","make","yellowgrad","Brush","greengrad","bluegrad","redgrad","whitegrad","bigfont","smallfont","textStyle","margin","wrap","TextBlock","WrapFit","textAlign","editable","font","myDiagram","Diagram","initialAutoScale","Uniform","LinkingTool","ForwardsOnly","layout","LayeredDigraphLayout","isInitial","isOngoing","layerSpacing","nodeSelectionAdornmentTemplate","Adornment","Shape","fill","stroke","strokeWidth","strokeDashArray","Placeholder","nodeTemplate","Node","locationSpot","Spot","Center","Binding","Point","parse","makeTwoWay","stringify","selectable","selectionAdornmentTemplate","portId","fromLinkable","toLinkable","cursor","toEndSegmentLength","fromEndSegmentLength","minSize","Size","NaN","nodeTemplateMap","add","Margin","reasonTemplate","Panel","maxSize","defaultAlignment","RowColumnDefinition","column","width","row","TopLeft","itemTemplate","linkSelectionAdornmentTemplate","isPanelMain","linkTemplate","Link","toShortLength","toArrow","scale","palette","Palette","autoScale","model","nodeDataArray","category","reasonsList","window","addEventListener","methods"],"sourceRoot":"","sources":["C:\\qp_box\\_CodeField\\Neural-Lego\\frontend\\src\\views\\CanvasView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div id=\"allSampleContent\" class=\"p-4 w-full\">\r\n      <div id=\"sample\">\r\n        <div\r\n          style=\"\r\n            width: 100%;\r\n            margin-bottom: 10px;\r\n            display: flex;\r\n            justify-content: space-between;\r\n          \"\r\n        >\r\n          <div\r\n            id=\"myPaletteDiv\"\r\n            style=\"\r\n              width: 150px;\r\n              margin-right: 10px;\r\n              background-color: whitesmoke;\r\n              border: solid 4px #82929b;\r\n            \"\r\n          ></div>\r\n          <div\r\n            id=\"myDiagramDiv\"\r\n            style=\"\r\n              flex-grow: 3;\r\n              margin-right: 10px;\r\n              height: 600px;\r\n              background-color: whitesmoke;\r\n              border: solid 4px #82929b;\r\n            \"\r\n          ></div>\r\n          <div\r\n            id=\"myDiagramDiv\"\r\n            style=\"\r\n              flex-grow: 2;\r\n              height: 600px;\r\n              background-color: whitesmoke;\r\n              border: solid 4px #82929b;\r\n            \"\r\n          ></div>\r\n        </div>\r\n\r\n        <button type=\"submit\" @click=\"save()\">Save</button>\r\n        <button type=\"submit\" @click=\"load()\">Load</button>\r\n        <button type=\"submit\" @click=\"layout()\">Layout</button>\r\n        <br />\r\n        <textarea id=\"mySavedModel\" style=\"width: 100%; height: 300px\">\r\n{ \"class\": \"GraphLinksModel\", \r\n\"nodeDataArray\": [ {\"category\":\"Data\", \"key\":-1, \"loc\":\"-70.5 -90.19999980926514\"} ], \r\n\"linkDataArray\": []}\r\n  </textarea\r\n        >\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n\r\n<script id='code'>\r\nimport * as go from \"/public/go.js\";\r\n\r\nexport default {\r\n  name: \"CanvasView\",\r\n  mounted() {\r\n    function init() {\r\n      const $ = go.GraphObject.make; // for conciseness in defining templates\r\n\r\n      var yellowgrad = $(go.Brush, \"Linear\", {\r\n        0: \"#bde0fe\",\r\n        1: \"#bde0fe\",\r\n      });\r\n      var greengrad = $(go.Brush, \"Linear\", {\r\n        0: \"#fdffb6\",\r\n        1: \"#fdffb6\",\r\n      });\r\n      var bluegrad = $(go.Brush, \"Linear\", {\r\n        0: \"#caffbf\",\r\n        1: \"#caffbf\",\r\n      });\r\n      var redgrad = $(go.Brush, \"Linear\", {\r\n        0: \"#ffadad\",\r\n        1: \"#ffadad\",\r\n      });\r\n      var whitegrad = $(go.Brush, \"Linear\", {\r\n        0: \"#E7C5FC\",\r\n        1: \"#E7C5FC\",\r\n      });\r\n      var bigfont = \"bold 15pt Helvetica, Arial, sans-serif\";\r\n      var smallfont = \"bold 13pt Helvetica, Arial, sans-serif\";\r\n\r\n      // Common text styling\r\n      function textStyle() {\r\n        return {\r\n          margin: 6,\r\n          wrap: go.TextBlock.WrapFit,\r\n          textAlign: \"center\",\r\n          editable: true,\r\n          font: bigfont,\r\n        };\r\n      }\r\n\r\n      const myDiagram = $(go.Diagram, \"myDiagramDiv\", {\r\n        // // have mouse wheel events zoom in and out instead of scroll up and down\r\n        //\"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\r\n        initialAutoScale: go.Diagram.Uniform,\r\n        \"linkingTool.direction\": go.LinkingTool.ForwardsOnly,\r\n        layout: $(go.LayeredDigraphLayout, {\r\n          isInitial: false,\r\n          isOngoing: false,\r\n          layerSpacing: 50,\r\n        }),\r\n        \"undoManager.isEnabled\": true,\r\n      });\r\n\r\n      var nodeSelectionAdornmentTemplate = $(\r\n        go.Adornment,\r\n        \"Auto\",\r\n        $(go.Shape, {\r\n          fill: null,\r\n          stroke: \"#979dac\",\r\n          strokeWidth: 2,\r\n          strokeDashArray: [4, 2],\r\n        }),\r\n        $(go.Placeholder)\r\n      );\r\n\r\n      // define the Node template\r\n      myDiagram.nodeTemplate = $(\r\n        go.Node,\r\n        \"Auto\",\r\n        {\r\n          locationSpot: go.Spot.Center,\r\n        },\r\n        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n          go.Point.stringify\r\n        ),\r\n        {\r\n          selectable: true,\r\n          selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n        },\r\n        // define the node's outer shape, which will surround the TextBlock\r\n        $(go.Shape, \"Rectangle\", {\r\n          fill: yellowgrad,\r\n          stroke: null,\r\n          portId: \"\",\r\n          fromLinkable: true,\r\n          toLinkable: true,\r\n          cursor: \"pointer\",\r\n          toEndSegmentLength: 50,\r\n          fromEndSegmentLength: 50,\r\n        }),\r\n        $(\r\n          go.TextBlock,\r\n          \"ReLU\",\r\n          {\r\n            margin: 6,\r\n            font: bigfont,\r\n            editable: true,\r\n            minSize: new go.Size(40, NaN),\r\n          },\r\n          new go.Binding(\"text\", \"text\").makeTwoWay()\r\n        )\r\n      );\r\n\r\n      // Data\r\n      myDiagram.nodeTemplateMap.add(\r\n        \"Data\",\r\n        $(\r\n          go.Node,\r\n          \"Auto\",\r\n          {\r\n            locationSpot: go.Spot.Center,\r\n            margin: new go.Margin(0, 0, 0, 0),\r\n          },\r\n          new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n            go.Point.stringify\r\n          ),\r\n          {\r\n            selectable: true,\r\n            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n          },\r\n          $(go.Shape, \"Circle\", {\r\n            fill: bluegrad,\r\n            portId: \"\",\r\n            fromLinkable: true,\r\n            cursor: \"pointer\",\r\n            //fromEndSegmentLength: 40,\r\n            stroke: \"#74c69d\",\r\n\r\n            strokeWidth: 4,\r\n          }),\r\n          $(\r\n            go.TextBlock,\r\n            \"Data\",\r\n            textStyle(),\r\n            {\r\n              stroke: \"#2d6a4f\",\r\n              minSize: new go.Size(40, NaN),\r\n            },\r\n            new go.Binding(\"text\", \"text\").makeTwoWay()\r\n          )\r\n        )\r\n      );\r\n\r\n      myDiagram.nodeTemplateMap.add(\r\n        \"End\",\r\n        $(\r\n          go.Node,\r\n          \"Auto\",\r\n          {\r\n            locationSpot: go.Spot.Center,\r\n          },\r\n          new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n            go.Point.stringify\r\n          ),\r\n          {\r\n            selectable: true,\r\n            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n          },\r\n          $(go.Shape, \"Circle\", {\r\n            fill: redgrad,\r\n            portId: \"\",\r\n            toLinkable: true,\r\n            cursor: \"pointer\",\r\n            fromEndSegmentLength: 40,\r\n            stroke: \"#df7373\",\r\n            strokeWidth: 4,\r\n          }),\r\n          $(\r\n            go.TextBlock,\r\n            \"End\",\r\n            textStyle(),\r\n            {\r\n              stroke: \"#ad2e24\",\r\n              minSize: new go.Size(40, NaN),\r\n            },\r\n            new go.Binding(\"text\", \"text\").makeTwoWay()\r\n          )\r\n        )\r\n      );\r\n\r\n      myDiagram.nodeTemplateMap.add(\r\n        \"ReLU\",\r\n        $(\r\n          go.Node,\r\n          \"Auto\",\r\n          {\r\n            locationSpot: go.Spot.Center,\r\n          },\r\n          new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n            go.Point.stringify\r\n          ),\r\n          {\r\n            selectable: true,\r\n            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n          },\r\n          $(go.Shape, \"Ellipse\", {\r\n            fill: greengrad,\r\n            portId: \"\",\r\n            fromLinkable: true,\r\n            toLinkable: true,\r\n            cursor: \"pointer\",\r\n            fromEndSegmentLength: 40,\r\n            stroke: \"#ffd100\",\r\n            strokeWidth: 4,\r\n          }),\r\n          $(\r\n            go.TextBlock,\r\n            \"ReLU\",\r\n            textStyle(),\r\n            {\r\n              stroke: \"#e2711d\",\r\n              // locationSpot: go.Spot.Center,\r\n              //margin: new go.Margin(10, 0, 0, 0),\r\n              minSize: new go.Size(60, NaN),\r\n            },\r\n            new go.Binding(\"text\", \"text\").makeTwoWay()\r\n          )\r\n        )\r\n      );\r\n\r\n      var reasonTemplate = $(\r\n        go.Panel,\r\n        $(\r\n          go.Panel,\r\n          \"Table\",\r\n          {\r\n            maxSize: new go.Size(200, 999),\r\n            margin: new go.Margin(0, 3, 10, 3),\r\n            defaultAlignment: go.Spot.Center,\r\n          },\r\n          $(go.RowColumnDefinition, {\r\n            column: 2,\r\n            width: 2,\r\n          }),\r\n          $(\r\n            go.TextBlock,\r\n            \"input = \",\r\n            {\r\n              margin: new go.Margin(4, 0, 0, 0),\r\n              maxSize: new go.Size(200, NaN),\r\n              wrap: go.TextBlock.WrapFit,\r\n              //stroke: \"whitesmoke\",\r\n              editable: true,\r\n              font: smallfont,\r\n              row: 2,\r\n              column: 0,\r\n              stroke: \"#3e5c76\",\r\n            },\r\n            new go.Binding(\"text\", \"text0\").makeTwoWay()\r\n          ),\r\n\r\n          $(\r\n            go.TextBlock,\r\n            \"value\",\r\n            {\r\n              margin: new go.Margin(4, 0, 0, 0),\r\n              maxSize: new go.Size(200, NaN),\r\n              wrap: go.TextBlock.WrapFit,\r\n              //stroke: \"whitesmoke\",\r\n              editable: true,\r\n              stroke: \"#3e5c76\",\r\n              font: smallfont,\r\n              row: 2,\r\n              column: 1,\r\n            },\r\n            new go.Binding(\"text\", \"text1\").makeTwoWay()\r\n          ),\r\n\r\n          $(\r\n            go.TextBlock,\r\n            \"output = \",\r\n            {\r\n              margin: new go.Margin(4, 0, 0, 0),\r\n              maxSize: new go.Size(200, NaN),\r\n              wrap: go.TextBlock.WrapFit,\r\n              //stroke: \"whitesmoke\",\r\n              editable: true,\r\n              font: smallfont,\r\n              stroke: \"#3e5c76\",\r\n              row: 3,\r\n              column: 0,\r\n            },\r\n            new go.Binding(\"text\", \"text2\").makeTwoWay()\r\n          ),\r\n\r\n          $(\r\n            go.TextBlock,\r\n            \"value\",\r\n            {\r\n              margin: new go.Margin(4, 0, 0, 9),\r\n              maxSize: new go.Size(200, NaN),\r\n              wrap: go.TextBlock.WrapFit,\r\n              //stroke: \"whitesmoke\",\r\n              editable: true,\r\n              font: smallfont,\r\n              stroke: \"#3e5c76\",\r\n              row: 3,\r\n              column: 1,\r\n            },\r\n            new go.Binding(\"text\", \"text3\").makeTwoWay()\r\n          )\r\n        ) // end Table Panel\r\n      );\r\n\r\n      myDiagram.nodeTemplateMap.add(\r\n        \"FC\",\r\n        $(\r\n          go.Node,\r\n          \"Auto\",\r\n          {\r\n            locationSpot: go.Spot.Center,\r\n          },\r\n          new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n            go.Point.stringify\r\n          ),\r\n          {\r\n            selectable: true,\r\n            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n          },\r\n          $(go.Shape, \"RoundedRectangle\", {\r\n            fill: yellowgrad,\r\n            stroke: \"#4ea8de\",\r\n            strokeWidth: 4,\r\n            portId: \"\",\r\n            fromLinkable: true,\r\n            toLinkable: true,\r\n            cursor: \"pointer\",\r\n            toEndSegmentLength: 50,\r\n            fromEndSegmentLength: 40,\r\n          }),\r\n          $(\r\n            go.Panel,\r\n            \"Vertical\",\r\n            {\r\n              defaultAlignment: go.Spot.Center,\r\n            },\r\n\r\n            $(\r\n              go.TextBlock,\r\n              \"FC\",\r\n              textStyle(),\r\n              {\r\n                stroke: \"#3e5c76\",\r\n                margin: new go.Margin(8, 0, 0, 0),\r\n                minSize: new go.Size(100, NaN),\r\n                //maxSize: new go.Size(200, NaN)\r\n              },\r\n              new go.Binding(\"text\", \"text\").makeTwoWay()\r\n            ),\r\n\r\n            $(\r\n              go.Panel,\r\n              \"Vertical\",\r\n              {\r\n                defaultAlignment: go.Spot.TopLeft,\r\n                itemTemplate: reasonTemplate,\r\n              },\r\n              new go.Binding(\"itemArray\", \"reasonsList\").makeTwoWay()\r\n            )\r\n          )\r\n        )\r\n      );\r\n\r\n      var linkSelectionAdornmentTemplate = $(\r\n        go.Adornment,\r\n        \"Link\",\r\n        $(\r\n          go.Shape,\r\n          // isPanelMain declares that this Shape shares the Link.geometry\r\n          {\r\n            isPanelMain: true,\r\n            fill: null,\r\n            stroke: \"deepskyblue\",\r\n            strokeWidth: 2.5,\r\n          }\r\n        ) // use selection object's strokeWidth\r\n      );\r\n      // replace the default Link template in the linkTemplateMap\r\n      myDiagram.linkTemplate = $(\r\n        go.Link, // the whole link panel\r\n        {\r\n          selectable: true,\r\n          selectionAdornmentTemplate: linkSelectionAdornmentTemplate,\r\n        },\r\n        new go.Binding(\"points\").makeTwoWay(),\r\n        {\r\n          //curve: go.Link.Bezier,\r\n          toShortLength: 15,\r\n        },\r\n        //new go.Binding(\"curviness\", \"curviness\"),\r\n        $(\r\n          go.Shape, // the link shape\r\n          {\r\n            stroke: \"#979dac\",\r\n            strokeWidth: 2.5,\r\n          }\r\n        ),\r\n        $(\r\n          go.Shape, // the arrowhead\r\n          {\r\n            toArrow: \"kite\",\r\n            fill: \"#979dac\",\r\n            stroke: null,\r\n            scale: 2,\r\n          }\r\n        )\r\n      );\r\n\r\n      myDiagram.nodeTemplateMap.add(\r\n        \"RNN\",\r\n        $(\r\n          go.Node,\r\n          \"Auto\",\r\n          {\r\n            locationSpot: go.Spot.Center,\r\n          },\r\n          new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n            go.Point.stringify\r\n          ),\r\n          {\r\n            selectable: true,\r\n            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n          },\r\n          $(go.Shape, \"RoundedRectangle\", {\r\n            fill: whitegrad,\r\n            stroke: \"#CF8BF9\",\r\n            strokeWidth: 4,\r\n          }),\r\n          $(\r\n            go.TextBlock,\r\n            \"RNN\\n(unavailable)\",\r\n            textStyle(),\r\n            {\r\n              margin: 9,\r\n              maxSize: new go.Size(200, NaN),\r\n              wrap: go.TextBlock.WrapFit,\r\n              editable: true,\r\n              stroke: \"#560788\",\r\n              font: smallfont,\r\n            },\r\n            new go.Binding(\"text\", \"text\").makeTwoWay()\r\n          )\r\n          // no ports, because no links are allowed to connect with a comment\r\n        )\r\n      );\r\n\r\n      myDiagram.nodeTemplateMap.add(\r\n        \"CNN\",\r\n        $(\r\n          go.Node,\r\n          \"Auto\",\r\n          {\r\n            locationSpot: go.Spot.Center,\r\n          },\r\n          new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n            go.Point.stringify\r\n          ),\r\n          {\r\n            selectable: true,\r\n            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n          },\r\n          $(go.Shape, \"RoundedRectangle\", {\r\n            fill: whitegrad,\r\n            stroke: \"#CF8BF9\",\r\n            strokeWidth: 4,\r\n          }),\r\n          $(\r\n            go.TextBlock,\r\n            \"CNN\\n(unavailable)\",\r\n            textStyle(),\r\n            {\r\n              margin: 9,\r\n              maxSize: new go.Size(200, NaN),\r\n              wrap: go.TextBlock.WrapFit,\r\n              editable: true,\r\n              stroke: \"#560788\",\r\n              font: smallfont,\r\n            },\r\n            new go.Binding(\"text\", \"text\").makeTwoWay()\r\n          )\r\n          // no ports, because no links are allowed to connect with a comment\r\n        )\r\n      );\r\n\r\n      myDiagram.nodeTemplateMap.add(\r\n        \"LSTM\",\r\n        $(\r\n          go.Node,\r\n          \"Auto\",\r\n          {\r\n            locationSpot: go.Spot.Center,\r\n          },\r\n          new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n            go.Point.stringify\r\n          ),\r\n          {\r\n            selectable: true,\r\n            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n          },\r\n          $(go.Shape, \"RoundedRectangle\", {\r\n            fill: whitegrad,\r\n            stroke: \"#CF8BF9\",\r\n            strokeWidth: 4,\r\n          }),\r\n          $(\r\n            go.TextBlock,\r\n            \"LSTM\\n(unavailable)\",\r\n            textStyle(),\r\n            {\r\n              margin: 9,\r\n              maxSize: new go.Size(200, NaN),\r\n              wrap: go.TextBlock.WrapFit,\r\n              editable: true,\r\n              stroke: \"#560788\",\r\n              font: smallfont,\r\n            },\r\n            new go.Binding(\"text\", \"text\").makeTwoWay()\r\n          )\r\n          // no ports, because no links are allowed to connect with a comment\r\n        )\r\n      );\r\n\r\n      myDiagram.nodeTemplateMap.add(\r\n        \"Softmax\",\r\n        $(\r\n          go.Node,\r\n          \"Auto\",\r\n          {\r\n            locationSpot: go.Spot.Center,\r\n          },\r\n          new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n            go.Point.stringify\r\n          ),\r\n          {\r\n            selectable: true,\r\n            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n          },\r\n          $(go.Shape, \"RoundedRectangle\", {\r\n            fill: whitegrad,\r\n            stroke: \"#CF8BF9\",\r\n            strokeWidth: 4,\r\n          }),\r\n          $(\r\n            go.TextBlock,\r\n            \"Softmax\\n(unavailable)\",\r\n            textStyle(),\r\n            {\r\n              margin: 9,\r\n              maxSize: new go.Size(200, NaN),\r\n              wrap: go.TextBlock.WrapFit,\r\n              editable: true,\r\n              stroke: \"#560788\",\r\n              font: smallfont,\r\n            },\r\n            new go.Binding(\"text\", \"text\").makeTwoWay()\r\n          )\r\n          // no ports, because no links are allowed to connect with a comment\r\n        )\r\n      );\r\n\r\n      myDiagram.nodeTemplateMap.add(\r\n        \"Maximum Polling\",\r\n        $(\r\n          go.Node,\r\n          \"Auto\",\r\n          {\r\n            locationSpot: go.Spot.Center,\r\n          },\r\n          new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n            go.Point.stringify\r\n          ),\r\n          {\r\n            selectable: true,\r\n            selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,\r\n          },\r\n          $(go.Shape, \"RoundedRectangle\", {\r\n            fill: whitegrad,\r\n            stroke: \"#CF8BF9\",\r\n            strokeWidth: 4,\r\n          }),\r\n          $(\r\n            go.TextBlock,\r\n            \"Maximum\\nPolling\\n(unavailable)\",\r\n            textStyle(),\r\n            {\r\n              margin: 9,\r\n              maxSize: new go.Size(200, NaN),\r\n              wrap: go.TextBlock.WrapFit,\r\n              editable: true,\r\n              stroke: \"#560788\",\r\n              font: smallfont,\r\n            },\r\n            new go.Binding(\"text\", \"text\").makeTwoWay()\r\n          )\r\n          // no ports, because no links are allowed to connect with a comment\r\n        )\r\n      );\r\n\r\n      var palette = $(\r\n        go.Palette,\r\n        \"myPaletteDiv\", // create a new Palette in the HTML DIV element\r\n        {\r\n          // share the template map with the Palette\r\n          nodeTemplateMap: myDiagram.nodeTemplateMap,\r\n          autoScale: go.Diagram.Uniform, // everything always fits in viewport\r\n        }\r\n      );\r\n\r\n      palette.model.nodeDataArray = [\r\n        {\r\n          category: \"Data\",\r\n        },\r\n        {\r\n          category: \"ReLU\",\r\n        },\r\n        {\r\n          category: \"FC\",\r\n          reasonsList: [{}],\r\n        },\r\n        {\r\n          category: \"End\",\r\n        },\r\n        {\r\n          category: \"CNN\",\r\n        },\r\n        {\r\n          category: \"RNN\",\r\n        },\r\n        {\r\n          category: \"LSTM\",\r\n        },\r\n        {\r\n          category: \"Softmax\",\r\n        },\r\n        {\r\n          category: \"Maximum Polling\",\r\n        },\r\n      ];\r\n    }\r\n    window.addEventListener(\"DOMContentLoaded\", init);\r\n  },\r\n\r\n  methods: {\r\n    //       save() {\r\n    //     console.log(\"save\");\r\n    //     // myDiagram.layoutDiagram(true);\r\n    //   },\r\n    //       load() {\r\n    //     console.log(\"load\");\r\n    //     // myDiagram.layoutDiagram(true);\r\n    //   },\r\n    //   layout() {\r\n    //     // console.log(\"layout\");\r\n    //     // myDiagram.layoutDiagram(true);\r\n    //   },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n#myPaletteDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.015);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myDiagramDiv:hover {\r\n  /* box-shadow: 1px 1px #82929B, 2px 2px #82929B, 3px 3px #82929B;\r\n            -webkit-transform: translateX(-3px);\r\n            transform: translateX(-3px);\r\n            transition: .5s ease; */\r\n  /* -webkit-transform: scale(1.2); */\r\n  /* -ms-transform: scale(1.2); */\r\n  transform: scale(1.01);\r\n  transition: 1s ease;\r\n}\r\n\r\n#myPaletteDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n#myDiagramDiv {\r\n  border-radius: 7px;\r\n}\r\n\r\n.button,\r\nbutton {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(31, 73, 99, var(--tw-bg-opacity));\r\n  border-radius: 0.25rem;\r\n  display: inline-block;\r\n  margin: 0.25rem;\r\n  font-size: 12pt;\r\n  font-family: Helvetica, Arial;\r\n  padding-top: 0.25rem;\r\n  padding-bottom: 0.25rem;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n}\r\n\r\n.button:hover,\r\nbutton:hover {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgba(98, 127, 145, var(--tw-bg-opacity));\r\n  --tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n  --tw-text-opacity: 1;\r\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\r\n  transition-property: background-color, border-color, color, fill, stroke;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n  transition-duration: 150ms;\r\n  transition-duration: 0.2s;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}